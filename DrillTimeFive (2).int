DrillTimeThree
    ; Accepts pClass and pKeyList (comma separated keys)
    new pClass,pKeyList
    set pClass = $get(^CacheTemp("pClass"))
    if pClass="" set pClass = "Referrals.Referral"
    set pKeyList = $get(^CacheTemp("pKeyList"))
    if pKeyList="" set pKeyList = "HMO,ID,RIN"

    set $ZERROR=""
    set $ZTRAP="G TRAP^DrillTimeFive"

    new keyFields,keyLength
    new classDef,sc,totalProps
    new i,propObj,propName,colNum,colName
    new colMap,orderedProps,headerLine
    new recCount,obj,val,csvValue,csvLine,idx

    set recCount = 0

    ; Parse keyList into array
    if pKeyList'="" {
        if pKeyList?1N.N {
            set keyLength=+pKeyList
        } else {
            set keyLength=$length(pKeyList,",")
            for i=1:1:keyLength set keyFields(i)=$piece(pKeyList,",",i)
        }
    } else {
        set keyLength=0
    }

    set classDef = ##class(%Dictionary.ClassDefinition).%OpenId(pClass,.sc)
    if '$isobject(classDef) {
        write "ERROR: Cannot open class definition: "_pClass,!
        quit
    }

    set totalProps = classDef.Properties.Count()
    if 'totalProps {
        write "No properties found for class: "_pClass,!
        quit
    }

    kill colMap,orderedProps

    ; Build mapping of SqlColumnNumber to property and column name
    for i=1:1:totalProps {
        set propObj=classDef.Properties.GetAt(i)
        if '$isobject(propObj) continue
        set propName=propObj.Name
        set colNum=propObj.GetParameter("SqlColumnNumber") ; May be ""
        if colNum="" set colNum=9999
        set colName=propObj.GetParameter("SqlFieldName")
        if colName="" set colName=propName
        set colMap(colNum)=propName_"^"_colName
    }

    ; Build ordered list and CSV header
    set headerLine=""
    set idx=""
    for  set idx=$order(colMap(idx)) quit:idx=""  do {
        set propName=$piece(colMap(idx),"^",1)
        set colName=$piece(colMap(idx),"^",2)
        set orderedProps(idx)=propName
        if headerLine'="" {
            set headerLine=headerLine_","_""""_colName_""""
        } else {
            set headerLine=""""_colName_""""
        }
    }

    set ^EXPORT($J,0)=headerLine

    ; For demo, we assume keys are Ids from global ^[namespace]pClass... Modify traversal or fetch as needed.

    ; Here, just a dummy example: loop IDs from 1 to 100 as example
    for idx=1:1:100 {
        set obj = ##class(pClass).%OpenId(idx)
        if '$isobject(obj) quit
        set csvLine=""
        for i=1:1:$order(orderedProps(""),-1) {
            set propName = orderedProps(i)
            set val = obj.%Get(propName)
            ;
            ; Escape quotes
            if val["""" set val=$replace(val,"""",""""")
            ; Quote if contains comma or quote
            if (val[",")!(val["""") set val=""""_val_""""
            if csvLine'="" set csvLine=csvLine_","_val
            else  set csvLine=val
        }
        set recCount=recCount+1
        set ^EXPORT($J,recCount)=csvLine
    }

    write "Exported records: ",recCount,!
    quit

TRAP
    do $system.Status.DisplayError($ZERROR)
    quit
