<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2018.1.7 (Build 721U)" ts="2025-08-07 11:59:46">
<Class name="CaseMgmt.AuditTrail">
<Description><![CDATA[
Query this table for case audit trail information including case number, user
initials, posting date and posting time.  Columns defined in <CLASS>CaseMgmt.Header</CLASS> that
have the application keyword of AUDIT are the collumns maintained in the audit
trail.  This table contains audits from the past 15 days.]]></Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>63729,47413.180792</TimeChanged>
<TimeCreated>63729,46104</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_AUDIT</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.AuditTrail</Default>
</Parameter>

<Property name="CaseNum">
<Description>
This column contains the Case number.</Description>
<Type>CaseMgmt.Header</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
<Parameter name="CAPTION" value="Case #"/>
</Property>

<ForeignKey name="CaseNum">
<Properties>CaseNum</Properties>
<ReferencedClass>CaseMgmt.Header</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Counter">
<Description>
This column is for internal table integrity and does not have much value if
queried.</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>6</SqlColumnNumber>
</Property>

<Property name="Ini">
<Description>
This column contains the USERNAME of the person that edited the case.</Description>
<Type>SecurityPlus.Usr</Type>
<SqlColumnNumber>3</SqlColumnNumber>
<SqlComputeCode> S {*}=$P(SECID,"^",1) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<ForeignKey name="Ini">
<Properties>Ini</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="NewVal">
<Description>
This column contains the new value of the case data element after it was
changed.</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="NewValExt">
<Description>
This column contains the new value of the data after it was changed.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="New Value"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OldVal">
<Description>
This column contains the internal old value of the data element.</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OldValExt">
<Description>
This column contains the old value of the field before the change.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Old Value"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PostingDate">
<Description>
This column contains the posting date of the audits to the case.</Description>
<Type>%Date</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="Posting Date"/>
<Parameter name="MAXVAL" value="+$H"/>
</Property>

<Property name="PostingTime">
<Description>
This column contains the posting time of the audits to the case.</Description>
<Type>%Time</Type>
<Required>1</Required>
<SqlColumnNumber>5</SqlColumnNumber>
<Parameter name="CAPTION" value="Posting Time"/>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="TblAndColumn">
<Description>
This column contains the name of the field data element that was changes, for
example when the case First Date of Service changes this column will contain
the text First Date of Service.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Field"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="60"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>PostingDate,Ini,CaseNum,PostingTime,Counter</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.AuditTrail"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]AUDITC("AUDIT",$P(id,"||",1),$P(id,"||",2),$P(id,"||",3),$P(id,"||",4),$P(id,"||",5))) 
]]></Implementation>
</Method>

<Query name="ByCase">
<Description>
Provided a Case number get the audit trail.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>CaseNum:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT  T2.%Id,
        T2.PostingDate,T2.PostingTime,
        T2.TblAndColumn As Field,
        T2.OldValExt As OldValue,T2.NewValExt As NewVal,
        T1.Ini
 
FROM  %INORDER CaseMgmt.AuditTrailIndexByCase T1 JOIN
      CaseMgmt.AuditTrail T2 ON
      (T2.PostingDate = T1.PostingDate AND T2.CaseNum = T1.CaseNum
        AND T2.Ini=T1.Ini)
 
WHERE T1.CaseNum = :CaseNum
ORDER By T1.InternalAuditDt,T2.Ini,T2.PostingTime DESC</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Id:%String,PostingDate:%Date,PostingTime:%Time,Field:%String,OldValue:%String,NewVal:%String,Ini:%String"/>
</Query>

<Query name="ByDt">
<Description>
Get a report on the case audits by Patient.  If Fromdt is not supplied then
one month from today will be used.  If ToDt is not suppplied then CURRENT_DATE
will be used. StartNm and EndNm can be used to further filter the list.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>FromDt:%Date,ToDt:%Date,StartNm:%String,EndNm:%String,Grp</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT    PostingDate,PostingTime,
          CaseNum,CaseNum->PrmryPat->PatNm As Patient,
          CaseNum->PrmryPat->Mrn As Mrn,
          TblAndColumn As Field, OldValExt As OldValue,  NewValExt As NewVal, 
          Ini, Ini->FullName As UserFullName


FROM      CaseMgmt.AuditTrail
WHERE     (PostingDate BETWEEN COALESCE(:FromDt,DATEADD('mm',-1,CURRENT_DATE))
                       AND     COALESCE(:ToDt,CURRENT_DATE))
          AND
          (CaseNum->PrmryPat->PatNm BETWEEN COALESCE(:StartNm,'A')
                                    AND     COALESCE(:EndNm,'ZZZZZZZZZZZZZZ'))
          AND
        (:Grp IS NULL OR 
         Registration.GroupActivity_PatientRestricted(CaseNum->PrmryPat,:Grp)=0)
]]></SqlQuery>
<Parameter name="ROWSPEC" value="PostingDate:%Date,PostingTime:%Time,CaseNum:%Integer,Patient:%String,Mrn:%String,Field:%String,OldValue:%String,NewVal:%String,Ini:%String,UserFullName:%String"/>
</Query>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 K ^[UCR]AUDITC("AUDIT")   ;Data Global
 D ##class(CaseMgmt.AuditTrailIndexByCase).%KillExtent()
 Q $$$OK
]]></Implementation>
</Method>

<Method name="Maintenance">
<Description>
Delete audit trail records older than 15 days.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec/>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 &SQL(DECLARE MaintCursor CURSOR FOR
      SELECT CaseNum,Ini,PostingDate
      INTO   :Case,:Ini,:PostingDate
      FROM   CaseMgmt.AuditTrail
      WHERE  datediff('dd',PostingDate,CURRENT_DATE) > 15)
 &SQL(OPEN MaintCursor)
 F {
   &SQL(FETCH MaintCursor)
   Q:SQLCODE
   N SQLCODE
   s InternalAuditDt=-PostingDate
   &SQL(DELETE FROM CaseMgmt.AuditTrailIndexByCase
        WHERE CaseNum=:Case AND Ini=:Ini AND InternalAuditDt = :InternalAuditDt)

   &SQL(DELETE FROM CaseMgmt.AuditTrail
        WHERE CaseNum=:CaseNum AND PostingDate=:PostingDate AND
              Ini=:Ini)
 }
 &SQL(CLOSE MaintCursor)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.AuditTrailS</StreamLocation>
<ExtentSize>645</ExtentSize>
<Property name="CaseNum">
<Selectivity>0.3226%</Selectivity>
</Property>
<Property name="Counter">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="Ini">
<Selectivity>1.8868%</Selectivity>
</Property>
<Property name="NewVal">
<Selectivity>0.3484%</Selectivity>
</Property>
<Property name="NewValExt">
<Selectivity>0.3484%</Selectivity>
</Property>
<Property name="OldVal">
<Selectivity>0.4878%</Selectivity>
</Property>
<Property name="OldValExt">
<Selectivity>0.4878%</Selectivity>
</Property>
<Property name="PostingDate">
<Selectivity>1.1236%</Selectivity>
</Property>
<Property name="PostingTime">
<Selectivity>0.2304%</Selectivity>
</Property>
<Property name="TblAndColumn">
<Selectivity>11.1111%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCR]AUDITC</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"AUDIT"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{PostingDate}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{Ini}</Expression>
</Subscript>
<Subscript name="4">
<Expression>{CaseNum}</Expression>
</Subscript>
<Subscript name="5">
<Expression>{PostingTime}</Expression>
</Subscript>
<Subscript name="6">
<Expression>{Counter}</Expression>
</Subscript>
<Data name="NewVal">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="NewValExt">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="OldVal">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="OldValExt">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="TblAndColumn">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.AuditTrailIndexByCase">
<Description>
Query this for case audit trail index information including audit date, case
number, initials, etc.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63729,47413.171792</TimeChanged>
<TimeCreated>63729,46105</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_AUDIT_INDX</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.AuditTrailIndexByCase</Default>
</Parameter>

<Property name="InternalAuditDt">
<Description>
an internal negative date</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
<Parameter name="CAPTION" value="Audit Date"/>
</Property>

<Property name="CaseNum">
<Type>CaseMgmt.Header</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="CaseNum">
<Properties>CaseNum</Properties>
<ReferencedClass>CaseMgmt.Header</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Ini">
<Description>
This column contains the USERNAME of the person that that made a change to a
case.</Description>
<Type>SecurityPlus.Usr</Type>
<SqlColumnNumber>4</SqlColumnNumber>
</Property>

<ForeignKey name="Ini">
<Properties>Ini</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="PostingDate">
<Description>
a Posting Date</Description>
<Type>%Date</Type>
<Calculated>1</Calculated>
<SqlComputeCode> S {*}=-{InternalAuditDt} </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Posting Date"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>CaseNum,InternalAuditDt,Ini</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.AuditTrailIndexByCase"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]AUDITC("INDX",$P(id,"||",1),$P(id,"||",2),$P(id,"||",3))) 
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 K ^[UCR]AUDITC("INDX")   ;Data Global
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.AuditTrailI3632S</StreamLocation>
<ExtentSize>1770</ExtentSize>
<Property name="CaseNum">
<Selectivity>0.0631%</Selectivity>
</Property>
<Property name="Ini">
<Selectivity>2.3108%</Selectivity>
</Property>
<Property name="InternalAuditDt">
<Selectivity>0.2126%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCR]AUDITC</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"INDX"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{CaseNum}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{InternalAuditDt}</Expression>
</Subscript>
<Subscript name="4">
<Expression>{Ini}</Expression>
</Subscript>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.BARBatch">
<Description>
The Case Batch table is used to keep track of charge or payment information
when the case or package has changed.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63729,47413.245792</TimeChanged>
<TimeCreated>63729,46105</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_BATCH</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.BARBatch</Default>
</Parameter>

<Property name="Txns">
<Type>CaseMgmt.BARBatchTxn</Type>
<Cardinality>children</Cardinality>
<Inverse>BARBatch</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Bn">
<Description>
This column contains the batch number.</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<Property name="ClosedDt">
<Description>
This column contains the date on which the batch was closed by Night Jobs.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Closed Date"/>
</Property>

<Property name="CreDt">
<Description>
This column contains the creation date of the batch.</Description>
<Type>%Date</Type>
<InitialExpression>+$H</InitialExpression>
<SqlComputeCode> S {*}=+$H </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Creation Date"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="Grp">
<Description>
This column contains a reference to the accounting group that has case batch
transactions.</Description>
<Type>Dict.GroupProfile</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="Grp">
<Properties>Grp</Properties>
<ReferencedClass>Dict.GroupProfile</ReferencedClass>
</ForeignKey>

<Property name="Pd">
<Description>
This column contains the accounting period when this batch was opened.</Description>
<Type>DBMS.AccountingPeriod</Type>
<Required>1</Required>
<ReadOnly>1</ReadOnly>
<Parameter name="CAPTION" value="Period"/>
</Property>

<Property name="Stat">
<Description>
This column contains the batch status.</Description>
<Type>DBMS.MenuDataType</Type>
<InitialExpression>2</InitialExpression>
<Required>1</Required>
<ReadOnly>1</ReadOnly>
<Parameter name="CAPTION" value="Status"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Open/In-Use/Being Processed/Processed/"/>
<Parameter name="VALUELIST" value="/1/2/4/5/"/>
</Property>

<Property name="Type">
<Description>
This column contains the batch type.</Description>
<Type>DBMS.MenuDataType</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
<ReadOnly>1</ReadOnly>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Charge/"/>
<Parameter name="VALUELIST" value="/1/"/>
</Property>

<Property name="Username">
<Description>
This column contains a reference to the USERNAME that created the batch.</Description>
<Type>SecurityPlus.Usr</Type>
<InitialExpression>$S($P($G(SECID),"^",1)'="":$P(SECID,"^",1),1:$$GetSQLUser^UDDCACHE())</InitialExpression>
<ReadOnly>1</ReadOnly>
</Property>

<ForeignKey name="Username">
<Properties>Username</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Grp,Bn</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.BARBatch"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>ARCASEB:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 S ..Bn=$G(ARCASEBN)
 S ..ClosedDt=$P($G(ARCASEB(.03)),"^",1)
 S ..CreDt=$P($G(ARCASEB(0)),"^",6)
 D ..GrpSetObjectId($G(GRP))
 S ..Pd=$P($G(ARCASEB(0)),"^",17)
 S ..Stat=$P($G(ARCASEB(0)),"^",1)
 S ..Type=$P($G(ARCASEB(0)),"^",5)
 D ..UsernameSetObjectId($P($G(ARCASEB(0)),"^",4)) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[ARCASEB:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>ARCASEBN,GRP</PublicList>
<Implementation><![CDATA[
 S ARCASEBN=..Bn
 S GRP=""
 I ..Grp S GRP=..Grp.SummaryValidate("Grp",.Error)
 S $P(ARCASEB(.03),"^",1)=..ClosedDt
 S $P(ARCASEB(0),"^",6)=..CreDt
 S $P(ARCASEB(0),"^",17)=..Pd
 S $P(ARCASEB(0),"^",1)=..Stat
 S $P(ARCASEB(0),"^",5)=..Type
 S $P(ARCASEB(0),"^",4)=""
 I ..Username,##class(%Dictionary.CompiledMethod).%OpenId("SecurityPlus.Usr||SummaryValidate") S $P(ARCASEB(0),"^",4)=..Username.SummaryValidate("Username",.Error)
 E   I ..Username S $P(ARCASEB(0),"^",4)=..Username.%Id() 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.BARBatch</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,BARTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.BARBatchS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>BARTBL</Global>
<RowReference>^[$P(BARTBL({L1}),"^",1)]ARCASEB({L1},{L2},{L3})</RowReference>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Grp}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^[$P(BARTBL({L1}),"^",1)]ARCASEB({L1})</DataAccess>
<Expression>{Bn}</Expression>
<NextCode/>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^[$P(BARTBL({L1}),"^",1)]ARCASEB({L1},{L2})</DataAccess>
<Expression>0</Expression>
</Subscript>
<Data name="ClosedDt">
<Delimiter>"^"</Delimiter>
<Node>+.03</Node>
<Piece>1</Piece>
</Data>
<Data name="CreDt">
<Delimiter>"^"</Delimiter>
<Piece>6</Piece>
</Data>
<Data name="Pd">
<Delimiter>"^"</Delimiter>
<Piece>17</Piece>
</Data>
<Data name="Stat">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Type">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="Username">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.BARBatchTxn">
<Description>
The Case Batch Txn table is used to keep track of charge or payment information
when the case or package has changed.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63729,47498.541687</TimeChanged>
<TimeCreated>63729,46105</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_BATCH_TXN</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.BARBatchTxn</Default>
</Parameter>

<Property name="BARBatch">
<Type>CaseMgmt.BARBatch</Type>
<Cardinality>parent</Cardinality>
<Inverse>Txns</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Com">
<Description>
This column is used to enter a brief comment about this transaction.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Comment"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ContAdj">
<Description>
Query this column for the dollar amount of any adjustment to a specific
transaction.</Description>
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Adj Amt"/>
</Property>

<Property name="DebitAmt">
<Description>
Query this column for a dollar amount of any debit applied to a specific
transaction.</Description>
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Deb Amt"/>
</Property>

<Property name="Fsc">
<Description>
Query this column for the Financial Status Classification (FSC) of a specific
transaction.</Description>
<Type>Dict.FSC</Type>
<Parameter name="CAPTION" value="Financial Class (FSC)"/>
</Property>

<ForeignKey name="Fsc">
<Properties>Fsc</Properties>
<ReferencedClass>Dict.FSC</ReferencedClass>
</ForeignKey>

<Property name="Gid">
<Description>
This column contains an reference to the Guarantor.</Description>
<Type>Registration.Patient</Type>
</Property>

<ForeignKey name="Gid">
<Properties>Gid</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Id">
<Description>
This column contains the Patient ID for the transaction.</Description>
<Type>%Integer</Type>
</Property>

<Property name="PayAmt">
<Description>
Query this column for the dollar amount of a payment on a specfic transaction.</Description>
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Payment Amt"/>
</Property>

<Property name="PostPd">
<Description>
This is the posting period for the transaction.                           </Description>
<Type>DBMS.AccountingPeriod</Type>
<Parameter name="CAPTION" value="Pd"/>
</Property>

<Property name="PrevFsc">
<Description>
Query this column for the previous Financial Status Classification (FSC)
following a FSC transfer of a specific transaction.</Description>
<Type>Dict.FSC</Type>
<Parameter name="CAPTION" value="Previous Financial Class"/>
</Property>

<ForeignKey name="PrevFsc">
<Properties>PrevFsc</Properties>
<ReferencedClass>Dict.FSC</ReferencedClass>
</ForeignKey>

<Property name="Tx1">
<Description>
This column is an internal transaction number.</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="TX1"/>
</Property>

<Property name="Tx2">
<Description>
This column is an internal transaction number.</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
<Parameter name="CAPTION" value="TX2"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Tx1,Tx2</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.BARBatchTxn"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>ARCASEB:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 S ..Com=$P($P($G(ARCASEB),"_",1),"^",11)
 S ..ContAdj=$P($P($G(ARCASEB),"_",1),"^",3)
 S ..DebitAmt=$P($P($G(ARCASEB),"_",1),"^",5)
 D ..FscSetObjectId($P($P($G(ARCASEB),"_",1),"^",7))
 D ..GidSetObjectId($P($G(ARCASEB),"_",8))
 S ..Id=$P($G(ARCASEB),"_",5)
 S ..PayAmt=$P($P($P($G(ARCASEB),"_",1),"^",2),"*",1)
 S ..PostPd=$P($P($G(ARCASEB),"_",1),"^",10)
 D ..PrevFscSetObjectId($P($P($G(ARCASEB),"_",1),"^",6)) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[ARCASEB:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 S FINT=""
 S FINT=..Com
 S %1=$P($G(ARCASEB),"_",1),$P(%1,"^",11)=FINT,$P(ARCASEB,"_",1)=%1
 S FINT=""
 S FINT=..ContAdj
 S %1=$P($G(ARCASEB),"_",1),$P(%1,"^",3)=FINT,$P(ARCASEB,"_",1)=%1
 S FINT=""
 S FINT=..DebitAmt
 S %1=$P($G(ARCASEB),"_",1),$P(%1,"^",5)=FINT,$P(ARCASEB,"_",1)=%1
 S FINT=""
 I ..Fsc S FINT=..Fsc.Id
 S %1=$P($G(ARCASEB),"_",1),$P(%1,"^",7)=FINT,$P(ARCASEB,"_",1)=%1
 S $P(ARCASEB,"_",8)=""
 I ..Gid,##class(%Dictionary.CompiledMethod).%OpenId("Registration.Patient||SummaryValidate") S $P(ARCASEB,"_",8)=..Gid.SummaryValidate("Gid",.Error)
 E   I ..Gid S $P(ARCASEB,"_",8)=..Gid.%Id()
 S $P(ARCASEB,"_",5)=..Id
 S FINT=""
 S FINT=..PayAmt
 S %1=$P($G(ARCASEB),"_",1),%2=$P(%1,"^",2),$P(%2,"*",1)=FINT,$P(%1,"^",2)=%2,$P(ARCASEB,"_",1)=%1
 S FINT=""
 S FINT=..PostPd
 S %1=$P($G(ARCASEB),"_",1),$P(%1,"^",10)=FINT,$P(ARCASEB,"_",1)=%1
 S FINT=""
 I ..PrevFsc S FINT=..PrevFsc.Id
 S %1=$P($G(ARCASEB),"_",1),$P(%1,"^",6)=FINT,$P(ARCASEB,"_",1)=%1 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..Com["_")||(..Com["^") Q -1
 Q 1 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.BARBatchTxn</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,BARTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.BARBatchTxnS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>BARTBL</Global>
<RowReference>^[$P(BARTBL({L1}),"^",1)]ARCASEB({L1},{L2},{L3},{L4})</RowReference>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.BARBatch.Grp}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^[$P(BARTBL({L1}),"^",1)]ARCASEB({L1})</DataAccess>
<Expression>{CaseMgmt.BARBatch.Bn}</Expression>
<NextCode/>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^[$P(BARTBL({L1}),"^",1)]ARCASEB({L1},{L2})</DataAccess>
<Expression>{Tx1}</Expression>
<NextCode/>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^[$P(BARTBL({L1}),"^",1)]ARCASEB({L1},{L2},{L3})</DataAccess>
<Expression>{Tx2}</Expression>
<NextCode/>
</Subscript>
<Data name="Com">
<Delimiter>"_","^"</Delimiter>
<Piece>1,11</Piece>
</Data>
<Data name="ContAdj">
<Delimiter>"_","^"</Delimiter>
<Piece>1,3</Piece>
</Data>
<Data name="DebitAmt">
<Delimiter>"_","^"</Delimiter>
<Piece>1,5</Piece>
</Data>
<Data name="Fsc">
<Delimiter>"_","^"</Delimiter>
<Piece>1,7</Piece>
</Data>
<Data name="Gid">
<Delimiter>"_"</Delimiter>
<Piece>8</Piece>
</Data>
<Data name="Id">
<Delimiter>"_"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="PayAmt">
<Delimiter>"_","^","*"</Delimiter>
<Piece>1,2,1</Piece>
</Data>
<Data name="PostPd">
<Delimiter>"_","^"</Delimiter>
<Piece>1,10</Piece>
</Data>
<Data name="PrevFsc">
<Delimiter>"_","^"</Delimiter>
<Piece>1,6</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.CaseFileDtIndex">
<Description>
        This table will only have records when BSYS question 729 has a value
greater than 0.  This is the description of question 729.  'IF A DAILY REG. 
TAPE IS PRODUCE, ENTER NUMBER OF DAYS TO RETAIN DATA'  
        If the answer to this question is greater than 0 records will exist in
this table each time a Case if filed.
        Use of this table in a query may reduce processing time particularly if
you are looking for cases that have been edited/created afgter a certain date.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63729,46816.39354</TimeChanged>
<TimeCreated>63729,46180</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_I_CASE_AUDIT_INTERFACE</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.CaseFileDtIndex</Default>
</Parameter>

<Property name="CaseNum">
<Description>
A reference to the Case</Description>
<Type>CaseMgmt.Header</Type>
<Parameter name="CAPTION" value="Case Number"/>
</Property>

<ForeignKey name="CaseNum">
<Properties>CaseNum</Properties>
<ReferencedClass>CaseMgmt.Header</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Dt">
<Description>
the date the case was filed</Description>
<Type>%Date</Type>
<InitialExpression>+$h</InitialExpression>
<SqlColumnNumber>2</SqlColumnNumber>
<SqlComputeCode> S {*}=+$H </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Date"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="Id">
<Description>
a reference to the patient that has the case</Description>
<Type>Registration.Patient</Type>
</Property>

<ForeignKey name="Id">
<Properties>Id</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Ini">
<Description>
a reference to the USERNAME that filed the record</Description>
<Type>SecurityPlus.Usr</Type>
<SqlComputeCode> S {*}=$P(SECID,"^",1) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Username"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<ForeignKey name="Ini">
<Properties>Ini</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Tm">
<Description>
the time the case was edited</Description>
<Type>%Time</Type>
<InitialExpression>$p($h,",",2)</InitialExpression>
<SqlColumnNumber>3</SqlColumnNumber>
<SqlComputeCode> S {*}=$P($H,",",2) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Time"/>
<Parameter name="FORMAT" value="4"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Dt,Tm</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.CaseFileDtIndex"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]AUDITC("INTF",$P(id,"||",1),$P(id,"||",2))) 
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 TSTART
 K ^[UCR]AUDITC("INTF")   ;Data Global
 TCOMMIT
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.CaseFileDtIndexS</StreamLocation>
<ExtentSize>1774</ExtentSize>
<Property name="CaseNum">
<Selectivity>0.1251%</Selectivity>
</Property>
<Property name="Dt">
<Selectivity>1.1410%</Selectivity>
</Property>
<Property name="Id">
<Selectivity>0.1251%</Selectivity>
</Property>
<Property name="Ini">
<Selectivity>2.3108%</Selectivity>
</Property>
<Property name="Tm">
<Selectivity>0.0564%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCR]AUDITC</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"INTF"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{Dt}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{Tm}</Expression>
</Subscript>
<Data name="CaseNum">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="Ini">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.CaseMgrReferralIndex">
<Description><![CDATA[
Using this table with <CLASS>Referrals.Referral</CLASS> will allow a user to view all case referrals
assigned to a case manager.]]></Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>63729,47413.271792</TimeChanged>
<TimeCreated>63729,46547</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_I_IX_CASE_REF</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.CaseMgrReferralIndex</Default>
</Parameter>

<Property name="CaseMgr">
<Description>
Case manager</Description>
<Type>Dict.CmCaseManager</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<ForeignKey name="CaseMgr">
<Properties>CaseMgr</Properties>
<ReferencedClass>Dict.CmCaseManager</ReferencedClass>
</ForeignKey>

<Property name="DtOrdered">
<Type>%Date</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
</Property>

<Property name="Hmo">
<Type>Dict.HmoProfile</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="Hmo">
<Properties>Hmo</Properties>
<ReferencedClass>Dict.HmoProfile</ReferencedClass>
</ForeignKey>

<Property name="Id">
<Type>Registration.Patient</Type>
<Required>1</Required>
<SqlColumnNumber>5</SqlColumnNumber>
</Property>

<ForeignKey name="Id">
<Properties>Id</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Rin">
<Description>
Internla referral number</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>6</SqlColumnNumber>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Hmo,CaseMgr,DtOrdered,Id,Rin</Properties>
<Unique>1</Unique>
</Index>

<ForeignKey name="Referral">
<Properties>Hmo,Id,Rin</Properties>
<ReferencedClass>Referrals.Referral</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.CaseMgrReferralIndex"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="ByHmoCaseMgr">
<Description>
Provided an Hmo Id and Case Manager Id get a list of referrals ordered by
DtOrdered.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%Integer,CaseMgr:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT   T1.DtOrdered, T2.RefNum, T1.Id->PatNm As Member, 
         T2.RefType->Name As ReferralType, T2.RefTarget, 
         T2.Status->Name As Status, T1.Id


FROM     CaseMgmt.CaseMgrReferralIndex T1
          JOIN Referrals.Referral T2 ON (T2.Hmo=T1.Hmo AND T2.Id=T1.Id AND
                                         T2.Rin=T1.Rin)

WHERE    T1.Hmo=:Hmo AND T1.CaseMgr=:CaseMgr

ORDER BY T1.DtOrdered, T1.Id, T1.Rin]]></SqlQuery>
<Parameter name="ROWSPEC" value="DtOrdered:%Date,RefNum:%Integer,Member:%String,ReferralType:%String,RefTarget:%String,Status:%String,Id:%Integer"/>
</Query>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 TSTART
 S HMO="" F  S HMO=$O(HMOTBL(HMO)) Q:HMO=""  D
 . K ^[$P(HMOTBL(HMO),"^",1)]HMOCMREF(HMO)   ;Data Global
 TCOMMIT
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.CaseMgrReferralIndexS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^[$P(HMOTBL({L1}),"^",1)]HMOCMREF({L1})</DataAccess>
<Expression>{CaseMgr}</Expression>
<NextCode/>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^[$P(HMOTBL({L1}),"^",1)]HMOCMREF({L1},{L2})</DataAccess>
<Expression>{DtOrdered}</Expression>
<NextCode/>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^[$P(HMOTBL({L1}),"^",1)]HMOCMREF({L1},{L2},{L3})</DataAccess>
<Expression>{Id}</Expression>
<NextCode/>
</Subscript>
<Subscript name="5">
<AccessType>sub</AccessType>
<DataAccess>^[$P(HMOTBL({L1}),"^",1)]HMOCMREF({L1},{L2},{L3},{L4})</DataAccess>
<Expression>{Rin}</Expression>
<NextCode/>
</Subscript>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.ChargeCorrect">
<Description>
Information about the charge corrections associated with Cases.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63729,46871.959812</TimeChanged>
<TimeCreated>63729,46105</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_CHARGE_CORR</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.ChargeCorrect</Default>
</Parameter>

<Property name="Patients">
<Type>CaseMgmt.ChargeCorrectPatient</Type>
<Cardinality>children</Cardinality>
<Inverse>ChargeCorrect</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Dt">
<Description>
The date of the charge correction.</Description>
<Type>%Date</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="Grp">
<Description>
A reference to the accounting group.</Description>
<Type>Dict.GroupProfile</Type>
</Property>

<ForeignKey name="Grp">
<Properties>Grp</Properties>
<ReferencedClass>Dict.GroupProfile</ReferencedClass>
</ForeignKey>

<Property name="Txn">
<Description>
A unique transaction number.</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Dt,Txn</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.ChargeCorrect"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCE]ARCASECC($P(id,"||",1),$P(id,"||",2))) 
]]></Implementation>
</Method>

<Query name="DistinctDt">
<Description>
Get a distinct list of dates on file.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec/>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT   DISTINCT DT
FROM     CaseMgmt.ChargeCorrect
ORDER BY Dt DESC</SqlQuery>
<Parameter name="ROWSPEC" value="Dt:%Date"/>
</Query>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 TSTART
 K ^[UCE]ARCASECC   ;Data Global
 ;Delete the children data
 D ##CLASS(CaseMgmt.ChargeCorrectPatient).%KillExtent()
 TCOMMIT
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.ChargeCorrectS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCE]ARCASECC</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Dt}</Expression>
</Subscript>
<Subscript name="2">
<Expression>{Txn}</Expression>
</Subscript>
<Data name="Grp">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.ChargeCorrectPatient">
<Description>
The patient information for each charge correction.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>63729,47213.351382</TimeChanged>
<TimeCreated>63729,46105</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_CHARGE_CORR_PAT</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.ChargeCorrectPatient</Default>
</Parameter>

<Property name="ChargeCorrect">
<Type>CaseMgmt.ChargeCorrect</Type>
<Cardinality>parent</Cardinality>
<Inverse>Patients</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Invs">
<Type>CaseMgmt.ChargeCorrectPatientInv</Type>
<Cardinality>children</Cardinality>
<Inverse>ChargeCorrectPatient</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="BtcNum">
<Description>
The batch number for the charge correction.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Batch Number"/>
</Property>

<Property name="Dob">
<Description>
The patient Date of Birth at the time of the correction.</Description>
<Type>%Date</Type>
</Property>

<Property name="Gid">
<Description>
A reference to the Guarantor Id.</Description>
<Type>Registration.Patient</Type>
</Property>

<ForeignKey name="Gid">
<Properties>Gid</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Id">
<Description>
A reference to the patient.</Description>
<Type>Registration.Patient</Type>
</Property>

<ForeignKey name="Id">
<Properties>Id</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Mrn">
<Description>
The patient MRN at the time of the correction. </Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PatNm">
<Description>
The patient name at the time of the correction.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="PAT Nm"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="60"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RptHeadLabel">
<Description>
 </Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Report Header Label"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="60"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Ssn">
<Description>
The patient SSN at the time of the correction.</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="PATTERN" value="1(3N1&quot;-&quot;2N1&quot;-&quot;4N)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties/>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.ChargeCorrectPatient"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCE]ARCASECC($P(id,"||",1),$P(id,"||",2),"PATIENT")) 
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM CaseMgmt.ChargeCorrectPatient)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.ChargeCorrectPatientS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCE]ARCASECC</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.ChargeCorrect.Dt}</Expression>
</Subscript>
<Subscript name="2">
<Expression>{CaseMgmt.ChargeCorrect.Txn}</Expression>
</Subscript>
<Subscript name="3">
<Expression>"PATIENT"</Expression>
</Subscript>
<Subscript name="4">
<Expression>0</Expression>
</Subscript>
<Data name="BtcNum">
<Delimiter>"^"</Delimiter>
<Piece>9</Piece>
</Data>
<Data name="Dob">
<Delimiter>"^"</Delimiter>
<Piece>7</Piece>
</Data>
<Data name="Gid">
<Delimiter>"^"</Delimiter>
<Piece>15</Piece>
</Data>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Mrn">
<Delimiter>"^"</Delimiter>
<Piece>6</Piece>
</Data>
<Data name="PatNm">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="RptHeadLabel">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="Ssn">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.ChargeCorrectPatientInv">
<Description>
The invoices affected during the charge correction.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>63729,47413.313792</TimeChanged>
<TimeCreated>63729,46105</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_CHARGE_CORR_PAT_INVOICE</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.ChargeCorrectPatientInv</Default>
</Parameter>

<Property name="ChargeCorrectPatient">
<Type>CaseMgmt.ChargeCorrectPatient</Type>
<Cardinality>parent</Cardinality>
<Inverse>Invs</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="InvNum">
<Description>
The original invoice number.</Description>
<Type>BAR.Invoice</Type>
<Parameter name="CAPTION" value="INV NUM"/>
</Property>

<ForeignKey name="InvNum">
<Properties>InvNum</Properties>
<ReferencedClass>BAR.Invoice</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="NewBal">
<Description>
The new balance.</Description>
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="New BAL"/>
</Property>

<Property name="NewInv">
<Description>
A reference to the new invoice.</Description>
<Type>BAR.Invoice</Type>
<Parameter name="CAPTION" value="New Invoice"/>
</Property>

<ForeignKey name="NewInv">
<Properties>NewInv</Properties>
<ReferencedClass>BAR.Invoice</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="PrevBal">
<Description>
The previous balance before write off.</Description>
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Prev BAL"/>
</Property>

<Property name="ReversalInv">
<Description>
A reference to the reveral invoice.</Description>
<Type>BAR.Invoice</Type>
<Parameter name="CAPTION" value="Reversal Invoice"/>
</Property>

<ForeignKey name="ReversalInv">
<Properties>ReversalInv</Properties>
<ReferencedClass>BAR.Invoice</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Txn">
<Description>
A transaction counter.</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="Txni"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Txn</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.ChargeCorrectPatientInv"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCE]ARCASECC($P(id,"||",1),$P(id,"||",2),"DONE",$P(id,"||",3))) 
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR,SECID,SECCAT,BARTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM CaseMgmt.ChargeCorrectPatientInv)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR,SECID,SECCAT,BARTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.ChargeCorreBEA5S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCE]ARCASECC</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.ChargeCorrect.Dt}</Expression>
</Subscript>
<Subscript name="2">
<Expression>{CaseMgmt.ChargeCorrect.Txn}</Expression>
</Subscript>
<Subscript name="3">
<Expression>"DONE"</Expression>
</Subscript>
<Subscript name="4">
<Expression>{Txn}</Expression>
</Subscript>
<Data name="InvNum">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="NewBal">
<Delimiter>"^"</Delimiter>
<Piece>13</Piece>
</Data>
<Data name="NewInv">
<Delimiter>"^"</Delimiter>
<Piece>11</Piece>
</Data>
<Data name="PrevBal">
<Delimiter>"^"</Delimiter>
<Piece>12</Piece>
</Data>
<Data name="ReversalInv">
<Delimiter>"^"</Delimiter>
<Piece>10</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.Claim">
<Description>
Claims linked to MCA cases.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>67349,52692.54912</TimeChanged>
<TimeCreated>63729,46106</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_LINKED_CLAIM</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.Claim</Default>
</Parameter>

<Property name="Header">
<Type>CaseMgmt.Header</Type>
<Cardinality>parent</Cardinality>
<Inverse>Claims</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="ClaimNum">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
<Parameter name="CAPTION" value="Claim Number"/>
</Property>

<Property name="DtLinked">
<Description>
the date on which the claim was linked to the case</Description>
<Type>%Date</Type>
<SqlComputeCode> s {*}=+$H </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Date linked"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="HmoNum">
<Type>Dict.HmoProfile</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="HMO Number"/>
</Property>

<ForeignKey name="HmoNum">
<Properties>HmoNum</Properties>
<ReferencedClass>Dict.HmoProfile</ReferencedClass>
</ForeignKey>

<Property name="Id">
<Type>Registration.Patient</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<ForeignKey name="Id">
<Properties>Id</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="TimeLinked">
<Description>
The time on which the claim was linked to the case</Description>
<Type>%Time</Type>
<SqlComputeCode> s {*}=$p($h,",",2) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Time linked"/>
<Parameter name="FORMAT" value="4"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>HmoNum,Id,ClaimNum</Properties>
<Unique>1</Unique>
</Index>

<ForeignKey name="Claim">
<Properties>HmoNum,Id,ClaimNum</Properties>
<ReferencedClass>MCA.Claim.Claim</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.Claim"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^["MHRREG"]PTCASE($P(id,"||",1),"CLAIM",$P(id,"||",2),$P(id,"||",3),$P(id,"||",4)))
]]></Implementation>
</Method>

<Query name="ByCase">
<Description>
Provided a Case number get the linked claims.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Case:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT    T1.Hmo->Mnemonic As HmoMnemonic,
          T1.Number,
          T1.Id->PatNm         As Member,
          T4.Num               As MemberNumber,
          T1.Vendor->Name      As Vendor,
          T1.DtRec             As ReceivedDt,
          T1.SerDt             As ServiceDt,
          T1.Status->Mnemonic  As Status,
          MCA_Claim.ClaimInvoice_List(T1.Hmo,T1.Id,T1.Number) As Invoices,
          T1.OrigClmNum,
          T1.RepClmNum,
          T1.BackoutClmForOrig,
          T1.OrigEnteredBy,
          T1.OrigEnteredBy->FullName as EnteredBy,
          T1.Ref As Referral,
          T1.MissRefType->Name  As MissingReferralType,
          T2.RefProv->Name As ReferredBy,
          T2.Status->Name  As ReferralStatus,
          COALESCE(T1.SumOfLineBill,T1.TotBill) As BilledAmount,
          T1.AppAmt        As ApprovedAmount,
          T1.RejAmt        As RejectedAmount,
          T1.AdjCopayAmt   As CopayAmount,
          T1.OthAmt        As OtherAmount,
          T1.WithAmt       As WithholdAmount,
          T1.DedAmt        As DeductibleAmount



FROM      CaseMgmt.Claim T0
          JOIN MCA_Claim.Claim T1 ON (T1.Hmo=T0.HmoNum AND T1.Id=T0.Id 
                                      AND T1.Number=T0.ClaimNum)
          LEFT JOIN Referrals.Referral T2 ON
          (T2.Hmo = T1.Hmo AND T2.Id = T1.Id AND T2.Rin = T1.Rin)
          LEFT JOIN MCA_Enrollment.Contract T3 ON
          (T3.Hmo = T1.Hmo AND T3.Cin = T1.Cin)
          LEFT JOIN MCA_Enrollment.ContractMember T4 ON
          (T4.Contract = T3.%Id AND T4.Id = T1.Id)
WHERE     T0.Header=:Case
          AND (DBMS.Tools_HmoPassSecurity(T0.HmoNum,USER)=1)]]></SqlQuery>
<Parameter name="ROWSPEC" value="HmoMnemonic:%String,Number:%Integer,Member:%String,MemberNumber:%String,Vendor:%String,ReceivedDt:%Date,ServiceDt:%Date,Status:%String,Invoices:%String,OrigClmNum:%Integer,RepClmNum:%Integer,BackoutClmForOrig:%Integer,OrigEnteredBy:%String,EnteredBy:%String,Referral:%Integer,MissingReferralType:%String,ReferredBy:%String,ReferralStatus:%String,BilledAmount:%String,ApprovedAmount:%Currency,RejectedAmount:%Currency,CopayAmount:%Currency,OtherAmount:%Currency,WithholdAmount:%Currency,DeductibleAmount:%Currency"/>
</Query>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR,HMOTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM CaseMgmt.Claim)
 Q $$$OK
]]></Implementation>
</Method>

<Method name="DeleteCaseCheck">
<Description>
Are there any claims with this CaseNum</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>CaseNum:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR,HMOTBL</PublicList>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 &SQL(SELECT ClaimNum FROM CaseMgmt.Claim WHERE Header->CaseNum=:CaseNum) 
 I SQLCODE=0 Q 0
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.ClaimS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^["MHRREG"]PTCASE</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.Header.CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="2">
<Expression>"CLAIM"</Expression>
</Subscript>
<Subscript name="3">
<Expression>{HmoNum}</Expression>
</Subscript>
<Subscript name="4">
<Expression>{Id}</Expression>
</Subscript>
<Subscript name="5">
<Expression>{ClaimNum}</Expression>
</Subscript>
<Data name="DtLinked">
<Delimiter>","</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="TimeLinked">
<Delimiter>","</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.CostSheet">
<Description>
Requested vs actual services cost-benefit analysis.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67349,57572.528129</TimeChanged>
<TimeCreated>63729,46106</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_COST_SHEET</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.CostSheet</Default>
</Parameter>

<Property name="Header">
<Type>CaseMgmt.Header</Type>
<Cardinality>parent</Cardinality>
<Inverse>CostSheets</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Descr">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="EntDt">
<Description>
The date entered</Description>
<Type>%Date</Type>
<SqlComputeCode> S {*}=+$H </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Date Entered"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="EntIni">
<Description>
a reference to the user that created the record</Description>
<Type>SecurityPlus.Usr</Type>
<SqlComputeCode> S {*}=$P(SECID,"^",1) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Initials"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<ForeignKey name="EntIni">
<Properties>EntIni</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="EntTime">
<Description>
the time of entry</Description>
<Type>%Time</Type>
<SqlComputeCode> S {*}=$P($H,",",2) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Time Entered"/>
<Parameter name="FORMAT" value="4"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="FromDt">
<Type>%Date</Type>
</Property>

<Property name="Frozen">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="SheetNum">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="ToDt">
<Type>%Date</Type>
</Property>

<Property name="UpdDt">
<Description>
</Description>
<Type>%Date</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {UpdDt}=##class(CaseMgmt.CostSheet).UpdDtDer($p({Header},"||",1),{SheetNum})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<ReadOnly>1</ReadOnly>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Update Date"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
//  ;BAR_B_CASE_COST_SHEET.UPD_DT}, SqlComputed ];

]]></Content>
</UDLText>

<Method name="UpdDtGet">
<Description>
 This method is used as interface when using Cache Objects for the derived code for the column UpdDt.</Description>
<Final>1</Final>
<Internal>1</Internal>
<ReturnType>%Date</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 I ..Header="" q ""  ;New instance of object
 N X S X=..UpdDtDer($P(..Header,"||",1),..SheetNum)
 Q X
]]></Implementation>
</Method>

<Method name="UpdDtDer">
<Description>
 This method is used as SQL Compute code for the derived code for the column UpdDt.
[Previously private]</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>CNUM,SHEETNUM</FormalSpec>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 
 N Return,XIDXNL,SQLD
 S Return=$ZP(^[UCR,SYR]PTCASE(CNUM,"COST",SHEETNUM,""))
 I Return<50000 S Return=""


 Quit $g(Return)
]]></Implementation>
</Method>

<Property name="UpdTime">
<Type>%Time</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {UpdTime}=##class(CaseMgmt.CostSheet).UpdTimeDer($p({Header},"||",1),{SheetNum})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<ReadOnly>1</ReadOnly>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Update Time"/>
<Parameter name="FORMAT" value="4"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
//  ;BAR_B_CASE_COST_SHEET.UPD_TIME}, SqlComputed ];

]]></Content>
</UDLText>

<Method name="UpdTimeGet">
<Description>
 This method is used as interface when using Cache Objects for the derived code for the column UpdTime.</Description>
<Final>1</Final>
<Internal>1</Internal>
<ReturnType>%Time</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 I ..Header="" q ""  ;New instance of object
 N X S X=..UpdTimeDer($P(..Header,"||",1),..SheetNum)
 Q X
]]></Implementation>
</Method>

<Method name="UpdTimeDer">
<Description>
 This method is used as SQL Compute code for the derived code for the column UpdTime.
[Previously private]</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>CNUM,SHEETNUM</FormalSpec>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 
 N Return,XIDXNL,SQLD
 S Return=$ZP(^[UCR,SYR]PTCASE(CNUM,"COST",SHEETNUM,""))
 I Return<50000 S Return=""
 E  S Return=$ZP(^[UCR,SYR]PTCASE(CNUM,"COST",SHEETNUM,Return,""))

 Quit $g(Return)
]]></Implementation>
</Method>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>SheetNum</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.CostSheet"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]PTCASE($P(id,"||",1),"COST",$P(id,"||",2),"0"))
]]></Implementation>
</Method>

<Query name="ByCase">
<Type>DBMS.SQLQuery</Type>
<FormalSpec>CaseNumber:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT     %Id As Rowid,SheetNum,Descr,EntDt,EntTime,EntIni,
           FromDt,Frozen,ToDt,UpdDt,UpdTime
FROM       CaseMgmt.CostSheet
WHERE      (Header=:CaseNumber)</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Rowid:%String,SheetNum:%Integer,Descr:%String,EntDt:%Date,EntTime:%Time,EntIni:%String,FromDt:%Date,Frozen:%String,ToDt:%Date,UpdDt:%Date,UpdTime:%Time"/>
</Query>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>CASECOST:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
 S ..Descr=$P($G(CASECOST(0,1)),"^",1)
 S ..EntDt=$P($G(CASECOST(0,0)),"^",4)
 D ..EntIniSetObjectId($P($G(CASECOST(0,0)),"^",6))
 S ..EntTime=$P($G(CASECOST(0,0)),"^",5)
 S ..FromDt=$P($G(CASECOST(0,0)),"^",1)
 S ..Frozen=$P($G(CASECOST(0,0)),"^",3)
 S ..SheetNum=$G(SHEETNUM)
 S ..ToDt=$P($G(CASECOST(0,0)),"^",2)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[CASECOST:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SHEETNUM</PublicList>
<Implementation><![CDATA[
 S SHEETNUM=..SheetNum
 S $P(CASECOST(0,1),"^",1)=..Descr
 S $P(CASECOST(0,0),"^",4)=..EntDt
 S $P(CASECOST(0,0),"^",6)=""
 I ..EntIni,##class(%Dictionary.CompiledMethod).%OpenId("SecurityPlus.Usr||SummaryValidate") S $P(CASECOST(0,0),"^",6)=..EntIni.SummaryValidate("EntIni",.Error)
 E   I ..EntIni S $P(CASECOST(0,0),"^",6)=..EntIni.%Id()
 S $P(CASECOST(0,0),"^",5)=..EntTime
 S $P(CASECOST(0,0),"^",1)=..FromDt
 S $P(CASECOST(0,0),"^",3)=..Frozen
 S $P(CASECOST(0,0),"^",2)=..ToDt
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..Descr["^") Q -1
 I (..Frozen["^") Q -1
 Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.CostSheet</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.CostSheetS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCR]PTCASE</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.Header.CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="2">
<Expression>"COST"</Expression>
</Subscript>
<Subscript name="3">
<Expression>{SheetNum}</Expression>
</Subscript>
<Subscript name="4">
<Expression>0</Expression>
</Subscript>
<Subscript name="5">
<Expression>0</Expression>
</Subscript>
<Data name="Descr">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>1</Piece>
</Data>
<Data name="EntDt">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="EntIni">
<Delimiter>"^"</Delimiter>
<Piece>6</Piece>
</Data>
<Data name="EntTime">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="FromDt">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Frozen">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="ToDt">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.CostSheetTx">
<Description>
Requested vs actual services cost-benefit analysis.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>63729,47213.384379</TimeChanged>
<TimeCreated>63729,46106</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_COST_SHEET_REPET</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.CostSheetTx</Default>
</Parameter>

<Property name="ActualCost">
<Description>
the calculated actual costs</Description>
<Type>DBMS.Currency</Type>
<Calculated>1</Calculated>
<SqlComputeCode><![CDATA[ S {*}="" I (({ActualUnits}'="")&&(({ActualUnitCost}'=""))) S {*}={ActualUnits}*{ActualUnitCost} ]]></SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="ActualServ">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ActualUnits">
<Type>%Integer</Type>
</Property>

<Property name="ActualUnitCost">
<Type>DBMS.Currency</Type>
</Property>

<Property name="CaseNum">
<Type>CaseMgmt.Header</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="CaseNum">
<Properties>CaseNum</Properties>
<ReferencedClass>CaseMgmt.Header</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Repet">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
<Parameter name="MINVAL" value="1"/>
</Property>

<Property name="RequestedCost">
<Description>
the calculated requested cost</Description>
<Type>DBMS.Currency</Type>
<Calculated>1</Calculated>
<SqlComputeCode><![CDATA[ S {*}="" I (({RequestedUnits}'="")&&(({RequestedUnitCost}'=""))) S {*}={RequestedUnits}*{RequestedUnitCost} ]]></SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="RequestedServ">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RequestedUnits">
<Type>%Integer</Type>
</Property>

<Property name="RequestedUnitCost">
<Type>DBMS.Currency</Type>
</Property>

<Property name="Savings">
<Description>
the difference between the requested cost and the actual costs</Description>
<Type>DBMS.Currency</Type>
<Calculated>1</Calculated>
<SqlComputeCode> s {*}={RequestedCost}-{ActualCost} </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="SheetNum">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>CaseNum,SheetNum,Repet</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.CostSheetTx"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]PTCASE($P(id,"||",1),"COST",$P(id,"||",2),$P(id,"||",3))) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>CASECOST:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET,UDDREPET,UDDREPET</PublicList>
<Implementation><![CDATA[
 S ..ActualServ=$P($G(CASECOST(UDDREPET,2)),"^",1)
 S ..ActualUnitCost=$P($G(CASECOST(UDDREPET,2)),"^",3)
 S ..ActualUnits=$P($G(CASECOST(UDDREPET,2)),"^",2)
 D ..CaseNumSetObjectId($G(CNUM))
 S ..Repet=$G(UDDREPET)
 S ..RequestedServ=$P($G(CASECOST(UDDREPET,1)),"^",1)
 S ..RequestedUnitCost=$P($G(CASECOST(UDDREPET,1)),"^",3)
 S ..RequestedUnits=$P($G(CASECOST(UDDREPET,1)),"^",2)
 S ..SheetNum=$G(SHEETNUM) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[CASECOST:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>CNUM,UDDREPET,SHEETNUM,UDDREPET</PublicList>
<Implementation><![CDATA[
 S CNUM=""
 I ..CaseNum,##class(%Dictionary.CompiledMethod).%OpenId("CaseMgmt.Header||SummaryValidate") S CNUM=..CaseNum.SummaryValidate("CaseNum",.Error)
 E   I ..CaseNum S CNUM=..CaseNum.%Id()
 S UDDREPET=..Repet
 S SHEETNUM=..SheetNum
 S $P(CASECOST(UDDREPET,2),"^",1)=..ActualServ
 S $P(CASECOST(UDDREPET,2),"^",3)=..ActualUnitCost
 S $P(CASECOST(UDDREPET,2),"^",2)=..ActualUnits
 S $P(CASECOST(UDDREPET,1),"^",1)=..RequestedServ
 S $P(CASECOST(UDDREPET,1),"^",3)=..RequestedUnitCost
 S $P(CASECOST(UDDREPET,1),"^",2)=..RequestedUnits 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..ActualServ["^") Q -1
 I (..RequestedServ["^") Q -1
 Q 1 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.CostSheetTx</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.CostSheetTxS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCR]PTCASE</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseNum}</Expression>
</Subscript>
<Subscript name="2">
<Expression>"COST"</Expression>
</Subscript>
<Subscript name="3">
<Expression>{SheetNum}</Expression>
</Subscript>
<Subscript name="4">
<Expression>{Repet}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="5">
<Expression>0</Expression>
</Subscript>
<Data name="ActualServ">
<Delimiter>"^"</Delimiter>
<Node>2</Node>
<Piece>1</Piece>
</Data>
<Data name="ActualUnitCost">
<Delimiter>"^"</Delimiter>
<Node>2</Node>
<Piece>3</Piece>
</Data>
<Data name="ActualUnits">
<Delimiter>"^"</Delimiter>
<Node>2</Node>
<Piece>2</Piece>
</Data>
<Data name="RequestedServ">
<Delimiter>"^"</Delimiter>
<Node>1</Node>
<Piece>1</Piece>
</Data>
<Data name="RequestedUnitCost">
<Delimiter>"^"</Delimiter>
<Node>1</Node>
<Piece>3</Piece>
</Data>
<Data name="RequestedUnits">
<Delimiter>"^"</Delimiter>
<Node>1</Node>
<Piece>2</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.EmployerComment">
<Description>
this table contains comments for an employer</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63729,47413.438792</TimeChanged>
<TimeCreated>63729,46115</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_EMP_MSGS</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.EmployerComment</Default>
</Parameter>

<Property name="Employer">
<Description>
This column contains a reference to the employer group</Description>
<Type>Dict.EmployerGroup</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="Empde"/>
</Property>

<ForeignKey name="Employer">
<Properties>Employer</Properties>
<ReferencedClass>Dict.EmployerGroup</ReferencedClass>
</ForeignKey>

<Property name="Note">
<Description>
The notes for an employer</Description>
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Employer</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.EmployerComment"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 Quit $D(^BEMPG($P(id,"||",1),"MSGS",1)) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>EMP:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 D ..EmployerSetObjectId($G(EMPDE))
 S (..Note,WP)="" S N="",CNT=0 F  S N=$O(EMP("MSGS",N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..Note=WP 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[EMP:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>EMPDE</PublicList>
<Implementation><![CDATA[
 S EMPDE=""
 I ..Employer S EMPDE=..Employer.SummaryValidate("Employer",.Error)
 S N="" F  S N=$O(EMP("MSGS",N)) Q:N=""  K EMP("MSGS",N)
 I $ZSTRIP(..Note,"*W")'="" F N=1:1:$L(..Note,$C(13,10)) S EMP("MSGS",N)=$P(..Note,$C(13,10),N) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Trigger name="WordProcessingInsert">
<Code>
 N EMPDE,N S EMPDE={Employer}
 I {Note}'="" F N=1:1:$L({Note},$C(13,10)) S ^BEMPG(EMPDE,"MSGS",1+1,N)=$P({Note},$C(13,10),N)</Code>
<Event>INSERT</Event>
<Order>-10</Order>
</Trigger>

<Trigger name="WordProcessingUpdate">
<Code>
 N EMPDE,N S EMPDE={Employer}
 I {Note*C} D
 .K ^BEMPG(EMPDE,"MSGS",1+1)  ;Init data for Note
 .I {Note}'="" F N=1:1:$L({Note},$C(13,10)) S ^BEMPG(EMPDE,"MSGS",1+1,N)=$P({Note},$C(13,10),N)</Code>
<Event>UPDATE</Event>
<Order>-10</Order>
</Trigger>

<Trigger name="WordProcessingDelete">
<Code>
 N EMPDE,N S EMPDE={Employer}
 K ^BEMPG(EMPDE,"MSGS",1+1)  ;Init data for Note</Code>
<Event>DELETE</Event>
<Order>-10</Order>
</Trigger>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.EmployerComment</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.EmployerCommentS</StreamLocation>
<ExtentSize>2</ExtentSize>
<Property name="Employer">
<Selectivity>1</Selectivity>
</Property>
<Property name="Note">
<Selectivity>50.0000%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^BEMPG</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Employer}</Expression>
</Subscript>
<Subscript name="2">
<Expression>"MSGS"</Expression>
</Subscript>
<Subscript name="3">
<Expression>1</Expression>
</Subscript>
<Data name="Note">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^BEMPG({L1},"MSGS",1,sub)) Q:sub=""  S data=data_$G(^BEMPG({L1},"MSGS",1,sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.EmployerWorkCompDt">
<Description>
</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>63729,46817.376527</TimeChanged>
<TimeCreated>63729,46115</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_EMP_DATED</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.EmployerWorkCompDt</Default>
</Parameter>

<Property name="ContFaxNum">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="EffDt">
<Type>%Date</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<Property name="Empde">
<Type>%Numeric</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="ExpirDt">
<Type>%Date</Type>
</Property>

<Property name="ContPerson2">
<Description>
 </Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ContTel2">
<Description>
 </Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ContTelNum">
<Description>
 </Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Insurer">
<Description>
 </Description>
<Type>Dict.CommInsComp</Type>
</Property>

<ForeignKey name="Insurer">
<Properties>Insurer</Properties>
<ReferencedClass>Dict.CommInsComp</ReferencedClass>
</ForeignKey>

<Property name="PolicyContPerson">
<Description>
 </Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PolicyEffDt">
<Description>
 </Description>
<Type>%Date</Type>
</Property>

<Property name="PolicyNum">
<Description>
 </Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Empde,EffDt</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.EmployerWorkCompDt"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 Quit $D(^BEMPG($P(id,"||",1),"DATED",$P(id,"||",2))) 
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM CaseMgmt.EmployerWorkCompDt) 
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>EMP:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET,UDDREPET</PublicList>
<Implementation><![CDATA[
 S ..ContFaxNum=$P($G(EMP("DATED",UDDREPET,0)),"^",9)
 S ..ContPerson2=$P($G(EMP("DATED",UDDREPET,0)),"^",7)
 S ..ContTel2=$P($G(EMP("DATED",UDDREPET,0)),"^",8)
 S ..ContTelNum=$P($G(EMP("DATED",UDDREPET,0)),"^",6)
 S ..EffDt=$G(EFFDT)
 S ..Empde=$G(EMPDE)
 S ..ExpirDt=$P($G(EMP("DATED",UDDREPET,0)),"^",4)
 D ..InsurerSetObjectId($P($G(EMP("DATED",UDDREPET,0)),"^",1))
 S ..PolicyContPerson=$P($G(EMP("DATED",UDDREPET,0)),"^",5)
 S ..PolicyEffDt=$P($G(EMP("DATED",UDDREPET,0)),"^",3)
 S ..PolicyNum=$P($G(EMP("DATED",UDDREPET,0)),"^",2) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[EMP:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>EFFDT,EMPDE,UDDREPET</PublicList>
<Implementation><![CDATA[
 S EFFDT=..EffDt
 S EMPDE=..Empde
 S $P(EMP("DATED",UDDREPET,0),"^",9)=..ContFaxNum
 S $P(EMP("DATED",UDDREPET,0),"^",7)=..ContPerson2
 S $P(EMP("DATED",UDDREPET,0),"^",8)=..ContTel2
 S $P(EMP("DATED",UDDREPET,0),"^",6)=..ContTelNum
 S $P(EMP("DATED",UDDREPET,0),"^",4)=..ExpirDt
 S $P(EMP("DATED",UDDREPET,0),"^",1)=""
 I ..Insurer S $P(EMP("DATED",UDDREPET,0),"^",1)=..Insurer.SummaryValidate("Insurer",.Error)
 S $P(EMP("DATED",UDDREPET,0),"^",5)=..PolicyContPerson
 S $P(EMP("DATED",UDDREPET,0),"^",3)=..PolicyEffDt
 S $P(EMP("DATED",UDDREPET,0),"^",2)=..PolicyNum 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..ContFaxNum["^") Q -1
 I (..ContPerson2["^") Q -1
 I (..ContTel2["^") Q -1
 I (..ContTelNum["^") Q -1
 I (..PolicyContPerson["^") Q -1
 I (..PolicyNum["^") Q -1
 Q 1 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.EmployerWorkCompDt</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.EmployerWorkCompDtS</StreamLocation>
<ExtentSize>1</ExtentSize>
<Property name="ContFaxNum">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="ContPerson2">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="ContTel2">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="ContTelNum">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="EffDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Empde">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="ExpirDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Insurer">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="PolicyContPerson">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="PolicyEffDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="PolicyNum">
<Selectivity>100.0000%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^BEMPG</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Empde}</Expression>
</Subscript>
<Subscript name="2">
<Expression>"DATED"</Expression>
</Subscript>
<Subscript name="3">
<Expression>{EffDt}</Expression>
</Subscript>
<Subscript name="4">
<Expression>0</Expression>
</Subscript>
<Data name="ContFaxNum">
<Delimiter>"^"</Delimiter>
<Piece>9</Piece>
</Data>
<Data name="ContPerson2">
<Delimiter>"^"</Delimiter>
<Piece>7</Piece>
</Data>
<Data name="ContTel2">
<Delimiter>"^"</Delimiter>
<Piece>8</Piece>
</Data>
<Data name="ContTelNum">
<Delimiter>"^"</Delimiter>
<Piece>6</Piece>
</Data>
<Data name="ExpirDt">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="Insurer">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="PolicyContPerson">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="PolicyEffDt">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="PolicyNum">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.FirstDtOfServiceIndex">
<Description>
When the case is linked to a VM Visit this is an index by service date.  If you
are not using Visit Management this table should be empty.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>63729,47213.388379</TimeChanged>
<TimeCreated>63729,46180</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_I_IX_CASE_BY_SERDT</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.FirstDtOfServiceIndex</Default>
</Parameter>

<Property name="CaseNum">
<Description>
A Reference to the Case.</Description>
<Type>CaseMgmt.Header</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<ForeignKey name="CaseNum">
<Properties>CaseNum</Properties>
<ReferencedClass>CaseMgmt.Header</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="FirstDtOfServ">
<Description>
The first date of service allowed for this case</Description>
<Type>%Date</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>FirstDtOfServ,CaseNum</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.FirstDtOfServiceIndex"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]PTCASEX("VMSVCDT",$P(id,"||",1),$P(id,"||",2))) 
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 K ^[UCR]PTCASEX("VMSVDT")   ;Data Global
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.FirstDtOfSe29A3S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCR]PTCASEX</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"VMSVCDT"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{FirstDtOfServ}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.Header">
<Description>
Query this table for case level information including case number and type.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67352,64494.886728</TimeChanged>
<TimeCreated>63729,46104</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.Header</Default>
</Parameter>

<Property name="TimeSpents">
<Type>CaseMgmt.TimeSpent</Type>
<Cardinality>children</Cardinality>
<Inverse>Header</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Insurances">
<Type>CaseMgmt.Insurance</Type>
<Cardinality>children</Cardinality>
<Inverse>Header</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="PhoneLists">
<Type>CaseMgmt.PhoneList</Type>
<Cardinality>children</Cardinality>
<Inverse>Header</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Packages">
<Type>CaseMgmt.Package</Type>
<Cardinality>children</Cardinality>
<Inverse>Header</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Reviews">
<Type>CaseMgmt.Review</Type>
<Cardinality>children</Cardinality>
<Inverse>Header</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="CostSheets">
<Type>CaseMgmt.CostSheet</Type>
<Cardinality>children</Cardinality>
<Inverse>Header</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Statuss">
<Type>CaseMgmt.Status</Type>
<Cardinality>children</Cardinality>
<Inverse>Header</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Claims">
<Type>CaseMgmt.Claim</Type>
<Cardinality>children</Cardinality>
<Inverse>Header</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Invoices">
<Type>CaseMgmt.Invoice</Type>
<Cardinality>children</Cardinality>
<Inverse>Header</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Referrals">
<Type>CaseMgmt.Referral</Type>
<Cardinality>children</Cardinality>
<Inverse>Header</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="SecureNotes">
<Type>CaseMgmt.SecureNote</Type>
<Cardinality>children</Cardinality>
<Inverse>Header</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="AccidentCntry">
<Description>
accident country</Description>
<Type>Dict.Country</Type>
<Parameter name="CAPTION" value="Accident Country"/>
</Property>

<ForeignKey name="AccidentCntry">
<Properties>AccidentCntry</Properties>
<ReferencedClass>Dict.Country</ReferencedClass>
</ForeignKey>

<Property name="AccidentSt">
<Description>
accident state</Description>
<Type>Dict.StateProvince</Type>
<Parameter name="CAPTION" value="Accident State"/>
</Property>

<ForeignKey name="AccidentSt">
<Properties>AccidentSt</Properties>
<ReferencedClass>Dict.StateProvince</ReferencedClass>
</ForeignKey>

<Property name="AccidentTime">
<Description>
time of accident</Description>
<Type>%Time</Type>
<Parameter name="CAPTION" value="Accident Time"/>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="ActivateForAutolink">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="AltNum">
<Description>
This column contains the alternate case number.  Unlike the Case number field 
this number is not system generated and is an additional way to loolup a case 
number.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Alternate Number"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ArchivedAtTime">
<Description>
If the invoices belonging to this case have been archived, this is the time
they were archived.</Description>
<Type>%Time</Type>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="ArchivedOnDt">
<Description>
If the invoices belonging to this case have been archived, this is the date
they were archived.</Description>
<Type>%Date</Type>
<Parameter name="MAXVAL" value="+$H"/>
</Property>

<Property name="ArchivePurgeFlag">
<Description>
Equals 1 if all invoices belonging to this case have been archived.
Equals 2 if all invoices belonging to this case have been purged.  </Description>
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Archived/Purged/"/>
<Parameter name="VALUELIST" value="/1/2/"/>
</Property>

<Property name="AuthorizedBy">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="AuthorizedDays">
<Description>
Authorized days for MCA cases.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Auth Days"/>
</Property>

<Property name="AuthorizedDollars">
<Description>
Authorized dollars for MCA cases.</Description>
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Auth Dollars"/>
</Property>

<Property name="AuthorizedEncounters">
<Description>
Authorized encounters for MCA cases.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Auth Encounters"/>
</Property>

<Property name="AuthorizedTreatments">
<Description>
Authorized treatments for MCA cases.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Auth Treatments"/>
</Property>

<Property name="AuthorizedUnits">
<Description>
Authorized units for MCA cases.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Auth Units"/>
</Property>

<Property name="AuthDt">
<Type>%Date</Type>
</Property>

<Property name="AuthNum">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="AuthTelNum">
<Type>DBMS.Telephone</Type>
</Property>

<Property name="BillingEmp">
<Type>Dict.EmployerGroup</Type>
<Parameter name="CAPTION" value="Billing Employer"/>
</Property>

<ForeignKey name="BillingEmp">
<Properties>BillingEmp</Properties>
<ReferencedClass>Dict.EmployerGroup</ReferencedClass>
</ForeignKey>

<Property name="BillingIns">
<Type>Dict.CommInsComp</Type>
<Parameter name="CAPTION" value="Billing Insurer"/>
</Property>

<ForeignKey name="BillingIns">
<Properties>BillingIns</Properties>
<ReferencedClass>Dict.CommInsComp</ReferencedClass>
</ForeignKey>

<Property name="GID">
<Description>
This column represents the guarantor for this case.  Any financial activity
for this case will be billed to this person/employer group and not
the patient the service was performed on.</Description>
<Type>Registration.Patient</Type>
<Required>1</Required>
</Property>

<ForeignKey name="GID">
<Properties>GID</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Manager">
<Description>
This column displays the case manager assigned to the case.  This column is
linked to the default index BAR_I_IX_CASE_BY_MGR.  Use of this column in a
Report Writer Query Where clause will invoke this index.</Description>
<Type>Dict.CmCaseManager</Type>
</Property>

<ForeignKey name="Manager">
<Properties>Manager</Properties>
<ReferencedClass>Dict.CmCaseManager</ReferencedClass>
</ForeignKey>

<Property name="CaseNum">
<Description>
This column contains the case number.</Description>
<Type>%Integer</Type>
<InitialExpression>$$GETNEWCS^BCASEF()</InitialExpression>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="Number"/>
</Property>

<Property name="McaSource">
<Description>
This column reprensents the MCA Case Source.</Description>
<Type>Dict.CmCaseSource</Type>
<Parameter name="CAPTION" value="MCA Source"/>
</Property>

<ForeignKey name="McaSource">
<Properties>McaSource</Properties>
<ReferencedClass>Dict.CmCaseSource</ReferencedClass>
</ForeignKey>

<Property name="Cat">
<Description><![CDATA[
This column contains the Managed Care Case Category.
<P>]]></Description>
<Type>Dict.CmCaseCategory</Type>
<Parameter name="CAPTION" value="Category"/>
</Property>

<ForeignKey name="Cat">
<Properties>Cat</Properties>
<ReferencedClass>Dict.CmCaseCategory</ReferencedClass>
</ForeignKey>

<Property name="CauseOfInj">
<Description>
cause of injury</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Cause Of Injury"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/AUTO/ANOTHER PARTY RESP/EMPLOYMENT/OTHER/"/>
</Property>

<Property name="ClosedOnDt">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Closed"/>
</Property>

<Property name="Comments">
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="CreatedAtTime">
<Description>
This is the time the case was created</Description>
<Type>%Time</Type>
<InitialExpression>$P($H,",",2)</InitialExpression>
<Required>1</Required>
<SqlComputeCode> S {*}=$P($H,",",2) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="FORMAT" value="4"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="CreatedBy">
<Description>
This column contains the USERNAME of the person that created the case.</Description>
<Type>SecurityPlus.Usr</Type>
<SqlComputeCode> S {*}=$P(SECID,"^",1) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<ForeignKey name="CreatedBy">
<Properties>CreatedBy</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="CreatedOnDt">
<Description>
The date the case was created/filed</Description>
<Type>%Date</Type>
<InitialExpression>+$h</InitialExpression>
<Required>1</Required>
<SqlComputeCode> S {*}=+$H </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="Descr">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DtAssumedOrRelinquishedCare">
<Description>
date provider assumed or relinquished postoperative care</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Date Assumed Or Relinquished Care"/>
</Property>

<Property name="DtLastMenstrualPd">
<Description>
date of last menstrual period</Description>
<Type>DBMS.AccountingPeriod</Type>
<Parameter name="CAPTION" value="Date Last Menstrual Period"/>
</Property>

<Property name="DtOnsetOfIllness">
<Description>
date of onset of current illness/symptoms</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Date Onset Of Illness"/>
</Property>

<Property name="DtOnsetOfSimilarIllness">
<Description>
date of onset of similar illness/symptoms</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Date Onset Of Similar Illness"/>
</Property>

<Property name="EmpDept">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FinalDtOfServ">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Final Date of Service"/>
</Property>

<Property name="FirstDtOfServ">
<Type>%Date</Type>
<Parameter name="CAPTION" value="First Date of Service"/>
</Property>

<Property name="GuarNameIfNotPatient">
<Description>
This is for use on the MCA case management screen only.</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HmoNum">
<Description>
a reference to the HMO when the case has been created in MCA</Description>
<Type>Dict.HmoProfile</Type>
<Parameter name="CAPTION" value="HMO Number"/>
</Property>

<ForeignKey name="HmoNum">
<Properties>HmoNum</Properties>
<ReferencedClass>Dict.HmoProfile</ReferencedClass>
</ForeignKey>

<Property name="InitialRin">
<Type>%Integer</Type>
</Property>

<Property name="LastEditedAtTime">
<Description>
the time on which the case was last edited</Description>
<Type>%Time</Type>
<SqlComputeCode> S {*}=$P($H,",",2) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT,%%UPDATE</SqlComputeOnChange>
<Parameter name="FORMAT" value="4"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="LastEditedBy">
<Description>
This column contains the USERNAME of the person that last edited the case.</Description>
<Type>SecurityPlus.Usr</Type>
<SqlComputeCode> S {*}=$P(SECID,"^",1) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT,%%UPDATE</SqlComputeOnChange>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<ForeignKey name="LastEditedBy">
<Properties>LastEditedBy</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="LastEditedOnDt">
<Description>
the date on which the case was last edited</Description>
<Type>%Date</Type>
<SqlComputeCode> S {*}=+$H </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT,%%UPDATE</SqlComputeOnChange>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="LastRevDt">
<Type>%Date</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {LastRevDt}=##class(CaseMgmt.Header).LastRevDtDer({CaseNum})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
//  ;BAR_B_CASE.LAST_REV_DT}, SqlComputed ];

]]></Content>
</UDLText>

<Method name="LastRevDtGet">
<Description>
 This method is used as interface when using Cache Objects for the derived code for the column LastRevDt.</Description>
<Final>1</Final>
<Internal>1</Internal>
<ReturnType>%Date</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 I ..CaseNum="" Q ""   ;New instance of object
 N X S X=..LastRevDtDer(..CaseNum)
 Q X
]]></Implementation>
</Method>

<Method name="LastRevDtDer">
<Description>
 This method is used as SQL Compute code for the derived code for the column LastRevDt.
[Previously private]</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>CNUM</FormalSpec>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 
 N Return,XIDXNL,SQLD
 S Return=$S($G(CNUM):$$GETLREV^HMOCMSEL,1:"")

 Quit $g(Return)
]]></Implementation>
</Method>

<Property name="McaContAgency471">
<Type>Dict.Vendor</Type>
<Parameter name="CAPTION" value="Contact Agency"/>
</Property>

<ForeignKey name="McaContAgency471">
<Properties>McaContAgency471</Properties>
<ReferencedClass>Dict.Vendor</ReferencedClass>
</ForeignKey>

<Property name="McaContAgencyTxt">
<Type>%String</Type>
<Parameter name="CAPTION" value="Contact Agency"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="McaContAgencyTxtAddr1">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="McaContAgencyTxtAddr2">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="McaContAgencyTxtCtystzp">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="McaContAgencyTxtTel">
<Type>DBMS.Telephone</Type>
<Parameter name="CAPTION" value="MCA Contact Agency Telephone"/>
</Property>

<Property name="McaContNm">
<Type>%String</Type>
<Parameter name="CAPTION" value="Contact Name"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="McaContPosition">
<Type>%String</Type>
<Parameter name="CAPTION" value="Contact Position"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="McaContServ">
<Type>%String</Type>
<Parameter name="CAPTION" value="Contact Service"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="McaStatus">
<Description>
This column contains the Managed Care Case Status.</Description>
<Type>Dict.CmCaseStatus</Type>
<Parameter name="CAPTION" value="Status"/>
</Property>

<ForeignKey name="McaStatus">
<Properties>McaStatus</Properties>
<ReferencedClass>Dict.CmCaseStatus</ReferencedClass>
</ForeignKey>

<Property name="McaTypeOfCase">
<Description>
This column contains the Managed Care Type of Case.</Description>
<Type>Dict.CmCaseType</Type>
<Parameter name="CAPTION" value="Type"/>
</Property>

<ForeignKey name="McaTypeOfCase">
<Properties>McaTypeOfCase</Properties>
<ReferencedClass>Dict.CmCaseType</ReferencedClass>
</ForeignKey>

<Property name="MostRecentlyPrintedDt">
<Type>%Date</Type>
</Property>

<Property name="MostRecentlyPrintedReport">
<Type>%String</Type>
<Parameter name="CAPTION" value="Most Recently Printed Report"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/INITIAL/SUPPLEMENTARY/FINAL/"/>
</Property>

<Property name="NextRevDt">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Next Review"/>
</Property>

<Property name="Num">
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Case"/>
</Property>

<Property name="PrmryPat">
<Description>
This is a reference to the patient that the case is linked to</Description>
<Type>Registration.Patient</Type>
<Required>1</Required>
</Property>

<Property name="PurgedAtTime">
<Description>
If the invoices in this case have been purged, this is the time they were
purged.</Description>
<Type>%Time</Type>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="PurgedOnDt">
<Description>
If the invoices belonging to this case have been purged, this is the date they
were purged.</Description>
<Type>%Date</Type>
<Parameter name="MAXVAL" value="+$H"/>
</Property>

<Property name="ReferredBy">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RevInterval">
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Review Interval"/>
</Property>

<Property name="ServDtMatch">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="Status">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Case Status"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/OPEN/CLOSED/"/>
</Property>

<Property name="Type">
<Description>
This column represent the type of case.</Description>
<Type>Dict.CaseType</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Case Type"/>
</Property>

<ForeignKey name="Type">
<Properties>Type</Properties>
<ReferencedClass>Dict.CaseType</ReferencedClass>
</ForeignKey>

<Property name="UsedDays">
<Description>
Used days for MCA cases.</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> S {*}=$$USED^HMOCMCSC(3,{CaseNum}) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Used Days"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="UsedDollars">
<Description>
Used dollars for MCA cases.</Description>
<Type>DBMS.Currency</Type>
<Calculated>1</Calculated>
<SqlComputeCode> s {*}=$$USED^HMOCMCSC(1,{CaseNum}) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Used Dollars"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="UsedEncounters">
<Description>
Used encounters for MCA cases.</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> s {*}=$$USED^HMOCMCSC(5,{CaseNum}) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Used Encounters"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="UsedTreatments">
<Description>
Used treatments for MCA cases.</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> s {*}=$$USED^HMOCMCSC(4,{CaseNum}) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Used Treatments"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="UsedUnits">
<Description>
Used units for MCA cases.</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> s {*}=$$USED^HMOCMCSC(2,{CaseNum}) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Used Units"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="UAutoClaimNum">
<Description>
the Auto Accidente claim number</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="UInsuredsAddr">
<Description>
The insureds patient street address line 1.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Patient Street Address Line 1"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CtySt">
<Description>
The patient's city,state.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Patient City,State"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="UInsuredsDob">
<Description>
The insureds patient date of birth.                             </Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Birth Dt"/>
<Parameter name="MAXVAL" value="+$H"/>
</Property>

<Property name="UInsuredsNm">
<Description>
The insured's patient name in the format LAST,FIRST MIDDLE.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Patient Name"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="PATTERN" value="1(1U.UNP1&quot;,&quot;1U.UNP,1U1&quot;&apos;&quot;1U.UNP1&quot;,&quot;1U.UNP,1&quot;*&quot;1U.E)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="UInsuredsPolicyNum">
<Description>
custom column for case management</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="U Insureds Policy NUM"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="UInsuredsSex">
<Description>
The insured's patient sex (M or F or I).</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Sex"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/M/F/I/"/>
</Property>

<Property name="UInsuredsZip">
<Description><![CDATA[
The patient's zip code.   This field will check the users input, the zip code
must be in the format of 5 numbers, 5 number a dash and 4 numbers, or an 
asterisk and any character following.
<P>
<P>]]></Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Zip"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="WcDtOfInj">
<Type>%Date</Type>
<Parameter name="CAPTION" value="W/C Date of Injury"/>
</Property>

<Property name="WcEmp">
<Type>Dict.EmployerGroup</Type>
<Parameter name="CAPTION" value="W/C Employer (Dictionary Entry)"/>
</Property>

<ForeignKey name="WcEmp">
<Properties>WcEmp</Properties>
<ReferencedClass>Dict.EmployerGroup</ReferencedClass>
</ForeignKey>

<Property name="WcEmployerFtxt">
<Type>%String</Type>
<Parameter name="CAPTION" value="W/C Employer (Free Text)"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="WcPolicyEffDt">
<Description>
 </Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Workers Comp. Policy Effective Dt"/>
</Property>

<Property name="WcPolicyNum">
<Description>
the Worker's Compensation policy number</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Workers Comp. Policy Number"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="WorkersCompCarrierClmNum">
<Description>
Worker's compensation carrier claim number.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="W/C Carrier Claim #"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>CaseNum</Properties>
<Unique>1</Unique>
</Index>

<Index name="ZAltNum">
<Type>index</Type>
<Properties>AltNum,CaseNum</Properties>
</Index>

<Index name="ZGID">
<Type>index</Type>
<Properties>GID,CaseNum</Properties>
</Index>

<Index name="ZManager">
<Type>index</Type>
<Properties>Manager,CaseNum</Properties>
</Index>

<Index name="ZCat">
<Type>index</Type>
<Properties>Cat,CaseNum</Properties>
</Index>

<Index name="ZCreatedOnDt">
<Type>index</Type>
<Properties>CreatedOnDt,CaseNum</Properties>
</Index>

<Index name="ZHmoNum">
<Type>index</Type>
<Properties>HmoNum,CaseNum</Properties>
</Index>

<Index name="ZMcaStatus">
<Type>index</Type>
<Properties>McaStatus,CaseNum</Properties>
</Index>

<Index name="ZMcaTypeOfCase">
<Type>index</Type>
<Properties>McaTypeOfCase,CaseNum</Properties>
</Index>

<Index name="ZPrmryPat">
<Type>index</Type>
<Properties>PrmryPat,CaseNum</Properties>
</Index>

<Index name="ZWorkersCompCarrierClmNum">
<Type>index</Type>
<Properties>WorkersCompCarrierClmNum,CaseNum</Properties>
</Index>

<Index name="HmoMgrStatus">
<Type>index</Type>
<Properties>HmoNum,Manager,McaStatus</Properties>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
</Trigger>

<Trigger name="PostInterfaceTxn">
<Code><![CDATA[
 /*
 &SQL(INSERT %NOLOCK %NOCHECK INTO CaseMgmt.CaseFileDtIndex
      () 
      VALUES ()
     )
 */
 Q]]></Code>
<Event>INSERT/UPDATE</Event>
<Time>AFTER</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.Header"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s UCR="MHRREG",SYR=""
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^["MHRREGORIG"]PTCASE($P(id,"||",1),"CASE"))
]]></Implementation>
</Method>

<Query name="ByPatient">
<Description>
Provided a Patient AND User, return the Case Numbers in descending order
</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Patient:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT  CaseNum, Status, Type->Name As Type, 
        Type->BillingClassification As Class, FirstDtOfServ, FinalDtOfServ,
        WcDtOfInj, LastEditedOnDt, LastEditedBy,Descr,AltNum,
        %EXTERNAL(ArchivePurgeFlag) As ArchivePurgeFlag

FROM    CaseMgmt.Header 

WHERE   PrmryPat = :Patient

ORDER BY CaseNum DESC]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="CaseNum:%Integer,Status:%String,Type:%String,Class:%String,FirstDtOfServ:%Date,FinalDtOfServ:%Date,WcDtOfInj:%Date,LastEditedOnDt:%Date,LastEditedBy:%String,Descr:%String,AltNum:%String,ArchivePurgeFlag:%String"/>
</Query>

<Query name="ByPatientHmo">
<Description>
Get a list of Cases by Patient and HMO</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>PatientId:%Integer,Hmo:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT   CaseNum,  Manager->Name as Manager,  McaTypeOfCase->Name as Type, 
         McaStatus->Name as Status,
         LastEditedOnDt, LastEditedBy,Descr,AltNum
FROM     CaseMgmt.Header
WHERE    PrmryPat = :PatientId and HMONum = :Hmo
ORDER BY CaseNum]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="CaseNum:%Integer,Manager:%String,Type:%String,Status:%String,LastEditedOnDt:%Date,LastEditedBy:%String,Descr:%String,AltNum:%String"/>
</Query>

<Query name="ByAltNum">
<Description>
Provied AltNum return the Patient Ids</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>AltNum:%String,Grp:%Integer,DeactFilter:%Boolean="1",YearOfBirth:%Integer,Sex:%String,ApproximateAge:%Integer,Org:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT PrmryPat As Id,
       PrmryPat->PatNm,PrmryPat->Mrn,PrmryPat->DeactDt,PrmryPat->Sex,
       PrmryPat->Dob, PrmryPat->GuarNmIfNotPat, 
       DBMS.Tools_Age(PrmryPat->Dob,CURRENT_DATE) As Age, 
       DBMS.Tools_MaskField(PrmryPat->Ssn,4) As Ssn,
       PrmryPat->StreetAddrL1,PrmryPat->StreetAddrL2,PrmryPat->CtySt,
       PrmryPat->Zip, Registration.PatientAka_List(PrmryPat) As Akas,
       PrmryPat->PtLicenseNum, PrmryPat->Tel, PrmryPat->EmpTel, 
       PrmryPat->CellTel, PrmryPat->Deceased,                    
       PrmryPat->DeactReason,
       Registration.PatientOtherNumber_List(PrmryPat) As OtherNumbers,
       Registration.PatientEmrn_GetMRN(PrmryPat,:Org,1) As EMrn,
       PrmryPat->EmailAddress,
       PrmryPat->VipCode->Name As VipCode

FROM   CaseMgmt.Header
WHERE  (AltNum = :AltNum AND
       Registration.GroupActivity_PatientRestricted(PrmryPat,:Grp)=0)
       AND (:DeactFilter = 0 or (:DeactFilter=1 and PrmryPat->DeactDt IS NULL))
       AND
       (:YearOfBirth IS NULL OR YEAR(PrmryPat->Dob) = :YearOfBirth) AND
       (:Sex IS NULL OR PrmryPat->Sex=UCASE(:Sex)) AND
       (:ApproximateAge IS NULL 
          OR DATEDIFF('YY',PrmryPat->Dob,CURRENT_DATE) 
              BETWEEN :ApproximateAge-5 AND :ApproximateAge+5)]]></SqlQuery>
<Parameter name="ROWSPEC" value="Id:%Integer,PatNm:%String,Mrn:%String,DeactDt:%Date,Sex:%String,Dob:%Date,GuarNmIfNotPat:%String,Age:%String,Ssn:%String,StreetAddrL1:%String,StreetAddrL2:%String,CtySt:%String,Zip:%String,Akas:%String,PtLicenseNum:%String,Tel:%String,EmpTel:%String,CellTel:%String,Deceased:%String,DeactReason:%String,OtherNumbers:%String,EMrn:%String,EmailAddress:%String,VipCode:%String"/>
</Query>

<Query name="ByCaseNum">
<Description>
Provided a CaseNum return the Ids that match</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>CaseNum:%Integer,Grp:%Integer,DeactFilter:%Boolean="1",YearOfBirth:%Integer,Sex:%String,ApproximateAge:%Integer,Org:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT PrmryPat As Id,
       PrmryPat->PatNm,PrmryPat->Mrn,PrmryPat->DeactDt,PrmryPat->Sex,
       PrmryPat->Dob, PrmryPat->GuarNmIfNotPat,
       DBMS.Tools_Age(PrmryPat->Dob,CURRENT_DATE) As Age,
       DBMS.Tools_MaskField(PrmryPat->Ssn,4) As Ssn,
       PrmryPat->StreetAddrL1,PrmryPat->StreetAddrL2,PrmryPat->CtySt,
       PrmryPat->Zip, Registration.PatientAka_List(PrmryPat) As Akas,
       PrmryPat->PtLicenseNum, PrmryPat->Tel, PrmryPat->EmpTel,
       PrmryPat->CellTel, PrmryPat->Deceased,                     
       PrmryPat->DeactReason,
       Registration.PatientOtherNumber_List(PrmryPat) As OtherNumbers,
       Registration.PatientEmrn_GetMRN(PrmryPat,:Org,1) As EMrn,
       PrmryPat->EmailAddress,
       PrmryPat->VipCode->Name As VipCode

FROM   CaseMgmt.Header
WHERE  (CaseNum = :CaseNum AND
       Registration.GroupActivity_PatientRestricted(PrmryPat,:Grp)=0)
       AND (:DeactFilter = 0 or (:DeactFilter=1 and PrmryPat->DeactDt IS NULL))
       AND
       (:YearOfBirth IS NULL OR YEAR(PrmryPat->Dob) = :YearOfBirth) AND
       (:Sex IS NULL OR PrmryPat->Sex=UCASE(:Sex)) AND
       (:ApproximateAge IS NULL
          OR DATEDIFF('YY',PrmryPat->Dob,CURRENT_DATE)
              BETWEEN :ApproximateAge-5 AND :ApproximateAge+5)]]></SqlQuery>
<Parameter name="ROWSPEC" value="Id:%Integer,PatNm:%String,Mrn:%String,DeactDt:%Date,Sex:%String,Dob:%Date,GuarNmIfNotPat:%String,Age:%String,Ssn:%String,StreetAddrL1:%String,StreetAddrL2:%String,CtySt:%String,Zip:%String,Akas:%String,PtLicenseNum:%String,Tel:%String,EmpTel:%String,CellTel:%String,Deceased:%String,DeactReason:%String,OtherNumbers:%String,EMrn:%String,EmailAddress:%String,VipCode:%String"/>
</Query>

<Query name="ByWorkersCompCarrierClmNum">
<Description>
provided WorkersCompCarrierClmNum get Patient Ids</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>WorkersCompCarrierClmNum:%String,Grp:%Integer,DeactFilter:%Boolean="1",YearOfBirth:%Integer,Sex:%String,ApproximateAge:%Integer,Org:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT DISTINCT BY (PrmryPat) PrmryPat As Id,
       PrmryPat->PatNm,PrmryPat->Mrn,PrmryPat->DeactDt,PrmryPat->Sex,
       PrmryPat->Dob, PrmryPat->GuarNmIfNotPat,
       DBMS.Tools_Age(PrmryPat->Dob,CURRENT_DATE) As Age,
       DBMS.Tools_MaskField(PrmryPat->Ssn,4) As Ssn,
       PrmryPat->StreetAddrL1,PrmryPat->StreetAddrL2,PrmryPat->CtySt,
       PrmryPat->Zip, Registration.PatientAka_List(PrmryPat) As Akas,
       PrmryPat->PtLicenseNum, PrmryPat->Tel, PrmryPat->EmpTel,
       PrmryPat->CellTel, PrmryPat->Deceased,
       PrmryPat->DeactReason,
       Registration.PatientOtherNumber_List(PrmryPat) As OtherNumbers,
       Registration.PatientEmrn_GetMRN(PrmryPat,:Org,1) As EMrn,
       PrmryPat->EmailAddress

FROM   CaseMgmt.Header
WHERE  (WorkersCompCarrierClmNum = :WorkersCompCarrierClmNum AND
       Registration.GroupActivity_PatientRestricted(PrmryPat,:Grp)=0)
       AND (:DeactFilter = 0 or (:DeactFilter=1 and PrmryPat->DeactDt IS NULL))
       AND
       (:YearOfBirth IS NULL OR YEAR(PrmryPat->Dob) = :YearOfBirth) AND
       (:Sex IS NULL OR PrmryPat->Sex=UCASE(:Sex)) AND
       (:ApproximateAge IS NULL 
          OR DATEDIFF('YY',PrmryPat->Dob,CURRENT_DATE) 
              BETWEEN :ApproximateAge-5 AND :ApproximateAge+5)]]></SqlQuery>
<Parameter name="ROWSPEC" value="Id:%Integer,PatNm:%String,Mrn:%String,DeactDt:%Date,Sex:%String,Dob:%Date,GuarNmIfNotPat:%String,Age:%String,Ssn:%String,StreetAddrL1:%String,StreetAddrL2:%String,CtySt:%String,Zip:%String,Akas:%String,PtLicenseNum:%String,Tel:%String,EmpTel:%String,CellTel:%String,Deceased:%String,DeactReason:%String,OtherNumbers:%String,EMrn:%String,EmailAddress:%String"/>
</Query>

<Query name="ByCreatedOnDt">
<Description>
return Cases with CreatedOnDt between From and ToDt.  If ToDt is not supplied
then CURRENT_DATE will be used.
                                                      </Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>FromDt:%Date,ToDt:%Date,Grp:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT
 T1.PrmryPat->PatNm As Patient,
 T1.PrmryPat->Mrn   As MRN,
 T1.PrmryPat->Dob   As DOB,
 T1.PrmryPat->Sex   As Sex,
 T1.CaseNum         As CaseNum,
 T1.AltNum,
 T1.Type->Name as Type,
 T1.Type->BillingClassification as BillingClassification,
 T1.Status, 
 T1.FirstDtOfServ,
 T1.FinalDtOfServ,
 T1.WcDtOfInj,
 T1.WcPolicyNum,
 T1.WcEmp->Name as WorkersCompEmployer,
 T1.WcPolicyEffDt,
 T1.Gid->PatNm as CaseGuarantor,
 T1.AuthNum,
 T1.AuthDt,
 T1.AuthorizedBy,
 T1.AuthTelNum,
 T1.CreatedOnDt

FROM
 CaseMgmt.Header T1
WHERE 
 (T1.CreatedOnDt BETWEEN :FromDt AND COALESCE(:ToDt,CURRENT_DATE)) AND
 (Registration.GroupActivity_PatientRestricted(T1.PrmryPat,:Grp)=0) 
ORDER BY T1.CreatedOnDt, T1.CaseNum]]></SqlQuery>
<Parameter name="ROWSPEC" value="Patient:%String,MRN:%String,DOB:%Date,Sex:%String,CaseNum:%Integer,AltNum:%String,Type:%String,BillingClassification:%String,Status:%String,FirstDtOfServ:%Date,FinalDtOfServ:%Date,WcDtOfInj:%Date,WcPolicyNum:%String,WorkersCompEmployer:%String,WcPolicyEffDt:%Date,CaseGuarantor:%String,AuthNum:%String,AuthDt:%Date,AuthorizedBy:%String,AuthTelNum:%String,CreatedOnDt:%Date"/>
</Query>

<Query name="ByCreatedOnDateOrderByMrn">
<Description>
Provided a Date range get a list of cases created, ordered by MRN.  If ToDt is
not supplied then CURRENT_DATE will be used.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>FromDt:%Date,ToDt:%Date,Grp:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT
 T1.PrmryPat->PatNm As Patient,
 T1.PrmryPat->Mrn   As MRN,
 T1.PrmryPat->Dob   As DOB,
 T1.PrmryPat->Sex   As Sex,
 T1.CaseNum         As CaseNum,
 T1.AltNum,
 T1.Type->Name as Type,
 T1.Type->BillingClassification as BillingClassification,
 T1.Status, 
 T1.FirstDtOfServ,
 T1.FinalDtOfServ,
 T1.WcDtOfInj,
 T1.WcPolicyNum,
 T1.WcEmp->Name as WorkersCompEmployer,
 T1.WcPolicyEffDt,
 T1.Gid->PatNm as CaseGuarantor,
 T1.AuthNum,
 T1.AuthDt,
 T1.AuthorizedBy,
 T1.AuthTelNum,
 T1.CreatedOnDt
FROM
 CaseMgmt.Header T1
WHERE 
 (T1.CreatedOnDt BETWEEN :FromDt AND COALESCE(:ToDt,CURRENT_DATE)) AND
 (Registration.GroupActivity_PatientRestricted(T1.PrmryPat,:Grp)=0) 
ORDER BY T1.CreatedOnDt,2, T1.CaseNum]]></SqlQuery>
<Parameter name="ROWSPEC" value="Patient:%String,MRN:%String,DOB:%Date,Sex:%String,CaseNum:%Integer,AltNum:%String,Type:%String,BillingClassification:%String,Status:%String,FirstDtOfServ:%Date,FinalDtOfServ:%Date,WcDtOfInj:%Date,WcPolicyNum:%String,WorkersCompEmployer:%String,WcPolicyEffDt:%Date,CaseGuarantor:%String,AuthNum:%String,AuthDt:%Date,AuthorizedBy:%String,AuthTelNum:%String,CreatedOnDt:%Date"/>
</Query>

<Query name="ByCreatedOnDtOrderByName">
<Description>
Provided a date range get a list of cases created ordered by Name.  If ToDt is
not supplied then use CURRENT_DATE.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>FromDt:%Date,ToDt:%Date,Grp:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT
 T1.PrmryPat->PatNm As Patient,
 T1.PrmryPat->Mrn   As MRN,
 T1.PrmryPat->Dob   As DOB,
 T1.PrmryPat->Sex   As Sex,
 T1.CaseNum         As CaseNum,
 T1.AltNum,
 T1.Type->Name as Type,
 T1.Type->BillingClassification as BillingClassification,
 T1.Status, 
 T1.FirstDtOfServ,
 T1.FinalDtOfServ,
 T1.WcDtOfInj,
 T1.WcPolicyNum,
 T1.WcEmp->Name as WorkersCompEmployer,
 T1.WcPolicyEffDt,
 T1.Gid->PatNm as CaseGuarantor,
 T1.AuthNum,
 T1.AuthDt,
 T1.AuthorizedBy,
 T1.AuthTelNum,
 T1.CreatedOnDt
FROM
 CaseMgmt.Header T1
WHERE 
 (T1.CreatedOnDt BETWEEN :FromDt AND COALESCE(:ToDt,CURRENT_DATE))
  AND
 (Registration.GroupActivity_PatientRestricted(T1.PrmryPat,:Grp)=0) 
ORDER BY T1.CreatedOnDt,1, T1.CaseNum]]></SqlQuery>
<Parameter name="ROWSPEC" value="Patient:%String,MRN:%String,DOB:%Date,Sex:%String,CaseNum:%Integer,AltNum:%String,Type:%String,BillingClassification:%String,Status:%String,FirstDtOfServ:%Date,FinalDtOfServ:%Date,WcDtOfInj:%Date,WcPolicyNum:%String,WorkersCompEmployer:%String,WcPolicyEffDt:%Date,CaseGuarantor:%String,AuthNum:%String,AuthDt:%Date,AuthorizedBy:%String,AuthTelNum:%String,CreatedOnDt:%Date"/>
</Query>

<Query name="ByHmoCaseMgr">
<Description>
Provided an Hmo and Case Manager, get the cases assigned.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%Integer,CaseMgr:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT 
        T1.PrmryPat->PatNm As Member,
        T1.CaseNum,
        T1.McaStatus->Name As Status,
        T1.McaTypeOfCase->Name as Type 
FROM    CaseMgmt.Header T1
WHERE   T1.HmoNum = :Hmo and  T1.Manager = :CaseMgr and 
        %INTERNAL(T1.McaStatus->Type) = 'O']]></SqlQuery>
<Parameter name="CONTAINID" value="2"/>
<Parameter name="ROWSPEC" value="Member:%String,CaseNum:%Integer,Status:%String,Type:%String"/>
</Query>

<Query name="CaseSummaryByHmoMgr">
<Description>
Provided an Hmo and optionally a comma delimited list of CaseMgrs get a summary
of cases by Case Manager and status type.  Status Type of D and L will be
excluded.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%Integer,CaseMgr:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT  T1.Manager->Name As CaseManager,             
        %EXTERNAL(T1.McaStatus->Type) As StatusType,COUNT(*) As CaseCount
FROM    CaseMgmt.Header T1
WHERE   (T1.HmoNum = :Hmo) 
          AND (%INTERNAL(T1.McaStatus->Type) NOT IN ('D','L'))
          AND (:CaseMgr IS NULL 
                OR T1.Manager %INLIST $LISTFROMSTRING(:CaseMgr,','))
GROUP BY T1.Manager->Name,T1.McaStatus->Type]]></SqlQuery>
<Parameter name="ROWSPEC" value="CaseManager:%String,StatusType:%String,CaseCount:%Integer"/>
</Query>

<Method name="UserHasAccessByCaseType">
<Description>
This SQL Stored Procedure Method will return a boolean indicating whether or not
a user has access based on Case Type.  AppRou is used to determine where to get
the security category list.
</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>CaseType:%Integer,User:%String,AppRou:%String="HMO"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Boolean</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 &sql(select SecurityCategory into :CSECCAT 
      FROM Dict.CmCaseType where %ID = :CaseType)
 I CSECCAT="" Q 1
 S SECCAT=##class(SecurityPlus.UsrApplicationCategory).List(User,AppRou)
 I SECCAT[(","_CSECCAT_",") Q 1
 Q 0
]]></Implementation>
</Method>

<Method name="CustomSecurity">
<Description>
This method/stored procedure invokes AESMAP BAR 77 and is used to determine if
a USER has access to a Case</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>CNUM:%Integer,USER:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,AESPOP,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Boolean</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 N SECID,AESPOP S SECID=USER
 Q $$MAP77^BCASEM()   ;Call the standard map implementation
]]></Implementation>
</Method>

<Method name="DeleteOk">
<Description>
Verify that the selected case in not linked to any:
		BAR invoices
		Sched appointments
		VM visits
		TES encounters
		TES transactions
		Anesthesia keys
		MCA Referrals
		MCA Claims</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>CaseNum:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>IVTBL,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Boolean</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 I '##class(BAR.Invoice).DeleteCaseCheck(CaseNum) Q 0
 I '##class(TES.EncounterInvoice).DeleteCaseCheck(CaseNum) Q 0
 I '##class(TES.TxnInvoice).DeleteCaseCheck(CaseNum) Q 0
 I '##class(BAR.Anes.KeyData).DeleteCaseCheck(CaseNum) Q 0
 I '##class(IMX.Document).DeleteCaseCheck(CaseNum) Q 0
 I '##class(CaseMgmt.Claim).DeleteCaseCheck(CaseNum) Q 0
 
 &SQL(SELECT PrmryPat INTO :CASEID FROM CaseMgmt.Header where CaseNum=:CaseNum)
 I '##class(Sched.Appointment).DeleteCaseCheck(CaseNum,CASEID) Q 0
 
 I '$D(IVTBL) N IVTBL D ^UDDIV
 ;VM Visit
 &SQL(SELECT Number FROM VM.Visit WHERE CaseNum=:CaseNum)
 I SQLCODE=0 Q 0

 
 ;MCA Referrals
 &SQL(SELECT A.RefNum FROM 
       Referrals.Referral A,Referrals.ReferralLinkedCase B 
       WHERE A.Id1=B.Referral AND B.CaseNum=:CaseNum) 
 I SQLCODE=0 Q 0
  
 Q $$$OK
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 s UCR="MHRREG",SYR=""
 TSTART
 K ^[UCR]PTCASE   ;Data Global
 K ^[UCR]PTCASEIX   ;User defined index global
 K ^[UCR]PTCASEX                                      
 ;Delete the children data
 D ##CLASS(CaseMgmt.TimeSpent).%KillExtent()
 D ##CLASS(CaseMgmt.Insurance).%KillExtent()
 D ##CLASS(CaseMgmt.PhoneList).%KillExtent()
 D ##CLASS(CaseMgmt.Package).%KillExtent()
 D ##CLASS(CaseMgmt.Review).%KillExtent()
 D ##CLASS(CaseMgmt.CostSheet).%KillExtent()
 D ##CLASS(CaseMgmt.Status).%KillExtent()
 D ##CLASS(CaseMgmt.Claim).%KillExtent()
 D ##CLASS(CaseMgmt.Invoice).%KillExtent()
 D ##CLASS(CaseMgmt.Referral).%KillExtent()
 D ##CLASS(CaseMgmt.SecureNote).%KillExtent()
 TCOMMIT
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>CASE:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
 D ..AccidentCntrySetObjectId($P($G(CASE("CASE",3)),"^",9))
 D ..AccidentStSetObjectId($P($G(CASE("CASE",3)),"^",8))
 S ..AccidentTime=$P($G(CASE("CASE",13)),"^",15)
 S ..ActivateForAutolink=$P($G(CASE("CASE",0)),"^",21)
 S ..AltNum=$P($G(CASE("CASE",0)),"^",12)
 S ..ArchivePurgeFlag=$P($G(CASE("CASE",0)),"^",13)
 S ..ArchivedAtTime=$P($G(CASE("CASE",1)),"^",8)
 S ..ArchivedOnDt=$P($G(CASE("CASE",1)),"^",7)
 S ..AuthDt=$P($G(CASE("CASE",2)),"^",2)
 S ..AuthNum=$P($G(CASE("CASE",2)),"^",1)
 S ..AuthTelNum=$P($G(CASE("CASE",2)),"^",4)
 S ..AuthorizedBy=$P($G(CASE("CASE",2)),"^",3)
 S ..AuthorizedDays=$P($G(CASE("CASE",9)),"^",3)
 S ..AuthorizedDollars=$P($G(CASE("CASE",9)),"^",1)
 S ..AuthorizedEncounters=$P($G(CASE("CASE",9)),"^",5)
 S ..AuthorizedTreatments=$P($G(CASE("CASE",9)),"^",4)
 S ..AuthorizedUnits=$P($G(CASE("CASE",9)),"^",2)
 D ..BillingEmpSetObjectId($P($G(CASE("CASE",3)),"^",1))
 D ..BillingInsSetObjectId($P($G(CASE("CASE",3)),"^",2))
 S ..CaseNum=$G(CNUM)
 D ..CatSetObjectId($P($G(CASE("CASE",0)),"^",16))
 S ..CauseOfInj=$P($G(CASE("CASE",3)),"^",7)
 S ..ClosedOnDt=$P($G(CASE("CASE",1)),"^",13)
 S (..Comments,WP)="" S N="",CNT=0 F  S N=$O(CASE("CASE",10,N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..Comments=WP
 S ..CreatedAtTime=$P($G(CASE("CASE",1)),"^",3)
 D ..CreatedBySetObjectId($P($G(CASE("CASE",1)),"^",1))
 S ..CreatedOnDt=$P($G(CASE("CASE",1)),"^",2)
 S ..CtySt=$P($G(CASE("CASE",50)),"^",4)
 S ..Descr=$P($G(CASE("CASE",10)),"^",1)
 S ..DtAssumedOrRelinquishedCare=$P($G(CASE("CASE",3)),"^",14)
 S ..DtLastMenstrualPd=$P($G(CASE("CASE",3)),"^",13)
 S ..DtOnsetOfIllness=$P($G(CASE("CASE",3)),"^",11)
 S ..DtOnsetOfSimilarIllness=$P($G(CASE("CASE",3)),"^",12)
 S ..EmpDept=$P($G(CASE("CASE",2)),"^",6)
 S ..FinalDtOfServ=$P($G(CASE("CASE",0)),"^",7)
 S ..FirstDtOfServ=$P($G(CASE("CASE",0)),"^",6)
 D ..GIDSetObjectId($P($G(CASE("CASE",0)),"^",2))
 S ..GuarNameIfNotPatient=$P($G(CASE("CASE",0)),"^",23)
 D ..HmoNumSetObjectId($P($G(CASE("CASE",0)),"^",18))
 S ..InitialRin=$P($G(CASE("CASE",0)),"^",14)
 S ..LastEditedAtTime=$P($G(CASE("CASE",1)),"^",6)
 D ..LastEditedBySetObjectId($P($G(CASE("CASE",1)),"^",4))
 S ..LastEditedOnDt=$P($G(CASE("CASE",1)),"^",5)
 D ..ManagerSetObjectId($P($G(CASE("CASE",0)),"^",15))
 D ..McaContAgency471SetObjectId($P($G(CASE("CASE",8)),"^",4))
 S ..McaContAgencyTxt=$P($G(CASE("CASE",8)),"^",5)
 S ..McaContAgencyTxtAddr1=$P($G(CASE("CASE",8)),"^",6)
 S ..McaContAgencyTxtAddr2=$P($G(CASE("CASE",8)),"^",7)
 S ..McaContAgencyTxtCtystzp=$P($G(CASE("CASE",8)),"^",8)
 S ..McaContAgencyTxtTel=$P($G(CASE("CASE",8)),"^",9)
 S ..McaContNm=$P($G(CASE("CASE",8)),"^",1)
 S ..McaContPosition=$P($G(CASE("CASE",8)),"^",2)
 S ..McaContServ=$P($G(CASE("CASE",8)),"^",3)
 D ..McaSourceSetObjectId($P($G(CASE("CASE",0)),"^",20))
 D ..McaStatusSetObjectId($P($G(CASE("CASE",0)),"^",17))
 D ..McaTypeOfCaseSetObjectId($P($G(CASE("CASE",0)),"^",19))
 S ..MostRecentlyPrintedDt=$P($G(CASE("CASE",0)),"^",10)
 S ..MostRecentlyPrintedReport=$P($G(CASE("CASE",0)),"^",9)
 S ..NextRevDt=$P($G(CASE("CASE",1)),"^",11)
 S ..Num=$P($G(CASE("CASE",0)),"^",1)
 D ..PrmryPatSetObjectId($P($G(CASE("CASE",0)),"^",11))
 S ..PurgedAtTime=$P($G(CASE("CASE",1)),"^",10)
 S ..PurgedOnDt=$P($G(CASE("CASE",1)),"^",9)
 S ..ReferredBy=$P($G(CASE("CASE",2)),"^",5)
 S ..RevInterval=$P($G(CASE("CASE",1)),"^",12)
 S ..ServDtMatch=$P($G(CASE("CASE",0)),"^",22)
 S ..Status=$P($G(CASE("CASE",0)),"^",5)
 D ..TypeSetObjectId($P($G(CASE("CASE",0)),"^",4))
 S ..UAutoClaimNum=$P($G(CASE("CASE",50)),"^",1)
 S ..UInsuredsAddr=$P($G(CASE("CASE",50)),"^",3)
 S ..UInsuredsDob=$P($G(CASE("CASE",50)),"^",6)
 S ..UInsuredsNm=$P($G(CASE("CASE",50)),"^",2)
 S ..UInsuredsPolicyNum=$P($G(CASE("CASE",50)),"^",8)
 S ..UInsuredsSex=$P($G(CASE("CASE",50)),"^",7)
 S ..UInsuredsZip=$P($G(CASE("CASE",50)),"^",5)
 S ..WcDtOfInj=$P($G(CASE("CASE",0)),"^",8)
 D ..WcEmpSetObjectId($P($G(CASE("CASE",3)),"^",3))
 S ..WcEmployerFtxt=$P($G(CASE("CASE",3)),"^",4)
 S ..WcPolicyEffDt=$P($G(CASE("CASE",3)),"^",6)
 S ..WcPolicyNum=$P($G(CASE("CASE",3)),"^",5)
 S ..WorkersCompCarrierClmNum=$P($G(CASE("CASE",0)),"^",3)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[CASE:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>CNUM</PublicList>
<Implementation><![CDATA[
 S CNUM=..CaseNum
 S $P(CASE("CASE",3),"^",9)=""
 I ..AccidentCntry S $P(CASE("CASE",3),"^",9)=..AccidentCntry.SummaryValidate("AccidentCntry",.Error)
 S $P(CASE("CASE",3),"^",8)=""
 I ..AccidentSt S $P(CASE("CASE",3),"^",8)=..AccidentSt.SummaryValidate("AccidentSt",.Error)
 S $P(CASE("CASE",13),"^",15)=..AccidentTime
 S $P(CASE("CASE",0),"^",21)=..ActivateForAutolink
 S $P(CASE("CASE",0),"^",12)=..AltNum
 S $P(CASE("CASE",0),"^",13)=..ArchivePurgeFlag
 S $P(CASE("CASE",1),"^",8)=..ArchivedAtTime
 S $P(CASE("CASE",1),"^",7)=..ArchivedOnDt
 S $P(CASE("CASE",2),"^",2)=..AuthDt
 S $P(CASE("CASE",2),"^",1)=..AuthNum
 S $P(CASE("CASE",2),"^",4)=..AuthTelNum
 S $P(CASE("CASE",2),"^",3)=..AuthorizedBy
 S $P(CASE("CASE",9),"^",3)=..AuthorizedDays
 S $P(CASE("CASE",9),"^",1)=..AuthorizedDollars
 S $P(CASE("CASE",9),"^",5)=..AuthorizedEncounters
 S $P(CASE("CASE",9),"^",4)=..AuthorizedTreatments
 S $P(CASE("CASE",9),"^",2)=..AuthorizedUnits
 S $P(CASE("CASE",3),"^",1)=""
 I ..BillingEmp S $P(CASE("CASE",3),"^",1)=..BillingEmp.SummaryValidate("BillingEmp",.Error)
 S $P(CASE("CASE",3),"^",2)=""
 I ..BillingIns S $P(CASE("CASE",3),"^",2)=..BillingIns.SummaryValidate("BillingIns",.Error)
 S $P(CASE("CASE",0),"^",16)=""
 I ..Cat S $P(CASE("CASE",0),"^",16)=..Cat.SummaryValidate("Cat",.Error)
 S $P(CASE("CASE",3),"^",7)=..CauseOfInj
 S $P(CASE("CASE",1),"^",13)=..ClosedOnDt
 S N="" F  S N=$O(CASE("CASE",10,N)) Q:N=""  K CASE("CASE",10,N)
 I $ZSTRIP(..Comments,"*W")'="" F N=1:1:$L(..Comments,$C(13,10)) S CASE("CASE",10,N)=$P(..Comments,$C(13,10),N)
 S $P(CASE("CASE",1),"^",3)=..CreatedAtTime
 S $P(CASE("CASE",1),"^",1)=""
 I ..CreatedBy,##class(%Dictionary.CompiledMethod).%OpenId("SecurityPlus.Usr||SummaryValidate") S $P(CASE("CASE",1),"^",1)=..CreatedBy.SummaryValidate("CreatedBy",.Error)
 E   I ..CreatedBy S $P(CASE("CASE",1),"^",1)=..CreatedBy.%Id()
 S $P(CASE("CASE",1),"^",2)=..CreatedOnDt
 S $P(CASE("CASE",50),"^",4)=..CtySt
 S $P(CASE("CASE",10),"^",1)=..Descr
 S $P(CASE("CASE",3),"^",14)=..DtAssumedOrRelinquishedCare
 S $P(CASE("CASE",3),"^",13)=..DtLastMenstrualPd
 S $P(CASE("CASE",3),"^",11)=..DtOnsetOfIllness
 S $P(CASE("CASE",3),"^",12)=..DtOnsetOfSimilarIllness
 S $P(CASE("CASE",2),"^",6)=..EmpDept
 S $P(CASE("CASE",0),"^",7)=..FinalDtOfServ
 S $P(CASE("CASE",0),"^",6)=..FirstDtOfServ
 S $P(CASE("CASE",0),"^",2)=""
 I ..GID,##class(%Dictionary.CompiledMethod).%OpenId("Registration.Patient||SummaryValidate") S $P(CASE("CASE",0),"^",2)=..GID.SummaryValidate("GID",.Error)
 E   I ..GID S $P(CASE("CASE",0),"^",2)=..GID.%Id()
 S $P(CASE("CASE",0),"^",23)=..GuarNameIfNotPatient
 S $P(CASE("CASE",0),"^",18)=""
 I ..HmoNum S $P(CASE("CASE",0),"^",18)=..HmoNum.SummaryValidate("HmoNum",.Error)
 S $P(CASE("CASE",0),"^",14)=..InitialRin
 S $P(CASE("CASE",1),"^",6)=..LastEditedAtTime
 S $P(CASE("CASE",1),"^",4)=""
 I ..LastEditedBy,##class(%Dictionary.CompiledMethod).%OpenId("SecurityPlus.Usr||SummaryValidate") S $P(CASE("CASE",1),"^",4)=..LastEditedBy.SummaryValidate("LastEditedBy",.Error)
 E   I ..LastEditedBy S $P(CASE("CASE",1),"^",4)=..LastEditedBy.%Id()
 S $P(CASE("CASE",1),"^",5)=..LastEditedOnDt
 S $P(CASE("CASE",0),"^",15)=""
 I ..Manager S $P(CASE("CASE",0),"^",15)=..Manager.SummaryValidate("Manager",.Error)
 S $P(CASE("CASE",8),"^",4)=""
 I ..McaContAgency471 S $P(CASE("CASE",8),"^",4)=..McaContAgency471.SummaryValidate("McaContAgency471",.Error)
 S $P(CASE("CASE",8),"^",5)=..McaContAgencyTxt
 S $P(CASE("CASE",8),"^",6)=..McaContAgencyTxtAddr1
 S $P(CASE("CASE",8),"^",7)=..McaContAgencyTxtAddr2
 S $P(CASE("CASE",8),"^",8)=..McaContAgencyTxtCtystzp
 S $P(CASE("CASE",8),"^",9)=..McaContAgencyTxtTel
 S $P(CASE("CASE",8),"^",1)=..McaContNm
 S $P(CASE("CASE",8),"^",2)=..McaContPosition
 S $P(CASE("CASE",8),"^",3)=..McaContServ
 S $P(CASE("CASE",0),"^",20)=""
 I ..McaSource S $P(CASE("CASE",0),"^",20)=..McaSource.SummaryValidate("McaSource",.Error)
 S $P(CASE("CASE",0),"^",17)=""
 I ..McaStatus S $P(CASE("CASE",0),"^",17)=..McaStatus.SummaryValidate("McaStatus",.Error)
 S $P(CASE("CASE",0),"^",19)=""
 I ..McaTypeOfCase S $P(CASE("CASE",0),"^",19)=..McaTypeOfCase.SummaryValidate("McaTypeOfCase",.Error)
 S $P(CASE("CASE",0),"^",10)=..MostRecentlyPrintedDt
 S $P(CASE("CASE",0),"^",9)=..MostRecentlyPrintedReport
 S $P(CASE("CASE",1),"^",11)=..NextRevDt
 S $P(CASE("CASE",0),"^",1)=..Num
 S $P(CASE("CASE",0),"^",11)=""
 I ..PrmryPat,##class(%Dictionary.CompiledMethod).%OpenId("Registration.Patient||SummaryValidate") S $P(CASE("CASE",0),"^",11)=..PrmryPat.SummaryValidate("PrmryPat",.Error)
 E   I ..PrmryPat S $P(CASE("CASE",0),"^",11)=..PrmryPat.%Id()
 S $P(CASE("CASE",1),"^",10)=..PurgedAtTime
 S $P(CASE("CASE",1),"^",9)=..PurgedOnDt
 S $P(CASE("CASE",2),"^",5)=..ReferredBy
 S $P(CASE("CASE",1),"^",12)=..RevInterval
 S $P(CASE("CASE",0),"^",22)=..ServDtMatch
 S $P(CASE("CASE",0),"^",5)=..Status
 S $P(CASE("CASE",0),"^",4)=""
 I ..Type S $P(CASE("CASE",0),"^",4)=..Type.SummaryValidate("Type",.Error)
 S $P(CASE("CASE",50),"^",1)=..UAutoClaimNum
 S $P(CASE("CASE",50),"^",3)=..UInsuredsAddr
 S $P(CASE("CASE",50),"^",6)=..UInsuredsDob
 S $P(CASE("CASE",50),"^",2)=..UInsuredsNm
 S $P(CASE("CASE",50),"^",8)=..UInsuredsPolicyNum
 S $P(CASE("CASE",50),"^",7)=..UInsuredsSex
 S $P(CASE("CASE",50),"^",5)=..UInsuredsZip
 S $P(CASE("CASE",0),"^",8)=..WcDtOfInj
 S $P(CASE("CASE",3),"^",3)=""
 I ..WcEmp S $P(CASE("CASE",3),"^",3)=..WcEmp.SummaryValidate("WcEmp",.Error)
 S $P(CASE("CASE",3),"^",4)=..WcEmployerFtxt
 S $P(CASE("CASE",3),"^",6)=..WcPolicyEffDt
 S $P(CASE("CASE",3),"^",5)=..WcPolicyNum
 S $P(CASE("CASE",0),"^",3)=..WorkersCompCarrierClmNum
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..ActivateForAutolink["^") Q -1
 I (..AltNum["^") Q -1
 I (..ArchivePurgeFlag["^") Q -1
 I (..AuthNum["^") Q -1
 I (..AuthorizedBy["^") Q -1
 I (..CauseOfInj["^") Q -1
 I (..CtySt["^") Q -1
 I (..Descr["^") Q -1
 I (..EmpDept["^") Q -1
 I (..GuarNameIfNotPatient["^") Q -1
 I (..McaContAgencyTxt["^") Q -1
 I (..McaContAgencyTxtAddr1["^") Q -1
 I (..McaContAgencyTxtAddr2["^") Q -1
 I (..McaContAgencyTxtCtystzp["^") Q -1
 I (..McaContNm["^") Q -1
 I (..McaContPosition["^") Q -1
 I (..McaContServ["^") Q -1
 I (..MostRecentlyPrintedReport["^") Q -1
 I (..ReferredBy["^") Q -1
 I (..ServDtMatch["^") Q -1
 I (..Status["^") Q -1
 I (..UAutoClaimNum["^") Q -1
 I (..UInsuredsAddr["^") Q -1
 I (..UInsuredsNm["^") Q -1
 I (..UInsuredsPolicyNum["^") Q -1
 I (..UInsuredsSex["^") Q -1
 I (..UInsuredsZip["^") Q -1
 I (..WcEmployerFtxt["^") Q -1
 I (..WcPolicyNum["^") Q -1
 I (..WorkersCompCarrierClmNum["^") Q -1
 Q 1
]]></Implementation>
</Method>

<Trigger name="WordProcessingInsert">
<Code> ;s UCR="MHRREG",SYR=""
 N CNUM,N S CNUM={CaseNum}
 I {Comments}'="" F N=1:1:$L({Comments},$C(13,10)) S ^["MHRREGORIG"]PTCASE(CNUM,"CASE",10,N)=$P({Comments},$C(13,10),N)</Code>
<Event>INSERT</Event>
<Order>-10</Order>
</Trigger>

<Trigger name="WordProcessingUpdate">
<Code> s UCR="MHRREG",SYR=""
 N CNUM,N S CNUM={CaseNum}
 I {Comments*C} D
 .K ^["MHRREGORIG"]PTCASE(CNUM,"CASE",10)  ;Init data for Comments
 .I {Comments}'="" F N=1:1:$L({Comments},$C(13,10)) S ^["MHRREGORIG"]PTCASE(CNUM,"CASE",10,N)=$P({Comments},$C(13,10),N)</Code>
<Event>UPDATE</Event>
<Order>-10</Order>
</Trigger>

<Trigger name="WordProcessingDelete">
<Code> s UCR="MHRREG",SYR=""
 N CNUM,N S CNUM={CaseNum}
 K ^["MHRREGORIG"]PTCASE(CNUM,"CASE",10)  ;Init data for Comments</Code>
<Event>DELETE</Event>
<Order>-10</Order>
</Trigger>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.Header</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 &sql(select UInsuredsNm into :Return FROM CaseMgmt.Header WHERE %ID = :Id)
 I Return'="" q Return
 q ""
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.HeaderS</StreamLocation>
<ExtentSize>973</ExtentSize>
<Property name="AccidentCntry">
<Selectivity>33.3333%</Selectivity>
</Property>
<Property name="AccidentSt">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="AccidentTime">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="ActivateForAutolink">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="AltNum">
<Selectivity>2.2727%</Selectivity>
</Property>
<Property name="ArchivePurgeFlag">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="ArchivedAtTime">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="ArchivedOnDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="AuthDt">
<Selectivity>3.2258%</Selectivity>
</Property>
<Property name="AuthNum">
<Selectivity>3.3333%</Selectivity>
</Property>
<Property name="AuthTelNum">
<Selectivity>5.2632%</Selectivity>
</Property>
<Property name="AuthorizedBy">
<Selectivity>4.7619%</Selectivity>
</Property>
<Property name="AuthorizedDays">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="AuthorizedDollars">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="AuthorizedEncounters">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="AuthorizedTreatments">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="AuthorizedUnits">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="BillingEmp">
<Selectivity>12.5000%</Selectivity>
</Property>
<Property name="BillingIns">
<Selectivity>0.4717%</Selectivity>
</Property>
<Property name="CaseNum">
<Selectivity>1</Selectivity>
</Property>
<Property name="Cat">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="CauseOfInj">
<Selectivity>16.6667%</Selectivity>
</Property>
<Property name="ClosedOnDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Comments">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="CreatedAtTime">
<Selectivity>0.1045%</Selectivity>
</Property>
<Property name="CreatedBy">
<Selectivity>1.2658%</Selectivity>
</Property>
<Property name="CreatedOnDt">
<Selectivity>0.5208%</Selectivity>
</Property>
<Property name="CtySt">
<Selectivity>0.7752%</Selectivity>
</Property>
<Property name="Descr">
<Selectivity>1.5873%</Selectivity>
</Property>
<Property name="DtAssumedOrRelinquishedCare">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="DtLastMenstrualPd">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="DtOnsetOfIllness">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="DtOnsetOfSimilarIllness">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="EmpDept">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="FinalDtOfServ">
<Selectivity>3.0303%</Selectivity>
</Property>
<Property name="FirstDtOfServ">
<Selectivity>0.3300%</Selectivity>
</Property>
<Property name="GID">
<Selectivity>0.1042%</Selectivity>
</Property>
<Property name="GuarNameIfNotPatient">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="HmoNum">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="InitialRin">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="LastEditedAtTime">
<Selectivity>0.1033%</Selectivity>
</Property>
<Property name="LastEditedBy">
<Selectivity>1.2195%</Selectivity>
</Property>
<Property name="LastEditedOnDt">
<Selectivity>0.5435%</Selectivity>
</Property>
<Property name="LastRevDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Manager">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="McaContAgency471">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="McaContAgencyTxt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="McaContAgencyTxtAddr1">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="McaContAgencyTxtAddr2">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="McaContAgencyTxtCtystzp">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="McaContAgencyTxtTel">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="McaContNm">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="McaContPosition">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="McaContServ">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="McaSource">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="McaStatus">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="McaTypeOfCase">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="MostRecentlyPrintedDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="MostRecentlyPrintedReport">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="NextRevDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Num">
<Selectivity>0.1028%</Selectivity>
</Property>
<Property name="PrmryPat">
<Selectivity>0.1038%</Selectivity>
</Property>
<Property name="PurgedAtTime">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="PurgedOnDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="ReferredBy">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="RevInterval">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="ServDtMatch">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="Status">
<Selectivity>33.3333%</Selectivity>
</Property>
<Property name="Type">
<Selectivity>14.2857%</Selectivity>
</Property>
<Property name="UAutoClaimNum">
<Selectivity>0.1621%</Selectivity>
</Property>
<Property name="UInsuredsAddr">
<Selectivity>0.1815%</Selectivity>
</Property>
<Property name="UInsuredsDob">
<Selectivity>0.2519%</Selectivity>
</Property>
<Property name="UInsuredsNm">
<Selectivity>0.1761%</Selectivity>
</Property>
<Property name="UInsuredsPolicyNum">
<Selectivity>0.6289%</Selectivity>
</Property>
<Property name="UInsuredsSex">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="UInsuredsZip">
<Selectivity>0.8403%</Selectivity>
</Property>
<Property name="UsedDays">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="UsedDollars">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="UsedEncounters">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="UsedTreatments">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="UsedUnits">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="WcDtOfInj">
<Selectivity>0.2703%</Selectivity>
</Property>
<Property name="WcEmp">
<Selectivity>8.3333%</Selectivity>
</Property>
<Property name="WcEmployerFtxt">
<Selectivity>0.7299%</Selectivity>
</Property>
<Property name="WcPolicyEffDt">
<Selectivity>1.3333%</Selectivity>
</Property>
<Property name="WcPolicyNum">
<Selectivity>0.7407%</Selectivity>
</Property>
<Property name="WorkersCompCarrierClmNum">
<Selectivity>0.5155%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^["MHRREGORIG"]PTCASE</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="2">
<Expression>"CASE"</Expression>
</Subscript>
<Subscript name="3">
<Expression>0</Expression>
</Subscript>
<Data name="AccidentCntry">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>9</Piece>
</Data>
<Data name="AccidentSt">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>8</Piece>
</Data>
<Data name="AccidentTime">
<Delimiter>"^"</Delimiter>
<Node>+13</Node>
<Piece>15</Piece>
</Data>
<Data name="ActivateForAutolink">
<Delimiter>"^"</Delimiter>
<Piece>21</Piece>
</Data>
<Data name="AltNum">
<Delimiter>"^"</Delimiter>
<Piece>12</Piece>
</Data>
<Data name="ArchivePurgeFlag">
<Delimiter>"^"</Delimiter>
<Piece>13</Piece>
</Data>
<Data name="ArchivedAtTime">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>8</Piece>
</Data>
<Data name="ArchivedOnDt">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>7</Piece>
</Data>
<Data name="AuthDt">
<Delimiter>"^"</Delimiter>
<Node>+2</Node>
<Piece>2</Piece>
</Data>
<Data name="AuthNum">
<Delimiter>"^"</Delimiter>
<Node>+2</Node>
<Piece>1</Piece>
</Data>
<Data name="AuthTelNum">
<Delimiter>"^"</Delimiter>
<Node>+2</Node>
<Piece>4</Piece>
</Data>
<Data name="AuthorizedBy">
<Delimiter>"^"</Delimiter>
<Node>+2</Node>
<Piece>3</Piece>
</Data>
<Data name="AuthorizedDays">
<Delimiter>"^"</Delimiter>
<Node>+9</Node>
<Piece>3</Piece>
</Data>
<Data name="AuthorizedDollars">
<Delimiter>"^"</Delimiter>
<Node>+9</Node>
<Piece>1</Piece>
</Data>
<Data name="AuthorizedEncounters">
<Delimiter>"^"</Delimiter>
<Node>+9</Node>
<Piece>5</Piece>
</Data>
<Data name="AuthorizedTreatments">
<Delimiter>"^"</Delimiter>
<Node>+9</Node>
<Piece>4</Piece>
</Data>
<Data name="AuthorizedUnits">
<Delimiter>"^"</Delimiter>
<Node>+9</Node>
<Piece>2</Piece>
</Data>
<Data name="BillingEmp">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>1</Piece>
</Data>
<Data name="BillingIns">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>2</Piece>
</Data>
<Data name="Cat">
<Delimiter>"^"</Delimiter>
<Piece>16</Piece>
</Data>
<Data name="CauseOfInj">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>7</Piece>
</Data>
<Data name="ClosedOnDt">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>13</Piece>
</Data>
<Data name="Comments">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^["MHRREGORIG"]PTCASE({L1},"CASE",10,sub)) Q:sub=""  S data=data_$G(^["MHRREGORIG"]PTCASE({L1},"CASE",10,sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
<Data name="CreatedAtTime">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>3</Piece>
</Data>
<Data name="CreatedBy">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>1</Piece>
</Data>
<Data name="CreatedOnDt">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>2</Piece>
</Data>
<Data name="CtySt">
<Delimiter>"^"</Delimiter>
<Node>+50</Node>
<Piece>4</Piece>
</Data>
<Data name="Descr">
<Delimiter>"^"</Delimiter>
<Node>+10</Node>
<Piece>1</Piece>
</Data>
<Data name="DtAssumedOrRelinquishedCare">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>14</Piece>
</Data>
<Data name="DtLastMenstrualPd">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>13</Piece>
</Data>
<Data name="DtOnsetOfIllness">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>11</Piece>
</Data>
<Data name="DtOnsetOfSimilarIllness">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>12</Piece>
</Data>
<Data name="EmpDept">
<Delimiter>"^"</Delimiter>
<Node>+2</Node>
<Piece>6</Piece>
</Data>
<Data name="FinalDtOfServ">
<Delimiter>"^"</Delimiter>
<Piece>7</Piece>
</Data>
<Data name="FirstDtOfServ">
<Delimiter>"^"</Delimiter>
<Piece>6</Piece>
</Data>
<Data name="GID">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="GuarNameIfNotPatient">
<Delimiter>"^"</Delimiter>
<Piece>23</Piece>
</Data>
<Data name="HmoNum">
<Delimiter>"^"</Delimiter>
<Piece>18</Piece>
</Data>
<Data name="InitialRin">
<Delimiter>"^"</Delimiter>
<Piece>14</Piece>
</Data>
<Data name="LastEditedAtTime">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>6</Piece>
</Data>
<Data name="LastEditedBy">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>4</Piece>
</Data>
<Data name="LastEditedOnDt">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>5</Piece>
</Data>
<Data name="Manager">
<Delimiter>"^"</Delimiter>
<Piece>15</Piece>
</Data>
<Data name="McaContAgency471">
<Delimiter>"^"</Delimiter>
<Node>+8</Node>
<Piece>4</Piece>
</Data>
<Data name="McaContAgencyTxt">
<Delimiter>"^"</Delimiter>
<Node>+8</Node>
<Piece>5</Piece>
</Data>
<Data name="McaContAgencyTxtAddr1">
<Delimiter>"^"</Delimiter>
<Node>+8</Node>
<Piece>6</Piece>
</Data>
<Data name="McaContAgencyTxtAddr2">
<Delimiter>"^"</Delimiter>
<Node>+8</Node>
<Piece>7</Piece>
</Data>
<Data name="McaContAgencyTxtCtystzp">
<Delimiter>"^"</Delimiter>
<Node>+8</Node>
<Piece>8</Piece>
</Data>
<Data name="McaContAgencyTxtTel">
<Delimiter>"^"</Delimiter>
<Node>+8</Node>
<Piece>9</Piece>
</Data>
<Data name="McaContNm">
<Delimiter>"^"</Delimiter>
<Node>+8</Node>
<Piece>1</Piece>
</Data>
<Data name="McaContPosition">
<Delimiter>"^"</Delimiter>
<Node>+8</Node>
<Piece>2</Piece>
</Data>
<Data name="McaContServ">
<Delimiter>"^"</Delimiter>
<Node>+8</Node>
<Piece>3</Piece>
</Data>
<Data name="McaSource">
<Delimiter>"^"</Delimiter>
<Piece>20</Piece>
</Data>
<Data name="McaStatus">
<Delimiter>"^"</Delimiter>
<Piece>17</Piece>
</Data>
<Data name="McaTypeOfCase">
<Delimiter>"^"</Delimiter>
<Piece>19</Piece>
</Data>
<Data name="MostRecentlyPrintedDt">
<Delimiter>"^"</Delimiter>
<Piece>10</Piece>
</Data>
<Data name="MostRecentlyPrintedReport">
<Delimiter>"^"</Delimiter>
<Piece>9</Piece>
</Data>
<Data name="NextRevDt">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>11</Piece>
</Data>
<Data name="Num">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="PrmryPat">
<Delimiter>"^"</Delimiter>
<Piece>11</Piece>
</Data>
<Data name="PurgedAtTime">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>10</Piece>
</Data>
<Data name="PurgedOnDt">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>9</Piece>
</Data>
<Data name="ReferredBy">
<Delimiter>"^"</Delimiter>
<Node>+2</Node>
<Piece>5</Piece>
</Data>
<Data name="RevInterval">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>12</Piece>
</Data>
<Data name="ServDtMatch">
<Delimiter>"^"</Delimiter>
<Piece>22</Piece>
</Data>
<Data name="Status">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="Type">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="UAutoClaimNum">
<Delimiter>"^"</Delimiter>
<Node>+50</Node>
<Piece>1</Piece>
</Data>
<Data name="UInsuredsAddr">
<Delimiter>"^"</Delimiter>
<Node>+50</Node>
<Piece>3</Piece>
</Data>
<Data name="UInsuredsDob">
<Delimiter>"^"</Delimiter>
<Node>+50</Node>
<Piece>6</Piece>
</Data>
<Data name="UInsuredsNm">
<Delimiter>"^"</Delimiter>
<Node>+50</Node>
<Piece>2</Piece>
</Data>
<Data name="UInsuredsPolicyNum">
<Delimiter>"^"</Delimiter>
<Node>+50</Node>
<Piece>8</Piece>
</Data>
<Data name="UInsuredsSex">
<Delimiter>"^"</Delimiter>
<Node>+50</Node>
<Piece>7</Piece>
</Data>
<Data name="UInsuredsZip">
<Delimiter>"^"</Delimiter>
<Node>+50</Node>
<Piece>5</Piece>
</Data>
<Data name="WcDtOfInj">
<Delimiter>"^"</Delimiter>
<Piece>8</Piece>
</Data>
<Data name="WcEmp">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>3</Piece>
</Data>
<Data name="WcEmployerFtxt">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>4</Piece>
</Data>
<Data name="WcPolicyEffDt">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>6</Piece>
</Data>
<Data name="WcPolicyNum">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>5</Piece>
</Data>
<Data name="WorkersCompCarrierClmNum">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
</SQLMap>
<SQLMap name="HmoMgrStatus">
<Type>index</Type>
<Global>^["MHRREG"]PTCASEX</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"MCAHMS"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{HmoNum}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{Manager}</Expression>
</Subscript>
<Subscript name="4">
<Expression>{McaStatus}</Expression>
</Subscript>
<Subscript name="5">
<Expression>{CaseNum}</Expression>
</Subscript>
</SQLMap>
<SQLMap name="ZAltNum">
<Type>index</Type>
<Condition>{AltNum}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>AltNum</ConditionFields>
<Global>^["MHRREG"]PTCASEX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"ALT"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{AltNum}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{CaseNum}</Expression>
</Subscript>
</SQLMap>
<SQLMap name="ZCat">
<Type>index</Type>
<Condition>{Cat}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>Cat</ConditionFields>
<Global>^["MHRREG"]PTCASEX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"MCACAT"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{Cat}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
</SQLMap>
<SQLMap name="ZCreatedOnDt">
<Type>index</Type>
<Global>^["MHRREG"]PTCASEX</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"NEW"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{CreatedOnDt}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{CaseNum}</Expression>
</Subscript>
<Data name="CreatedAtTime">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="CreatedBy">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
</SQLMap>
<SQLMap name="ZGID">
<Type>index</Type>
<Global>^["MHRREG"]PTCASEX</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"GUAR"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{GID}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
</SQLMap>
<SQLMap name="ZHmoNum">
<Type>index</Type>
<Condition>{HmoNum}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>HmoNum</ConditionFields>
<Global>^["MHRREG"]PTCASEX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"MCAHMO"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{HmoNum}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
</SQLMap>
<SQLMap name="ZManager">
<Type>index</Type>
<Condition>{Manager}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>Manager</ConditionFields>
<Global>^["MHRREG"]PTCASEX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"MCAMGR"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{Manager}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
</SQLMap>
<SQLMap name="ZMcaStatus">
<Type>index</Type>
<Condition>{McaStatus}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>McaStatus</ConditionFields>
<Global>^["MHRREG"]PTCASEX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"MCASTA"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{McaStatus}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
</SQLMap>
<SQLMap name="ZMcaTypeOfCase">
<Type>index</Type>
<Condition>{McaTypeOfCase}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>McaTypeOfCase</ConditionFields>
<Global>^["MHRREG"]PTCASEX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"MCATYP"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{McaTypeOfCase}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
</SQLMap>
<SQLMap name="ZPrmryPat">
<Type>index</Type>
<Global>^["MHRREG"]PTCASEX</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"PAT"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{PrmryPat}</Expression>
<StartValue>100</StartValue>
</Subscript>
<Subscript name="3">
<Expression>{CaseNum}</Expression>
</Subscript>
</SQLMap>
<SQLMap name="ZWorkersCompCarrierClmNum">
<Type>index</Type>
<Condition>{WorkersCompCarrierClmNum}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>WorkersCompCarrierClmNum</ConditionFields>
<Global>^["MHRREG"]PTCASEX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"WC"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{WorkersCompCarrierClmNum}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.Insurance">
<Description>
Query this table for case FSC information.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67349,58116.850997</TimeChanged>
<TimeCreated>63729,46106</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_FSCS</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.Insurance</Default>
</Parameter>

<Property name="Header">
<Type>CaseMgmt.Header</Type>
<Cardinality>parent</Cardinality>
<Inverse>Insurances</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Fsc">
<Type>Dict.FSC</Type>
<Required>1</Required>
</Property>

<ForeignKey name="Fsc">
<Properties>Fsc</Properties>
<ReferencedClass>Dict.FSC</ReferencedClass>
</ForeignKey>

<Property name="Prio">
<Description>
This column contains the FSC priority.</Description>
<Type>%Integer</Type>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="Priority"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Prio</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.Insurance"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="List">
<Description>
Get a comma delimited list of FSCs.  If Field = 'Mnemonic' then return the FSC
mnemonics</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>CaseNumber:%Integer,Field:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 &SQL(SELECT List(Fsc) INTO :List 
      FROM   CaseMgmt.Insurance
      WHERE  Header = :CaseNumber)
 Q ##class(Dict.FSC).GetValueByIds(List,$G(Field))
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>CASE:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET,UDDREPET</PublicList>
<Implementation><![CDATA[ D ..FscSetObjectId($P($G(CASE("CASE",7)),"^",UDDREPET))
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[CASE:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET</PublicList>
<Implementation><![CDATA[
 S $P(CASE("CASE",7),"^",UDDREPET)=""
 I ..Fsc S $P(CASE("CASE",7),"^",UDDREPET)=..Fsc.SummaryValidate("Fsc",.Error)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.Insurance</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.InsuranceS</StreamLocation>
<ExtentSize>2041</ExtentSize>
<Property name="Fsc">
<Selectivity>5.2596%</Selectivity>
</Property>
<Property name="Header">
<Selectivity>0.0750%</Selectivity>
</Property>
<Property name="Prio">
<Selectivity>25.0000%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^["MHRREG"]PTCASE</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.Header.CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="2">
<Expression>"CASE"</Expression>
</Subscript>
<Subscript name="3">
<Expression>7</Expression>
</Subscript>
<Subscript name="4">
<AccessType>$Piece</AccessType>
<Delimiter>"^"</Delimiter>
<Expression>{Prio}</Expression>
</Subscript>
<Data name="Fsc"/>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.Invoice">
<Description>
Invoices linked to MCA cases.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>63729,47413.444792</TimeChanged>
<TimeCreated>63729,46106</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_LINKED_INVOICE</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.Invoice</Default>
</Parameter>

<Property name="Header">
<Type>CaseMgmt.Header</Type>
<Cardinality>parent</Cardinality>
<Inverse>Invoices</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="DtLinked">
<Description>
the date on which the invoice was linked to the case</Description>
<Type>%Date</Type>
<SqlComputeCode> S {*}=+$H </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Date linked"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="Gid">
<Type>Registration.Patient</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
<Parameter name="CAPTION" value="GID"/>
</Property>

<ForeignKey name="Gid">
<Properties>Gid</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Grp">
<Description>
This column contains the financial group.</Description>
<Type>Dict.GroupProfile</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="Group"/>
</Property>

<ForeignKey name="Grp">
<Properties>Grp</Properties>
<ReferencedClass>Dict.GroupProfile</ReferencedClass>
</ForeignKey>

<Property name="Iin">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
<Parameter name="CAPTION" value="IIN"/>
</Property>

<Property name="InvNum">
<Description>
a reference to the Invoice.</Description>
<Type>BAR.Invoice</Type>
<Calculated>1</Calculated>
<SqlComputeCode><![CDATA[ N GRP,GID,IIN,RETURN S {*}="",GRP={Grp},GID={Gid},IIN={Iin} &SQL(SELECT InvNum INTO :RETURN FROM BAR.Invoice WHERE Grp=:GRP and Gid=:GID AND Iin=:IIN) S {*}=$G(RETURN) ]]></SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Invoice Number"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="TimeLinked">
<Description>
The time on which the invoice was linked to the case</Description>
<Type>%Time</Type>
<SqlComputeCode> S {*}=$P($H,",",2) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Time linked"/>
<Parameter name="FORMAT" value="4"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Grp,Gid,Iin</Properties>
<Unique>1</Unique>
</Index>

<ForeignKey name="Invoice">
<Properties>Grp,Gid,Iin</Properties>
<ReferencedClass>BAR.Invoice</ReferencedClass>
<ReferencedKey>ZIdCrossReference</ReferencedKey>
</ForeignKey>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.Invoice"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]PTCASE($P(id,"||",1),"INV",$P(id,"||",2),$P(id,"||",3),$P(id,"||",4))) 
]]></Implementation>
</Method>

<Query name="ByCase">
<Description>
Provided a Case number get information about the linked invoices.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Case:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT  T1.Grp, T1.InvNum,      
        T1.SerDt,
        T1.Id->PatNm As Patiemt,
        T1.Prov->Name As Provider, T1.Loc->Name As Location, 
        T1.BillingArea->Name As BillingArea,
        T1.TotChg, T1.FSC->Mnemonic As Fsc, T1.InvBal, T1.VisNum As ApptNum,
        T2.Number As AdmitNumber,
        T1.CorrInvNum, T1.OrigInvNum
FROM    CaseMgmt.Invoice T0 
        JOIN BAR.Invoice T1 ON (T1.Grp=T0.Grp AND T1.Gid=T0.Gid 
                                AND T1.Iin=T0.Iin)
         LEFT JOIN VM.Visit T2 ON
        (T2.Grp = T1.AdtVisPtrIgrp AND T2.Vid=T1.AdtVisPtrVid )

WHERE   T0.Header=:Case                               
         AND DBMS.Tools_GrpPassSecurity(T0.Grp,USER)=1 
]]></SqlQuery>
<Parameter name="ROWSPEC" value="Grp:%Integer,InvNum:%Integer,SerDt:%Date,Patiemt:%String,Provider:%String,Location:%String,BillingArea:%String,TotChg:%Currency,Fsc:%String,InvBal:%Currency,ApptNum:%Integer,AdmitNumber:%Integer,CorrInvNum:%Integer,OrigInvNum:%Integer"/>
</Query>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR,SECID,SECCAT,BARTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM CaseMgmt.Invoice)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR,SECID,SECCAT,BARTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.InvoiceS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCR]PTCASE</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.Header.CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="2">
<Expression>"INV"</Expression>
</Subscript>
<Subscript name="3">
<Expression>{Grp}</Expression>
</Subscript>
<Subscript name="4">
<Expression>{Gid}</Expression>
</Subscript>
<Subscript name="5">
<Expression>{Iin}</Expression>
<StartValue>100</StartValue>
</Subscript>
<Data name="DtLinked">
<Delimiter>","</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="TimeLinked">
<Delimiter>","</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.InvoicePurgeList">
<Description>
a list of invoices to be purged</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63729,47413.452792</TimeChanged>
<TimeCreated>63729,46107</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_PURGE_INVOICE</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.InvoicePurgeList</Default>
</Parameter>

<Property name="CaseNum">
<Description>
This column contains the case number.</Description>
<Type>CaseMgmt.Header</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="Number"/>
</Property>

<ForeignKey name="CaseNum">
<Properties>CaseNum</Properties>
<ReferencedClass>CaseMgmt.Header</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Gid">
<Description>
A reference to the guarantor</Description>
<Type>Registration.Patient</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
<Parameter name="CAPTION" value="GID"/>
</Property>

<ForeignKey name="Gid">
<Properties>Gid</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Grp">
<Description>
This column contains the financial group.</Description>
<Type>Dict.GroupProfile</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
<Parameter name="CAPTION" value="Group"/>
</Property>

<ForeignKey name="Grp">
<Properties>Grp</Properties>
<ReferencedClass>Dict.GroupProfile</ReferencedClass>
</ForeignKey>

<Property name="Iin">
<Description>
An internal Invoice </Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>5</SqlColumnNumber>
<Parameter name="CAPTION" value="IIN"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>CaseNum,Grp,Gid,Iin</Properties>
<Unique>1</Unique>
</Index>

<ForeignKey name="Invoice">
<Properties>Grp,Gid,Iin</Properties>
<ReferencedClass>BAR.Invoice</ReferencedClass>
<ReferencedKey>ZIdCrossReference</ReferencedKey>
</ForeignKey>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.InvoicePurgeList"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]PTCASEPU(0,"CASES",$P(id,"||",1),$P(id,"||",2),$P(id,"||",3),$P(id,"||",4))) 
]]></Implementation>
</Method>

<Query name="ByGrp">
<Description>
</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Grp:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT  T2.InvNum,
        T1.Gid->PatNm,
        T1.CaseNum,
        T2.SerDt,
        T2.InvCrePd,
        T2.InvBal

FROM    CaseMgmt.InvoicePurgeList T1 
        JOIN BAR.Invoice T2 ON 
          (T1.Grp = T2.Grp AND T1.Gid = T2.Gid AND T1.Iin = T2.Iin)

WHERE   T1.Grp = :Grp]]></SqlQuery>
<Parameter name="ROWSPEC" value="InvNum,PatNm,CaseNum,SerDt,InvCrePd,InvBal"/>
</Query>

<Method name="%KillExtent">
<Description>
</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR,BARTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 I '$D(SYE) D ^UDDREG
 K ^[UCR]PTCASEPU(0,"CASES")   ;Data Global
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR,BARTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.InvoicePurgeListS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCR]PTCASEPU</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>0</Expression>
</Subscript>
<Subscript name="2">
<Expression>"CASES"</Expression>
</Subscript>
<Subscript name="3">
<Expression>{CaseNum}</Expression>
</Subscript>
<Subscript name="4">
<Expression>{Grp}</Expression>
</Subscript>
<Subscript name="5">
<Expression>{Gid}</Expression>
</Subscript>
<Subscript name="6">
<Expression>{Iin}</Expression>
</Subscript>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.Package">
<Description>
This table provides information about the packages linked to a case.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67415,60367.658628</TimeChanged>
<TimeCreated>63729,46107</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_PKG</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.Package</Default>
</Parameter>

<Property name="Header">
<Type>CaseMgmt.Header</Type>
<Cardinality>parent</Cardinality>
<Inverse>Packages</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="BeginDt">
<Description>
 the beginning date for the package</Description>
<Type>%Date</Type>
</Property>

<Property name="EndDt">
<Description>
the ending date for the package</Description>
<Type>%Date</Type>
</Property>

<Property name="Comment">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Counter">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="Package">
<Description>
a reference to the package dictionary</Description>
<Type>Dict.Package</Type>
</Property>

<ForeignKey name="Package">
<Properties>Package</Properties>
<ReferencedClass>Dict.Package</ReferencedClass>
</ForeignKey>

<Property name="EffDt">
<Type>%Date</Type>
</Property>

<Property name="ExpDt">
<Type>%Date</Type>
</Property>

<Property name="OccNum">
<Type>%Integer</Type>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Counter</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.Package"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]PTCASE($P(id,"||",1),"PKG","LIST",$P(id,"||",2))) 
]]></Implementation>
</Method>

<Query name="ByCase">
<Description>
Provided a case get a list of packages</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Case:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT     %Id As Rowid,Package->Description As PackageDescription,
           Package->PackageId As PackageId,EffDt,ExpDt,BeginDt,EndDt,Comment,
           Package->Type As PackageType,
           Package->System_DeactFlag As PackageDeactFlag,
           Package->DeletedFlag

FROM       CaseMgmt.Package

WHERE      Header=:Case]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Rowid:%String,PackageDescription:%String,PackageId:%String,EffDt:%Date,ExpDt:%Date,BeginDt:%Date,EndDt:%Date,Comment:%String,PackageType:%Integer,PackageDeactFlag:%String,DeletedFlag:%String"/>
</Query>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>CASE:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET,UDDREPET</PublicList>
<Implementation><![CDATA[
 S ..BeginDt=$P($G(CASE("PKG","LIST",UDDREPET,0)),"^",6)
 S ..Comment=$P($G(CASE("PKG","LIST",UDDREPET,0)),"^",4)
 S ..Counter=$G(PKGCOUNT)
 S ..EffDt=$P($G(CASE("PKG","LIST",UDDREPET,0)),"^",2)
 S ..EndDt=$P($G(CASE("PKG","LIST",UDDREPET,0)),"^",7)
 S ..ExpDt=$P($G(CASE("PKG","LIST",UDDREPET,0)),"^",3)
 S ..OccNum=$P($G(CASE("PKG","LIST",UDDREPET,0)),"^",5)
 D ..PackageSetObjectId($P($G(CASE("PKG","LIST",UDDREPET,0)),"^",1)) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[CASE:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>PKGCOUNT,UDDREPET</PublicList>
<Implementation><![CDATA[
 S PKGCOUNT=..Counter
 S $P(CASE("PKG","LIST",UDDREPET,0),"^",6)=..BeginDt
 S $P(CASE("PKG","LIST",UDDREPET,0),"^",4)=..Comment
 S $P(CASE("PKG","LIST",UDDREPET,0),"^",2)=..EffDt
 S $P(CASE("PKG","LIST",UDDREPET,0),"^",7)=..EndDt
 S $P(CASE("PKG","LIST",UDDREPET,0),"^",3)=..ExpDt
 S $P(CASE("PKG","LIST",UDDREPET,0),"^",5)=..OccNum
 S $P(CASE("PKG","LIST",UDDREPET,0),"^",1)=""
 I ..Package S $P(CASE("PKG","LIST",UDDREPET,0),"^",1)=..Package.SummaryValidate("Package",.Error) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..Comment["^") Q -1
 Q 1 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.Package</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.PackageS</StreamLocation>
<ExtentSize>2</ExtentSize>
<Property name="CasePkgBegDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="CasePkgEndDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Comment">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Counter">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="DictPackage">
<Selectivity>50.0000%</Selectivity>
</Property>
<Property name="EffDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="ExpDt">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Header">
<Selectivity>50.0000%</Selectivity>
</Property>
<Property name="OccNum">
<Selectivity>100.0000%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<ConditionalWithHostVars/>
<Global>^["MHRREGORIG"]PTCASE</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.Header.CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="2">
<Expression>"PKG"</Expression>
</Subscript>
<Subscript name="3">
<Expression>"LIST"</Expression>
</Subscript>
<Subscript name="4">
<Expression>{Counter}</Expression>
<LoopInitValue>.999</LoopInitValue>
<StopValue>10</StopValue>
</Subscript>
<Subscript name="5">
<Expression>0</Expression>
</Subscript>
<Data name="BeginDt">
<Delimiter>"^"</Delimiter>
<Piece>6</Piece>
</Data>
<Data name="Comment">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="EffDt">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="EndDt">
<Delimiter>"^"</Delimiter>
<Piece>7</Piece>
</Data>
<Data name="ExpDt">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="OccNum">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="Package">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.PhoneList">
<Description>
MCA Case Phone List</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>63729,47213.604379</TimeChanged>
<TimeCreated>63729,46107</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_PHONE_LIST</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.PhoneList</Default>
</Parameter>

<Property name="Header">
<Type>CaseMgmt.Header</Type>
<Cardinality>parent</Cardinality>
<Inverse>PhoneLists</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Comments">
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="Memo">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Nm">
<Description>
the name of the contact</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode> S {*}=$Case({Type},3:$P($G(^DE(3,{Val},0)),"^",1),471:$P(^DE(471,{Val},0),"^",1),"ID":$P(^[UCR]PT({Val},0),"^",1),:{Val}) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Name"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="Note">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Rel">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TelNum">
<Description>
the telephone number of the contact</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode> S {*}=$Case({Type},3:$P($G(^DE(3,{Val},4)),"^",3),471:$P(^DE(471,{Val},1),"^",6),"ID":$P(^[UCR]PT({Val},0),"^",8),"NM":$P(^[UCR]PTCASE({Header},"TEL",{Type},{Val},1),"^",1),:"") </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Telephone"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="Type">
<Description><![CDATA[
This column provide an indication of the type of phone list entry.
<UL>
 <LI>NM  - Unregistered Patient
 <LI>3   - Provider
 <LI>471 - Vendor
 <LI>ID  - Registered Patient
</UL>
</UL>]]></Description>
<Type>%String</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/3/471/ID/NM/"/>
</Property>

<Property name="Val">
<Description><![CDATA[
The internal value of the contact based on <property>Type</property>]]></Description>
<Type>%String</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Type,Val</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.PhoneList"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]PTCASE($P(id,"||",1),"TEL",$P(id,"||",2),$P(id,"||",3))) 
]]></Implementation>
</Method>

<Query name="ByCase">
<Description>
</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Case:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT   %Id As Rowid,Type,Val,Rel As Relation,Nm,
         DBMS.Tools_FormatTelephone(TelNum) As Telephone,
         Comments,Note,Memo

FROM     CaseMgmt.PhoneList
WHERE    Header=:Case</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Rowid:%String,Type:%String,Val:%String,Relation:%String,Nm:%String,Telephone:%String,Comments:%String,Note:%String,Memo:%String"/>
</Query>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM CaseMgmt.PhoneList)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>CASE:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>TYPE,VAL</PublicList>
<Implementation><![CDATA[
 S (..Comments,WP)="" S N="",CNT=0 F  S N=$O(CASE("TEL",TYPE,VAL,"COM",N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..Comments=WP
 S ..Memo=$P($G(CASE("TEL",TYPE,VAL,0)),"^",3)
 S ..Note=$P($G(CASE("TEL",TYPE,VAL,0)),"^",2)
 S ..Rel=$P($G(CASE("TEL",TYPE,VAL,0)),"^",1)
 S ..Type=$G(TYPE)
 S ..Val=$G(VAL) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[CASE:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>TYPE,VAL,TYPE,VAL</PublicList>
<Implementation><![CDATA[
 S TYPE=..Type
 S VAL=..Val
 S N="" F  S N=$O(CASE("TEL",TYPE,VAL,"COM",N)) Q:N=""  K CASE("TEL",TYPE,VAL,"COM",N)
 I $ZSTRIP(..Comments,"*W")'="" F N=1:1:$L(..Comments,$C(13,10)) S CASE("TEL",TYPE,VAL,"COM",N)=$P(..Comments,$C(13,10),N)
 S $P(CASE("TEL",TYPE,VAL,0),"^",3)=..Memo
 S $P(CASE("TEL",TYPE,VAL,0),"^",2)=..Note
 S $P(CASE("TEL",TYPE,VAL,0),"^",1)=..Rel 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..Memo["^") Q -1
 I (..Note["^") Q -1
 I (..Rel["^") Q -1
 I  Q -1
 I  Q -1
 Q 1 
]]></Implementation>
</Method>

<Trigger name="WordProcessingInsert">
<Code>
 N CNUM,TYPE,VAL,N S CNUM=$P({Header},"||",1),TYPE={Type},VAL={Val}
 I {Comments}'="" F N=1:1:$L({Comments},$C(13,10)) S ^[UCR,SYR]PTCASE(CNUM,"TEL",TYPE,VAL,"COM",N)=$P({Comments},$C(13,10),N)</Code>
<Event>INSERT</Event>
<Order>-10</Order>
</Trigger>

<Trigger name="WordProcessingUpdate">
<Code>
 N CNUM,TYPE,VAL,N S CNUM=$P({Header},"||",1),TYPE={Type},VAL={Val}
 I {Comments*C} D
 .K ^[UCR,SYR]PTCASE(CNUM,"TEL",TYPE,VAL,"COM")  ;Init data for Comments
 .I {Comments}'="" F N=1:1:$L({Comments},$C(13,10)) S ^[UCR,SYR]PTCASE(CNUM,"TEL",TYPE,VAL,"COM",N)=$P({Comments},$C(13,10),N)</Code>
<Event>UPDATE</Event>
<Order>-10</Order>
</Trigger>

<Trigger name="WordProcessingDelete">
<Code>
 N CNUM,TYPE,VAL,N S CNUM=$P({Header},"||",1),TYPE={Type},VAL={Val}
 K ^[UCR,SYR]PTCASE(CNUM,"TEL",TYPE,VAL,"COM")  ;Init data for Comments</Code>
<Event>DELETE</Event>
<Order>-10</Order>
</Trigger>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.PhoneList</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.PhoneListS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCR]PTCASE</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.Header.CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="2">
<Expression>"TEL"</Expression>
</Subscript>
<Subscript name="3">
<Expression>{Type}</Expression>
</Subscript>
<Subscript name="4">
<Expression>{Val}</Expression>
</Subscript>
<Subscript name="5">
<Expression>0</Expression>
</Subscript>
<Data name="Comments">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^[UCR]PTCASE({L1},"TEL",{L3},{L4},"COM",sub)) Q:sub=""  S data=data_$G(^[UCR]PTCASE({L1},"TEL",{L3},{L4},"COM",sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
<Data name="Memo">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="Note">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="Rel">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.Referral">
<Description>
Referrals linked to MCA cases.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>67414,3806.829623</TimeChanged>
<TimeCreated>63729,46107</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_LINKED_REFERRAL</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.Referral</Default>
</Parameter>

<Property name="Header">
<Type>CaseMgmt.Header</Type>
<Cardinality>parent</Cardinality>
<Inverse>Referrals</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="DtLinked">
<Description>
This column contains the date on which the referral was linked to the case.</Description>
<Type>%Date</Type>
<SqlComputeCode> S {*}=+$H </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Date linked"/>
<Parameter name="MAXVAL" value="+$H"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="HmoNum">
<Type>Dict.HmoProfile</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="HMO Number"/>
</Property>

<ForeignKey name="HmoNum">
<Properties>HmoNum</Properties>
<ReferencedClass>Dict.HmoProfile</ReferencedClass>
</ForeignKey>

<Property name="Id">
<Type>Registration.Patient</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<ForeignKey name="Id">
<Properties>Id</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Rin">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
</Property>

<Property name="TimeLinked">
<Description>
the time on which the referral was linked</Description>
<Type>%Time</Type>
<SqlComputeCode> S {*}=$P($H,",",2) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Time linked"/>
<Parameter name="FORMAT" value="4"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>HmoNum,Id,Rin</Properties>
<Unique>1</Unique>
</Index>

<ForeignKey name="Referral">
<Properties>HmoNum,Id,Rin</Properties>
<ReferencedClass>Referrals.Referral</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.Referral"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^["MHRREGORIG"]PTCASE($P(id,"||",1),"REF",$P(id,"||",2),$P(id,"||",3),$P(id,"||",4)))
]]></Implementation>
</Method>

<Query name="ByCase">
<Description>
Provided a Case get the linked referrals. 
</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Case:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT                  
       T2.RefNum,
       T2.RefType->Mnemonic As RefTypeMnemonic,
       T2.RefType->Name As ReferralType,
       COALESCE(T2.ReferToBa->Name,T2.ReferToDiv->Name,T2.ReferToLoc->Name,
                T2.ReferToProv->Name,T2.ReferToPhy->Name,T2.ReferToVnd->Name)
       As ReferTo,
       %External(T2.IntExt) As InternalExternal,
       T2.ValidFromDt,T2.ValidToDt,
       T2.Status->Name As Status,
       T2.Status->Mnemonic As StatusMnemonic,
       T2.Descr,
       T2.ExtNum,
       T2.OpenFsc->Mnemonic As FSCMnemonic,
       T2.OpenFsc->Name As OpenFSC

FROM      CaseMgmt.Referral T1 
          JOIN Referrals.Referral T2 ON (T2.Hmo=T1.HmoNum AND
                                         T2.Id =T1.Id AND
                                         T2.Rin=T1.Rin)
WHERE   T1.Header=:Case]]></SqlQuery>
<Parameter name="ROWSPEC" value="RefNum:%Integer,RefTypeMnemonic:%String,ReferralType:%String,ReferTo:%String,InternalExternal:%String,ValidFromDt:%Date,ValidToDt:%Date,Status:%String,StatusMnemonic:%String,Descr:%String,Extnum:%String,FSCMnemonic:%String,OpenFSC:%String"/>
</Query>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR,HMOTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM CaseMgmt.Referral)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.ReferralS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^["MHRREGORIG"]PTCASE</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.Header.CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="2">
<Expression>"REF"</Expression>
</Subscript>
<Subscript name="3">
<Expression>{HmoNum}</Expression>
</Subscript>
<Subscript name="4">
<Expression>{Id}</Expression>
</Subscript>
<Subscript name="5">
<Expression>{Rin}</Expression>
</Subscript>
<Data name="DtLinked">
<Delimiter>","</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="TimeLinked">
<Delimiter>","</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.Report">
<Description>
Query this table for case reports data including case number, report date,
report time, date printed, report comment, etc.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63729,47213.687379</TimeChanged>
<TimeCreated>63729,46107</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_REPORT</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.Report</Default>
</Parameter>

<Property name="CaseNum">
<Type>CaseMgmt.Header</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="CaseNum">
<Properties>CaseNum</Properties>
<ReferencedClass>CaseMgmt.Header</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Num">
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Report #"/>
</Property>

<Property name="PrintedAtTime">
<Type>%Time</Type>
<Parameter name="CAPTION" value="Printed at Time"/>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="PrintedOnDt">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Printed on Date"/>
</Property>

<Property name="ReportComment">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="60"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReportDt">
<Type>%Date</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<Property name="ReportIni">
<Description>
.</Description>
<Type>SecurityPlus.Usr</Type>
</Property>

<ForeignKey name="ReportIni">
<Properties>ReportIni</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="ReportTime">
<Type>%Time</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="ReportType">
<Type>%String</Type>
<Parameter name="CAPTION" value="Type"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>CaseNum,ReportDt,ReportTime</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.Report"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]PTCASE($P(id,"||",1),"REPORT",$P(id,"||",2),$P(id,"||",3))) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>CASE:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 D ..CaseNumSetObjectId($G(CNUM))
 S ..Num=$P($G(CASE),"^",4)
 S ..PrintedAtTime=$P($G(CASE),"^",2)
 S ..PrintedOnDt=$P($G(CASE),"^",1)
 S ..ReportComment=$P($G(CASE),"^",3)
 D ..ReportIniSetObjectId($P($G(CASE),"^",2))
 S ..ReportType=$P($G(CASE),"^",5) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[CASE:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>CNUM</PublicList>
<Implementation><![CDATA[
 S CNUM=""
 I ..CaseNum,##class(%Dictionary.CompiledMethod).%OpenId("CaseMgmt.Header||SummaryValidate") S CNUM=..CaseNum.SummaryValidate("CaseNum",.Error)
 E   I ..CaseNum S CNUM=..CaseNum.%Id()
 S $P(CASE,"^",4)=..Num
 S $P(CASE,"^",2)=..PrintedAtTime
 S $P(CASE,"^",1)=..PrintedOnDt
 S $P(CASE,"^",3)=..ReportComment
 S $P(CASE,"^",2)=""
 I ..ReportIni,##class(%Dictionary.CompiledMethod).%OpenId("SecurityPlus.Usr||SummaryValidate") S $P(CASE,"^",2)=..ReportIni.SummaryValidate("ReportIni",.Error)
 E   I ..ReportIni S $P(CASE,"^",2)=..ReportIni.%Id()
 S $P(CASE,"^",5)=..ReportType 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..ReportComment["^") Q -1
 I (..ReportType["^") Q -1
 Q 1 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.Report</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.ReportS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCR]PTCASE</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseNum}</Expression>
</Subscript>
<Subscript name="2">
<Expression>"REPORT"</Expression>
</Subscript>
<Subscript name="3">
<Expression>{ReportDt}</Expression>
</Subscript>
<Subscript name="4">
<Expression>{ReportTime}</Expression>
</Subscript>
<Subscript name="5">
<Expression>0</Expression>
</Subscript>
<Data name="Num">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="PrintedAtTime">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="PrintedOnDt">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="ReportComment">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="ReportIni">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="ReportType">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.Review">
<Description>
Query this table for case review information.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67352,64294.048073</TimeChanged>
<TimeCreated>63729,46108</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_REVIEW</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.Review</Default>
</Parameter>

<Property name="Header">
<Type>CaseMgmt.Header</Type>
<Cardinality>parent</Cardinality>
<Inverse>Reviews</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Barrier">
<Type>Dict.CmBarrier</Type>
</Property>

<ForeignKey name="Barrier">
<Properties>Barrier</Properties>
<ReferencedClass>Dict.CmBarrier</ReferencedClass>
</ForeignKey>

<Property name="Comments">
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="Handicap">
<Type>Dict.CmHandicap</Type>
</Property>

<ForeignKey name="Handicap">
<Properties>Handicap</Properties>
<ReferencedClass>Dict.CmHandicap</ReferencedClass>
</ForeignKey>

<Property name="Ini">
<Description>
This column contains the USERNAME of the person that edited the record.</Description>
<Type>SecurityPlus.Usr</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Initials"/>
</Property>

<ForeignKey name="Ini">
<Properties>Ini</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Initiated">
<Type>%Date</Type>
</Property>

<Property name="Lev">
<Type>Dict.CmCaseReviewLevel</Type>
<Parameter name="CAPTION" value="Level"/>
</Property>

<ForeignKey name="Lev">
<Properties>Lev</Properties>
<ReferencedClass>Dict.CmCaseReviewLevel</ReferencedClass>
</ForeignKey>

<Property name="Mil">
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Mileage"/>
</Property>

<Property name="MilCost">
<Description>
the calculated mileage cost</Description>
<Type>DBMS.Currency</Type>
<Calculated>1</Calculated>
<SqlComputeCode> S {*}={Mil}*{MilRate} </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Mileage Cost"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="MilDescr">
<Type>%String</Type>
<Parameter name="CAPTION" value="Mileage Description"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MilRate">
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Mileage Rate"/>
</Property>

<Property name="Note">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OthDescr">
<Type>%String</Type>
<Parameter name="CAPTION" value="Other Expense Description"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OthExp">
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Other Expenses"/>
</Property>

<Property name="Outcome">
<Type>Dict.CmCaseReviewOutcome</Type>
<Required>1</Required>
</Property>

<ForeignKey name="Outcome">
<Properties>Outcome</Properties>
<ReferencedClass>Dict.CmCaseReviewOutcome</ReferencedClass>
</ForeignKey>

<Property name="Problem">
<Description>
 </Description>
<Type>Dict.CmProblem</Type>
</Property>

<ForeignKey name="Problem">
<Properties>Problem</Properties>
<ReferencedClass>Dict.CmProblem</ReferencedClass>
</ForeignKey>

<Property name="Resolved">
<Type>%Date</Type>
</Property>

<Property name="Reviewer">
<Type>Dict.CmCaseManager</Type>
<Required>1</Required>
</Property>

<ForeignKey name="Reviewer">
<Properties>Reviewer</Properties>
<ReferencedClass>Dict.CmCaseManager</ReferencedClass>
</ForeignKey>

<Property name="RevDt">
<Description>
 </Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Review Date"/>
<Parameter name="MINVAL" value="+$H"/>
</Property>

<Property name="RevNum">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="Review Number"/>
</Property>

<Property name="RevTime">
<Type>%Time</Type>
<Parameter name="CAPTION" value="Review Time"/>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="Setting">
<Type>Dict.CmCaseReviewSetting</Type>
<Required>1</Required>
</Property>

<ForeignKey name="Setting">
<Properties>Setting</Properties>
<ReferencedClass>Dict.CmCaseReviewSetting</ReferencedClass>
</ForeignKey>

<Property name="TelCost">
<Description>
the calculated telephone cost</Description>
<Type>DBMS.Currency</Type>
<Calculated>1</Calculated>
<SqlComputeCode> s {*}={TelTime}*{TelRate} </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Telephone Cost"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="TelDescr">
<Type>%String</Type>
<Parameter name="CAPTION" value="Telephone Time Description"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TelRate">
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Telephone Rate"/>
</Property>

<Property name="TelTime">
<Type>%String</Type>
<Parameter name="CAPTION" value="Telephone Time"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="PATTERN" value="1(1N,1N1&quot;:&quot;2N,2N,2N1&quot;:&quot;2N)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TimeCost">
<Description>
the calculated time cost</Description>
<Type>DBMS.Currency</Type>
<Calculated>1</Calculated>
<SqlComputeCode> S {*}={TimeSpent}/60*{TimeRate} </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Time Cost"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="TimeRate">
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Time Rate"/>
</Property>

<Property name="TimeSpent">
<Type>%String</Type>
<Parameter name="CAPTION" value="Time Spent"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="PATTERN" value="1(1N,1N1&quot;:&quot;2N,2N,2N1&quot;:&quot;2N)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TotCost">
<Description>
the calculated total costs</Description>
<Type>DBMS.Currency</Type>
<Calculated>1</Calculated>
<SqlComputeCode> S {*}=({TimeSpent}/60*{TimeRate})+({Mil}*{MilRate})+({TelTime}*{TelRate})+({OthExp}) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Total Cost"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="TotDollarUsage">
<Type>DBMS.Currency</Type>
</Property>

<Property name="Type">
<Type>Dict.CmCaseReviewType</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Case Review Type"/>
</Property>

<ForeignKey name="Type">
<Properties>Type</Properties>
<ReferencedClass>Dict.CmCaseReviewType</ReferencedClass>
</ForeignKey>

<Property name="UpdatedDay">
<Description>
This column retrieves the number of days between the Case creation date and the
last Case Review note update date.  This number is displayed as 4 digits and is
padded with leading zeros.  For example 3 days will be displayed as 0003.</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {UpdatedDay}=##class(CaseMgmt.Review).UpdatedDayDer($p({Header},"||",1),{RevNum})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Day Updated"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
//  ;BAR_B_CASE_REVIEW.UPDATED_DAY}, SqlComputed ];

]]></Content>
</UDLText>

<Method name="UpdatedDayGet">
<Description>
 This method is used as interface when using Cache Objects for the derived code for the column UpdatedDay.</Description>
<Final>1</Final>
<Internal>1</Internal>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 I ..Header="" q ""  ;New instance of object
 N X S X=..UpdatedDayDer($P(..Header,"||",1),..RevNum)
 Q X
]]></Implementation>
</Method>

<Method name="UpdatedDayDer">
<Description>
 This method is used as SQL Compute code for the derived code for the column UpdatedDay.
[Previously private]</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>CNUM,REVNUM</FormalSpec>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 
 N Return,XIDXNL,SQLD
 S Return=$ZP(^["MHRREGORIG"]PTCASE(CNUM,"REV",REVNUM,99999))  ;BAR_B_CASE_REVIEW.UPDATED_DAY
 I Return<50000 S Return=""
 E  S Return=$TR($J(Return-$P(^["MHRREGORIG"]PTCASE(CNUM,"CASE",1),"^",2)+1,4)," ","0")

 Quit $g(Return)
]]></Implementation>
</Method>

<Property name="UpdatedDt">
<Description>
</Description>
<Type>%Date</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {UpdatedDt}=##class(CaseMgmt.Review).UpdatedDtDer($p({Header},"||",1),{RevNum})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Date Updated"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
//  ;BAR_B_CASE_REVIEW.UPDATED_DT}, SqlComputed ];

]]></Content>
</UDLText>

<Method name="UpdatedDtGet">
<Description>
 This method is used as interface when using Cache Objects for the derived code for the column UpdatedDt.</Description>
<Final>1</Final>
<Internal>1</Internal>
<ReturnType>%Date</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 I ..Header="" q ""  ;New instance of object
 N X S X=..UpdatedDtDer($P(..Header,"||",1),..RevNum)
 Q X
]]></Implementation>
</Method>

<Method name="UpdatedDtDer">
<Description>
 This method is used as SQL Compute code for the derived code for the column UpdatedDt.
[Previously private]</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>CNUM,REVNUM</FormalSpec>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 
 N Return,XIDXNL,SQLD
 S Return=$ZP(^["MHRREGORIG"]PTCASE(CNUM,"REV",REVNUM,99999))  ;BAR_B_CASE_REVIEW.UPDATED_DT
 I Return<50000 S Return=""

 Quit $g(Return)
]]></Implementation>
</Method>

<Property name="UpdatedTime">
<Description>
</Description>
<Type>%Time</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {UpdatedTime}=##class(CaseMgmt.Review).UpdatedTimeDer($p({Header},"||",1),{RevNum})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Time Updated"/>
<Parameter name="FORMAT" value="4"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
//  ;BAR_B_CASE_REVIEW.UPDATED_TIME}, SqlComputed ];

]]></Content>
</UDLText>

<Method name="UpdatedTimeGet">
<Description>
 This method is used as interface when using Cache Objects for the derived code for the column UpdatedTime.</Description>
<Final>1</Final>
<Internal>1</Internal>
<ReturnType>%Time</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 I ..Header="" q ""  ;New instance of object
 N X S X=..UpdatedTimeDer($P(..Header,"||",1),..RevNum)
 Q X
]]></Implementation>
</Method>

<Method name="UpdatedTimeDer">
<Description>
 This method is used as SQL Compute code for the derived code for the column UpdatedTime.
[Previously private]</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>CNUM,REVNUM</FormalSpec>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 
 N Return,XIDXNL,SQLD
 S Return=$ZP(^["MHRREGORIG"]PTCASE(CNUM,"REV",REVNUM,99999))  ;BAR_B_CASE_REVIEW.UPDATED_TIME
 I Return<50000 S Return=""
 E  S Return=$ZP(^["MHRREGORIG"]PTCASE(CNUM,"REV",REVNUM,Return,""))

 Quit $g(Return)
]]></Implementation>
</Method>

<Property name="Wp1">
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="Wp2">
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="Wp3">
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="Wp4">
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="Wp5">
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="Wp6">
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="Wp7">
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="Wp8">
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>RevNum</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.Review"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^["MHRREGORIG"]PTCASE($P(id,"||",1),"REV",$P(id,"||",2)))
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>CASEREV:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 D ..BarrierSetObjectId($P($G(CASEREV(10)),"_",1))
 S (..Comments,WP)="" S N="",CNT=0 F  S N=$O(CASEREV(20,N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..Comments=WP
 D ..HandicapSetObjectId($P($G(CASEREV(11)),"_",1))
 D ..IniSetObjectId($P($G(CASEREV(0)),"^",9))
 S ..Initiated=$P($P($G(CASEREV(12)),"_",1),"^",2)
 D ..LevSetObjectId($P($G(CASEREV(0)),"^",5))
 S ..Mil=$P($G(CASEREV(3)),"^",1)
 S ..MilDescr=$P($G(CASEREV(3)),"^",3)
 S ..MilRate=$P($G(CASEREV(3)),"^",2)
 S ..Note=$P($G(CASEREV(1)),"^",1)
 S ..OthDescr=$P($G(CASEREV(5)),"^",2)
 S ..OthExp=$P($G(CASEREV(5)),"^",1)
 D ..OutcomeSetObjectId($P($G(CASEREV(0)),"^",3))
 D ..ProblemSetObjectId($P($P($G(CASEREV(12)),"_",1),"^",1))
 S ..Resolved=$P($P($G(CASEREV(12)),"_",1),"^",3)
 S ..RevDt=$P($G(CASEREV(0)),"^",7)
 S ..RevNum=$G(REVNUM)
 S ..RevTime=$P($G(CASEREV(0)),"^",8)
 D ..ReviewerSetObjectId($P($G(CASEREV(0)),"^",4))
 D ..SettingSetObjectId($P($G(CASEREV(0)),"^",2))
 S ..TelDescr=$P($G(CASEREV(4)),"^",3)
 S ..TelRate=$P($G(CASEREV(4)),"^",2)
 S ..TelTime=$P($G(CASEREV(4)),"^",1)
 S ..TimeRate=$P($G(CASEREV(2)),"^",2)
 S ..TimeSpent=$P($G(CASEREV(2)),"^",1)
 S ..TotDollarUsage=$P($G(CASEREV(0)),"^",6)
 D ..TypeSetObjectId($P($G(CASEREV(0)),"^",1))
 S (..Wp1,WP)="" S N="",CNT=0 F  S N=$O(CASEREV("WP1",N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..Wp1=WP
 S (..Wp2,WP)="" S N="",CNT=0 F  S N=$O(CASEREV("WP2",N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..Wp2=WP
 S (..Wp3,WP)="" S N="",CNT=0 F  S N=$O(CASEREV("WP3",N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..Wp3=WP
 S (..Wp4,WP)="" S N="",CNT=0 F  S N=$O(CASEREV("WP4",N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..Wp4=WP
 S (..Wp5,WP)="" S N="",CNT=0 F  S N=$O(CASEREV("WP5",N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..Wp5=WP
 S (..Wp6,WP)="" S N="",CNT=0 F  S N=$O(CASEREV("WP6",N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..Wp6=WP
 S (..Wp7,WP)="" S N="",CNT=0 F  S N=$O(CASEREV("WP7",N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..Wp7=WP
 S (..Wp8,WP)="" S N="",CNT=0 F  S N=$O(CASEREV("WP8",N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..Wp8=WP
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[CASEREV:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>REVNUM</PublicList>
<Implementation><![CDATA[
 S REVNUM=..RevNum
 S $P(CASEREV(10),"_",1)=""
 I ..Barrier S $P(CASEREV(10),"_",1)=..Barrier.SummaryValidate("Barrier",.Error)
 S N="" F  S N=$O(CASEREV(20,N)) Q:N=""  K CASEREV(20,N)
 I $ZSTRIP(..Comments,"*W")'="" F N=1:1:$L(..Comments,$C(13,10)) S CASEREV(20,N)=$P(..Comments,$C(13,10),N)
 S $P(CASEREV(11),"_",1)=""
 I ..Handicap S $P(CASEREV(11),"_",1)=..Handicap.SummaryValidate("Handicap",.Error)
 S $P(CASEREV(0),"^",9)=""
 I ..Ini,##class(%Dictionary.CompiledMethod).%OpenId("SecurityPlus.Usr||SummaryValidate") S $P(CASEREV(0),"^",9)=..Ini.SummaryValidate("Ini",.Error)
 E   I ..Ini S $P(CASEREV(0),"^",9)=..Ini.%Id()
 S FINT=""
 S FINT=..Initiated
 S %1=$P($G(CASEREV(12)),"_",1),$P(%1,"^",2)=FINT,$P(CASEREV(12),"_",1)=%1
 S $P(CASEREV(0),"^",5)=""
 I ..Lev S $P(CASEREV(0),"^",5)=..Lev.SummaryValidate("Lev",.Error)
 S $P(CASEREV(3),"^",1)=..Mil
 S $P(CASEREV(3),"^",3)=..MilDescr
 S $P(CASEREV(3),"^",2)=..MilRate
 S $P(CASEREV(1),"^",1)=..Note
 S $P(CASEREV(5),"^",2)=..OthDescr
 S $P(CASEREV(5),"^",1)=..OthExp
 S $P(CASEREV(0),"^",3)=""
 I ..Outcome S $P(CASEREV(0),"^",3)=..Outcome.SummaryValidate("Outcome",.Error)
 S FINT=""
 I ..Problem S FINT=..Problem.Id
 S %1=$P($G(CASEREV(12)),"_",1),$P(%1,"^",1)=FINT,$P(CASEREV(12),"_",1)=%1
 S FINT=""
 S FINT=..Resolved
 S %1=$P($G(CASEREV(12)),"_",1),$P(%1,"^",3)=FINT,$P(CASEREV(12),"_",1)=%1
 S $P(CASEREV(0),"^",7)=..RevDt
 S $P(CASEREV(0),"^",8)=..RevTime
 S $P(CASEREV(0),"^",4)=""
 I ..Reviewer S $P(CASEREV(0),"^",4)=..Reviewer.SummaryValidate("Reviewer",.Error)
 S $P(CASEREV(0),"^",2)=""
 I ..Setting S $P(CASEREV(0),"^",2)=..Setting.SummaryValidate("Setting",.Error)
 S $P(CASEREV(4),"^",3)=..TelDescr
 S $P(CASEREV(4),"^",2)=..TelRate
 S $P(CASEREV(4),"^",1)=..TelTime
 S $P(CASEREV(2),"^",2)=..TimeRate
 S $P(CASEREV(2),"^",1)=..TimeSpent
 S $P(CASEREV(0),"^",6)=..TotDollarUsage
 S $P(CASEREV(0),"^",1)=""
 I ..Type S $P(CASEREV(0),"^",1)=..Type.SummaryValidate("Type",.Error)
 S N="" F  S N=$O(CASEREV("WP1",N)) Q:N=""  K CASEREV("WP1",N)
 I $ZSTRIP(..Wp1,"*W")'="" F N=1:1:$L(..Wp1,$C(13,10)) S CASEREV("WP1",N)=$P(..Wp1,$C(13,10),N)
 S N="" F  S N=$O(CASEREV("WP2",N)) Q:N=""  K CASEREV("WP2",N)
 I $ZSTRIP(..Wp2,"*W")'="" F N=1:1:$L(..Wp2,$C(13,10)) S CASEREV("WP2",N)=$P(..Wp2,$C(13,10),N)
 S N="" F  S N=$O(CASEREV("WP3",N)) Q:N=""  K CASEREV("WP3",N)
 I $ZSTRIP(..Wp3,"*W")'="" F N=1:1:$L(..Wp3,$C(13,10)) S CASEREV("WP3",N)=$P(..Wp3,$C(13,10),N)
 S N="" F  S N=$O(CASEREV("WP4",N)) Q:N=""  K CASEREV("WP4",N)
 I $ZSTRIP(..Wp4,"*W")'="" F N=1:1:$L(..Wp4,$C(13,10)) S CASEREV("WP4",N)=$P(..Wp4,$C(13,10),N)
 S N="" F  S N=$O(CASEREV("WP5",N)) Q:N=""  K CASEREV("WP5",N)
 I $ZSTRIP(..Wp5,"*W")'="" F N=1:1:$L(..Wp5,$C(13,10)) S CASEREV("WP5",N)=$P(..Wp5,$C(13,10),N)
 S N="" F  S N=$O(CASEREV("WP6",N)) Q:N=""  K CASEREV("WP6",N)
 I $ZSTRIP(..Wp6,"*W")'="" F N=1:1:$L(..Wp6,$C(13,10)) S CASEREV("WP6",N)=$P(..Wp6,$C(13,10),N)
 S N="" F  S N=$O(CASEREV("WP7",N)) Q:N=""  K CASEREV("WP7",N)
 I $ZSTRIP(..Wp7,"*W")'="" F N=1:1:$L(..Wp7,$C(13,10)) S CASEREV("WP7",N)=$P(..Wp7,$C(13,10),N)
 S N="" F  S N=$O(CASEREV("WP8",N)) Q:N=""  K CASEREV("WP8",N)
 I $ZSTRIP(..Wp8,"*W")'="" F N=1:1:$L(..Wp8,$C(13,10)) S CASEREV("WP8",N)=$P(..Wp8,$C(13,10),N)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..MilDescr["^") Q -1
 I (..Note["^") Q -1
 I (..OthDescr["^") Q -1
 I (..TelDescr["^") Q -1
 I (..TelTime["^") Q -1
 I (..TimeSpent["^") Q -1
 Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.Review</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.ReviewS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^["MHRREGORIG"]PTCASE</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.Header.CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="2">
<Expression>"REV"</Expression>
</Subscript>
<Subscript name="3">
<Expression>{RevNum}</Expression>
</Subscript>
<Subscript name="4">
<Expression>0</Expression>
</Subscript>
<Data name="Barrier">
<Delimiter>"_"</Delimiter>
<Node>+10</Node>
<Piece>1</Piece>
</Data>
<Data name="Comments">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},20,sub)) Q:sub=""  S data=data_$G(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},20,sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
<Data name="Handicap">
<Delimiter>"_"</Delimiter>
<Node>+11</Node>
<Piece>1</Piece>
</Data>
<Data name="Ini">
<Delimiter>"^"</Delimiter>
<Piece>9</Piece>
</Data>
<Data name="Initiated">
<Delimiter>"_","^"</Delimiter>
<Node>+12</Node>
<Piece>1,2</Piece>
</Data>
<Data name="Lev">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="Mil">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>1</Piece>
</Data>
<Data name="MilDescr">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>3</Piece>
</Data>
<Data name="MilRate">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>2</Piece>
</Data>
<Data name="Note">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>1</Piece>
</Data>
<Data name="OthDescr">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>2</Piece>
</Data>
<Data name="OthExp">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>1</Piece>
</Data>
<Data name="Outcome">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="Problem">
<Delimiter>"_","^"</Delimiter>
<Node>+12</Node>
<Piece>1,1</Piece>
</Data>
<Data name="Resolved">
<Delimiter>"_","^"</Delimiter>
<Node>+12</Node>
<Piece>1,3</Piece>
</Data>
<Data name="RevDt">
<Delimiter>"^"</Delimiter>
<Piece>7</Piece>
</Data>
<Data name="RevTime">
<Delimiter>"^"</Delimiter>
<Piece>8</Piece>
</Data>
<Data name="Reviewer">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="Setting">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="TelDescr">
<Delimiter>"^"</Delimiter>
<Node>+4</Node>
<Piece>3</Piece>
</Data>
<Data name="TelRate">
<Delimiter>"^"</Delimiter>
<Node>+4</Node>
<Piece>2</Piece>
</Data>
<Data name="TelTime">
<Delimiter>"^"</Delimiter>
<Node>+4</Node>
<Piece>1</Piece>
</Data>
<Data name="TimeRate">
<Delimiter>"^"</Delimiter>
<Node>+2</Node>
<Piece>2</Piece>
</Data>
<Data name="TimeSpent">
<Delimiter>"^"</Delimiter>
<Node>+2</Node>
<Piece>1</Piece>
</Data>
<Data name="TotDollarUsage">
<Delimiter>"^"</Delimiter>
<Piece>6</Piece>
</Data>
<Data name="Type">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Wp1">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP1",sub)) Q:sub=""  S data=data_$G(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP1",sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
<Data name="Wp2">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP2",sub)) Q:sub=""  S data=data_$G(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP2",sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
<Data name="Wp3">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP3",sub)) Q:sub=""  S data=data_$G(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP3",sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
<Data name="Wp4">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP4",sub)) Q:sub=""  S data=data_$G(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP4",sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
<Data name="Wp5">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP5",sub)) Q:sub=""  S data=data_$G(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP5",sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
<Data name="Wp6">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP6",sub)) Q:sub=""  S data=data_$G(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP6",sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
<Data name="Wp7">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP7",sub)) Q:sub=""  S data=data_$G(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP7",sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
<Data name="Wp8">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP8",sub)) Q:sub=""  S data=data_$G(^["MHRREGORIG"]PTCASE({L1},"REV",{L3},"WP8",sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.SecureNote">
<Description>
CONFIDENTIAL CLINICAL INFORMATION.  ONLY AUTHORIZED CASE MANAGERS HAVE ACCESS.
Query this table for secure Case Notes, entered through MCA Case Management.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>63729,47413.617792</TimeChanged>
<TimeCreated>63729,46108</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_SECURE_NOTES</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.SecureNote</Default>
</Parameter>

<Property name="Header">
<Type>CaseMgmt.Header</Type>
<Cardinality>parent</Cardinality>
<Inverse>SecureNotes</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Abstract">
<Description>
 </Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CategoryTable">
<Description>
 </Description>
<Type>Dict.CmCaseNoteCategory</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<ForeignKey name="CategoryTable">
<Properties>CategoryTable</Properties>
<ReferencedClass>Dict.CmCaseNoteCategory</ReferencedClass>
</ForeignKey>

<Property name="EntryDate">
<Description>
The date the note was entered</Description>
<Type>%Date</Type>
<InitialExpression>+$h</InitialExpression>
<SqlComputeCode> S {*}=+$H </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="ENT Date"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="EntryTime">
<Description>
The time on which the note was entered</Description>
<Type>%Time</Type>
<InitialExpression>$p($h,",",2)</InitialExpression>
<SqlComputeCode> S {*}=$P($H,",",2) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="FORMAT" value="4"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="NoteNum">
<Description>
a unique note number</Description>
<Type>%Integer</Type>
<SqlColumnNumber>2</SqlColumnNumber>
<SqlComputeCode> S {*}=$O(^[UCR,SYR]CMNOTES({Header},""),-1)+1 </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="NoteText">
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="Reviewer">
<Description>
 </Description>
<Type>Dict.CmCaseManager</Type>
<Required>1</Required>
</Property>

<ForeignKey name="Reviewer">
<Properties>Reviewer</Properties>
<ReferencedClass>Dict.CmCaseManager</ReferencedClass>
</ForeignKey>

<Property name="Type">
<Description>
the Case note type</Description>
<Type>Dict.CmCaseNoteType</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Case Note Type"/>
</Property>

<ForeignKey name="Type">
<Properties>Type</Properties>
<ReferencedClass>Dict.CmCaseNoteType</ReferencedClass>
</ForeignKey>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>NoteNum,CategoryTable</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.SecureNote"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]CMNOTES($P(id,"||",1),$P(id,"||",2),$P(id,"||",3))) 
]]></Implementation>
</Method>

<Query name="ByCaseNum">
<Description>
</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>CaseNum:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT   NoteNum, EntryDate,EntryTime,Reviewer->Name as Reviewer,
         Type->Name as Type,NoteText
FROM     CaseMgmt.SecureNote
WHERE    Header->CaseNum = :CaseNum
ORDER BY NoteNum DESC]]></SqlQuery>
<Parameter name="ROWSPEC" value="NoteNum,EntryDate,EntryTime,Reviewer,Type,NoteText"/>
</Query>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 k ^[UCR]CMNOTES
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>CMNOTE:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 S ..Abstract=$P($G(CMNOTE(1)),"^",1)
 D ..CategoryTableSetObjectId($G(CATNODE))
 S ..EntryDate=$P($G(CMNOTE(0)),"^",1)
 S ..EntryTime=$P($G(CMNOTE(0)),"^",2)
 S (..NoteText,WP)="" S N="",CNT=0 F  S N=$O(CMNOTE("WP",N),1,ROW) Q:N=""  S CNT=CNT+1,$P(WP,$C(13,10),CNT)=ROW
 S ..NoteText=WP
 D ..ReviewerSetObjectId($P($G(CMNOTE(0)),"^",3))
 D ..TypeSetObjectId($P($G(CMNOTE(0)),"^",4)) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[CMNOTE:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>CATNODE,NOTENUM</PublicList>
<Implementation><![CDATA[
 S CATNODE=""
 I ..CategoryTable S CATNODE=..CategoryTable.SummaryValidate("CategoryTable",.Error)
 S NOTENUM=..NoteNum
 S $P(CMNOTE(1),"^",1)=..Abstract
 S $P(CMNOTE(0),"^",1)=..EntryDate
 S $P(CMNOTE(0),"^",2)=..EntryTime
 S N="" F  S N=$O(CMNOTE("WP",N)) Q:N=""  K CMNOTE("WP",N)
 I $ZSTRIP(..NoteText,"*W")'="" F N=1:1:$L(..NoteText,$C(13,10)) S CMNOTE("WP",N)=$P(..NoteText,$C(13,10),N)
 S $P(CMNOTE(0),"^",3)=""
 I ..Reviewer S $P(CMNOTE(0),"^",3)=..Reviewer.SummaryValidate("Reviewer",.Error)
 S $P(CMNOTE(0),"^",4)=""
 I ..Type S $P(CMNOTE(0),"^",4)=..Type.SummaryValidate("Type",.Error) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..Abstract["^") Q -1
 Q 1 
]]></Implementation>
</Method>

<Trigger name="WordProcessingInsert">
<Code>
 N CNUM,NOTENUM,CATNODE,N S CNUM=$P({Header},"||",1),NOTENUM={NoteNum},CATNODE={CategoryTable}
 I {NoteText}'="" F N=1:1:$L({NoteText},$C(13,10)) S ^[UCR,SYR]CMNOTES(CNUM,NOTENUM,CATNODE,"WP",N)=$P({NoteText},$C(13,10),N)</Code>
<Event>INSERT</Event>
<Order>-10</Order>
</Trigger>

<Trigger name="WordProcessingUpdate">
<Code>
 N CNUM,NOTENUM,CATNODE,N S CNUM=$P({Header},"||",1),NOTENUM={NoteNum},CATNODE={CategoryTable}
 I {NoteText*C} D
 .K ^[UCR,SYR]CMNOTES(CNUM,NOTENUM,CATNODE,"WP")  ;Init data for NoteText
 .I {NoteText}'="" F N=1:1:$L({NoteText},$C(13,10)) S ^[UCR,SYR]CMNOTES(CNUM,NOTENUM,CATNODE,"WP",N)=$P({NoteText},$C(13,10),N)</Code>
<Event>UPDATE</Event>
<Order>-10</Order>
</Trigger>

<Trigger name="WordProcessingDelete">
<Code>
 N CNUM,NOTENUM,CATNODE,N S CNUM=$P({Header},"||",1),NOTENUM={NoteNum},CATNODE={CategoryTable}
 K ^[UCR,SYR]CMNOTES(CNUM,NOTENUM,CATNODE,"WP")  ;Init data for NoteText</Code>
<Event>DELETE</Event>
<Order>-10</Order>
</Trigger>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>CaseMgmt.SecureNote</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.SecureNoteS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCR]CMNOTES</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.Header.CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="2">
<Expression>{NoteNum}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{CategoryTable}</Expression>
</Subscript>
<Subscript name="4">
<Expression>0</Expression>
</Subscript>
<Data name="Abstract">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>1</Piece>
</Data>
<Data name="EntryDate">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="EntryTime">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="NoteText">
<RetrievalCode><![CDATA[ n data,sub s (data,sub)=""
 f  s sub=$o(^[UCR]CMNOTES({L1},{L2},{L3},"WP",sub)) Q:sub=""  S data=data_$G(^[UCR]CMNOTES({L1},{L2},{L3},"WP",sub))_$C(13,10)
 s {*}=$ZSTRIP(data,">C")]]></RetrievalCode>
</Data>
<Data name="Reviewer">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="Type">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="CaseMgmt.Status">
<Description>
Query this table for case status entry information including case number,
service date, status, restrictions, diagnosis.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>63729,47213.850379</TimeChanged>
<TimeCreated>63729,46108</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>BAR_B_CASE_STATUS</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/CaseMgmt.Status</Default>
</Parameter>

<Property name="Header">
<Type>CaseMgmt.Header</Type>
<Cardinality>parent</Cardinality>
<Inverse>Statuss</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Dx">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="240"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RecheckDt">
<Type>%Date</Type>
</Property>

<Property name="RecheckProv">
<Type>Dict.Provider</Type>
</Property>

<ForeignKey name="RecheckProv">
<Properties>RecheckProv</Properties>
<ReferencedClass>Dict.Provider</ReferencedClass>
</ForeignKey>

<Property name="Repet">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<Property name="RestrictionsNotes1">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RestrictionsNotes2">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ServDt">
<Description>
This column is used as the date subscript for the Case Status file.</Description>
<Type>%Date</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="Status">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ServDt,Repet</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="CaseMgmt.Status"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^[UCR]PTCASE($P(id,"||",1),"STATUS",$P(id,"||",2),$P(id,"||",3))) 
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM CaseMgmt.Status)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^CaseMgmt.StatusS</StreamLocation>
<ExtentSize>7</ExtentSize>
<Property name="Dx">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="Header">
<Selectivity>14.2857%</Selectivity>
</Property>
<Property name="RecheckDt">
<Selectivity>50.0000%</Selectivity>
</Property>
<Property name="RecheckProv">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Repet">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="RestrictionsNotes1">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="RestrictionsNotes2">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="ServDt">
<Selectivity>14.2857%</Selectivity>
</Property>
<Property name="Status">
<Selectivity>50.0000%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^[UCR]PTCASE</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{CaseMgmt.Header.CaseNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="2">
<Expression>"STATUS"</Expression>
</Subscript>
<Subscript name="3">
<Expression>{ServDt}</Expression>
</Subscript>
<Subscript name="4">
<Expression>{Repet}</Expression>
</Subscript>
<Data name="Dx">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="RecheckDt">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="RecheckProv">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="RestrictionsNotes1">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="RestrictionsNotes2">
<Delimiter>"^"</Delimiter>
<Piece>6</Piece>
</Data>
<Data name="Status">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.Adjudication">
<Description>
Adjudication information based on the linked claims.</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>63729,47194.492626</TimeChanged>
<TimeCreated>63729,46549</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="SERIALDELIMITER">
<Default>^</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_L_REF_ADJ</Default>
</Parameter>

<Property name="OthAmt">
<Description>
the other amount from claims</Description>
<Type>DBMS.Currency</Type>
</Property>

<Property name="AppDays">
<Description>
approved days.</Description>
<Type>%Integer</Type>
</Property>

<Property name="AppAmt">
<Description>
 the approved amount</Description>
<Type>DBMS.Currency</Type>
</Property>

<Property name="AppTreatments">
<Description>
approved treatments</Description>
<Type>%Integer</Type>
</Property>

<Property name="AppUnits">
<Description>
Approved units</Description>
<Type>%Numeric</Type>
</Property>

<Property name="BilledAmt">
<Description>
 the billed amount</Description>
<Type>DBMS.Currency</Type>
</Property>

<Property name="CopayAmt">
<Description>
 </Description>
<Type>DBMS.Currency</Type>
</Property>

<Property name="DedAmt">
<Description>
the deductible amount</Description>
<Type>DBMS.Currency</Type>
</Property>

<Property name="RejAmt">
<Description>
 the rejected amount from claims</Description>
<Type>DBMS.Currency</Type>
</Property>

<Property name="WithholdAmt">
<Description>
the withhold amount from claims</Description>
<Type>DBMS.Currency</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 Q Id
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>SystemState</State>
<StreamLocation>^Referrals.AdjudicationS</StreamLocation>
<Data name="SystemState">
<Subscript>"Referrals.Adjudication"</Subscript>
<Value name="1">
<Value>BilledAmt</Value>
</Value>
<Value name="2">
<Value>AppAmt</Value>
</Value>
<Value name="3">
<Value>RejAmt</Value>
</Value>
<Value name="4">
<Value>CopayAmt</Value>
</Value>
<Value name="5">
<Value>OthAmt</Value>
</Value>
<Value name="6">
<Value>AppUnits</Value>
</Value>
<Value name="7">
<Value>AppDays</Value>
</Value>
<Value name="12">
<Value>WithholdAmt</Value>
</Value>
<Value name="13">
<Value>AppTreatments</Value>
</Value>
<Value name="14">
<Value>DedAmt</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Referrals.AuditIndex">
<Description><![CDATA[
This table is an index of Referral Audits by posting date and is linked to the
column <CLASS>Referrals.ReferralAudit</CLASS>]]></Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>67335,38115.202917</TimeChanged>
<TimeCreated>63729,46548</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_I_REF_AUD_INDEX</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.AuditIndex</Default>
</Parameter>

<Property name="Dt">
<Description>
This column represents the posting date of an entry in the audit trail.</Description>
<Type>%Date</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
<Parameter name="CAPTION" value="Date"/>
</Property>

<Property name="Hmo">
<Type>Dict.HmoProfile</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="HMO"/>
</Property>

<ForeignKey name="Hmo">
<Properties>Hmo</Properties>
<ReferencedClass>Dict.HmoProfile</ReferencedClass>
</ForeignKey>

<Property name="Id">
<Type>Registration.Patient</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
<Parameter name="CAPTION" value="ID"/>
</Property>

<ForeignKey name="Id">
<Properties>Id</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Rin">
<Description>
 </Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>5</SqlColumnNumber>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Hmo,Dt,Id,Rin</Properties>
<Unique>1</Unique>
</Index>

<ForeignKey name="Referral">
<Properties>Hmo,Id,Rin</Properties>
<ReferencedClass>Referrals.Referral</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.AuditIndex"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 TSTART
 S HMO="" F  S HMO=$O(HMOTBL(HMO)) Q:HMO=""  D
 . K ^[$P(HMOTBL(HMO),"^",1)]HMOREFAX(HMO)   ;Data Global
 TCOMMIT
 Q $$$OK
]]></Implementation>
</Method>

<Method name="Rebuild">
<Description>
Rebuild the index by scanning the audit trail.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec/>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(INSERT %NOCHECK INTO Referrals.AuditIndex
       (Hmo, Dt, Id, Rin)
      SELECT Referral->Hmo,Dt,Referral->Id,Referral->Rin
      FROM   Referrals.ReferralAudit)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.AuditIndexS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREFAX({L1})</DataAccess>
<Expression>{Dt}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREFAX({L1},{L2})</DataAccess>
<Expression>{Id}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREFAX({L1},{L2},{L3})</DataAccess>
<Expression>{Rin}</Expression>
</Subscript>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.FundDefault">
<Description>
This table contains information about the default fund for referral types.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>63729,47479.635934</TimeChanged>
<TimeCreated>63729,46520</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_FUND</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.FundDefault</Default>
</Parameter>

<Property name="BreakDowns">
<Type>Referrals.FundDefaultBreakDown</Type>
<Cardinality>children</Cardinality>
<Inverse>FundDefault</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Fund">
<Description>
 </Description>
<Type>Dict.HmoFund</Type>
<Required>1</Required>
</Property>

<ForeignKey name="Fund">
<Properties>Fund</Properties>
<ReferencedClass>Dict.HmoFund</ReferencedClass>
</ForeignKey>

<Property name="Hmo">
<Description>
 </Description>
<Type>Dict.HmoProfile</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="Hmo">
<Properties>Hmo</Properties>
<ReferencedClass>Dict.HmoProfile</ReferencedClass>
</ForeignKey>

<Property name="RefType">
<Description>
 </Description>
<Type>Dict.HmoReferralType</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
<Parameter name="CAPTION" value="Referral Type"/>
</Property>

<ForeignKey name="RefType">
<Properties>RefType</Properties>
<ReferencedClass>Dict.HmoReferralType</ReferencedClass>
</ForeignKey>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Hmo,RefType</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.FundDefault"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="ByHmo">
<Description>
Provided a comma delimited list of Hmo Ids get a details about the Referral
Fund Default Table.  If not Hmo is supplied get the data from all Hmos.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT    %Id As Rowid,
          Hmo->Mnemonic As HmoMnemonic,
          RefType->Name As ReferralType,
          'Default'     As Parameter,
          Null          As ParameterValue,
          Fund->Name    As Fund 
FROM      Referrals.FundDefault
WHERE     (:Hmo IS NULL OR
           Hmo %INLIST $LISTFROMSTRING(:Hmo,','))

UNION

SELECT    %Id As Rowid,
          FundDefault->Hmo->Mnemonic As HmoMnemonic,
          FundDefault->RefType->Name As ReferralType,
          (SELECT Name FROM DBMS.Dictionary 
           WHERE  %Id = (SELECT SubFieldForRefTypeFundDefTbl
                         FROM MCA.SystemOption)) As Parameter,
          DBMS.Dictionary_FieldVal((SELECT SubFieldForRefTypeFundDefTbl
                                    FROM   MCA.SystemOption),Param),
          Fund->Name
FROM      Referrals.FundDefaultBreakDown
WHERE     (:Hmo IS NULL OR
           FundDefault->Hmo %INLIST $LISTFROMSTRING(:Hmo,','))

ORDER BY  2,3,4,5,6]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Rowid:%String,HmoMnemonic:%String,ReferralType:%String,Parameter:%String,ParameterValue:%String,Fund:%String"/>
</Query>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 TSTART
 S HMO="" F  S HMO=$O(HMOTBL(HMO)) Q:HMO=""  D
 . K ^[$P(HMOTBL(HMO),"^",1)]HMOXFUND(HMO)   ;Data Global
 . ;Delete the children data
 . D ##CLASS(Referrals.FundDefaultBreakDown).%KillExtent()
 TCOMMIT
 Q $$$OK
]]></Implementation>
</Method>

<Method name="Default">
<Description><![CDATA[
Provided an Hmo Id and Referral Id get a default fund.  This method does not
consider Rule Bank Fund Rules.  The logic applied here is to first set the Fund
to the Fund based on the Hmo and Referral Type.  If there is a fund defined for
Hmo, ReferralType and Breakout reset the Fund to the defined value.  If after
the processing no fund can be determined use the Default Approval Fund defined
in Dictionary 500, <class>Dict.HmoProfile</class>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer,ReferralType:%Integer,Breakout:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 S FUND=""
 &SQL(SELECT Fund INTO :FUND
      FROM   Referrals.FundDefault
      WHERE  Hmo=:Hmo AND RefType=:ReferralType)

 S FundDefault=Hmo_"||"_ReferralType
 I +$G(Breakout) {
    &SQL(SELECT Fund INTO BreakOutFund
         FROM   Referrals.FundDefaultBreakDown
         WHERE  FundDefault = :FundDefault AND Param=:Breakout)
    I $G(BreakoutFund) S FUND=BreakoutFund
 }
 I 'FUND {
   &SQL(SELECT DefAppFund INTO :FUND FROM Dict.HmoProfile WHERE Id=:Hmo)
   }
  
 Q FUND
]]></Implementation>
</Method>

<Method name="KillHmo">
<Description>
Kill the data in the table including the children provide an Hmo Id.  No
checking is done during this method call.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 K ^[$P(HMOTBL(Hmo),"^",1)]HMOXFUND(Hmo)   ;Data Global
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.FundDefaultS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^[$P(HMOTBL({L1}),"^",1)]HMOXFUND({L1})</DataAccess>
<Expression>{RefType}</Expression>
<NextCode/>
<StartValue>1</StartValue>
</Subscript>
<Data name="Fund">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.FundDefaultBreakDown">
<Description>
This table contains information about the default fund for referral types when 
you use funds by breakdowns</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63729,47513.336492</TimeChanged>
<TimeCreated>63729,46521</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_FUND_BRK</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.FundDefaultBreakDown</Default>
</Parameter>

<Property name="FundDefault">
<Type>Referrals.FundDefault</Type>
<Cardinality>parent</Cardinality>
<Inverse>BreakDowns</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Fund">
<Description>
 </Description>
<Type>Dict.HmoFund</Type>
<Required>1</Required>
</Property>

<ForeignKey name="Fund">
<Properties>Fund</Properties>
<ReferencedClass>Dict.HmoFund</ReferencedClass>
</ForeignKey>

<Property name="Param">
<Description>
This column is reference to the dictionary that is used for sub-fields.</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="MINVAL" value="1"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Param</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.FundDefaultBreakDown"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
     #SQLCompile Mode=Deferred
 #endif
 &SQL(DELETE %NOTRIGGER FROM Referrals.FundDefaultBreakDown)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.FundDefault168ES</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.FundDefault.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^[$P(HMOTBL({L1}),"^",1)]HMOXFUND({L1})</DataAccess>
<Expression>{Referrals.FundDefault.RefType}</Expression>
<NextCode/>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^[$P(HMOTBL({L1}),"^",1)]HMOXFUND({L1},{L2})</DataAccess>
<Expression>{Param}</Expression>
<NextCode/>
</Subscript>
<Data name="Fund">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.LengthOfStay">
<Description>
Length of stay data</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>63729,46856.979007</TimeChanged>
<TimeCreated>63729,46549</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="SERIALDELIMITER">
<Default>^</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_L_REF_LOS</Default>
</Parameter>

<Property name="Percent10">
<Description>
 </Description>
<Type>%Integer</Type>
</Property>

<Property name="Percent30">
<Description>
 </Description>
<Type>%Integer</Type>
</Property>

<Property name="Percent5">
<Description>
 </Description>
<Type>%Integer</Type>
</Property>

<Property name="Percent50">
<Description>
 </Description>
<Type>%Integer</Type>
</Property>

<Property name="Percent75">
<Description>
75th percentile</Description>
<Type>%Integer</Type>
</Property>

<Property name="Percent90">
<Description>
 </Description>
<Type>%Integer</Type>
</Property>

<Property name="Percent95">
<Description>
 </Description>
<Type>%Integer</Type>
</Property>

<Property name="Percent99">
<Description>
 </Description>
<Type>%Integer</Type>
</Property>

<Property name="Custom">
<Description>
  </Description>
<Type>%Integer</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 Q Id
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>SystemState</State>
<StreamLocation>^Referrals.LengthOfStayS</StreamLocation>
<Data name="SystemState">
<Subscript>"Referrals.LengthOfStay"</Subscript>
<Value name="1">
<Value>Percent5</Value>
</Value>
<Value name="2">
<Value>Percent10</Value>
</Value>
<Value name="3">
<Value>Percent30</Value>
</Value>
<Value name="4">
<Value>Percent50</Value>
</Value>
<Value name="5">
<Value>Percent75</Value>
</Value>
<Value name="6">
<Value>Percent90</Value>
</Value>
<Value name="7">
<Value>Percent95</Value>
</Value>
<Value name="8">
<Value>Percent99</Value>
</Value>
<Value name="9">
<Value>Custom</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Referrals.Referral">
<Description>
This contains header level information for referrals such as the referral
ordered date, ordering physician, referral type etc., and the entity the
referral was made to.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67417,43536.544751</TimeChanged>
<TimeCreated>63729,46517</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.Referral</Default>
</Parameter>

<Parameter name="XMLSUMMARY">
<Default>ReferToPhy,ReferToProv,ReferToVnd,RefNum,RefType,Status,ValidFromDt,ValidToDt</Default>
</Parameter>

<Property name="Lines">
<Type>Referrals.ReferralLine</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Audits">
<Type>Referrals.ReferralAudit</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="LinkedCases">
<Type>Referrals.ReferralLinkedCase</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="LinkedClms">
<Type>Referrals.ReferralLinkedClm</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="LinkedInvs">
<Type>Referrals.ReferralLinkedInv</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Appointments">
<Type>Referrals.ReferralAppointment</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="StatusHistorys">
<Type>Referrals.ReferralStatusHistory</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="WorkingDxs">
<Type>Referrals.ReferralWorkingDx</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="WorkingPxs">
<Type>Referrals.ReferralWorkingPx</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="AuthorizedPxs">
<Type>Referrals.ReferralAuthorizedPx</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Duplicates">
<Type>Referrals.ReferralDuplicate</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="Visits">
<Type>Referrals.ReferralVisit</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="ApptSummarys">
<Type>Referrals.ReferralApptSummary</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="InpatientDts">
<Type>Referrals.ReferralInpatientDt</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="EdiTxns">
<Type>Referrals.ReferralEdiTxn</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="DischargePxIcd9s">
<Type>Referrals.ReferralDischargePxIcd9</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="DischargeDxs">
<Type>Referrals.ReferralDischargeDx</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="AdmittingDxs">
<Type>Referrals.ReferralAdmittingDx</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="Benefits">
<Type>Referrals.ReferralBenefit</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="Dxs">
<Type>Referrals.ReferralDx</Type>
<Cardinality>children</Cardinality>
<Inverse>Referral</Inverse>
<Relationship>1</Relationship>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="AccidentCntry">
<Description>
This column contains the country for an accident.  It may be used in 2000F-UM-
0504 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>Dict.Country</Type>
<Parameter name="CAPTION" value="Accident Country"/>
</Property>

<ForeignKey name="AccidentCntry">
<Properties>AccidentCntry</Properties>
<ReferencedClass>Dict.Country</ReferencedClass>
</ForeignKey>

<Property name="AccidentSt">
<Description>
This column contains the state or province for an accident.  It may be used in
2000F-UM-0504 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>Dict.StateProvince</Type>
<Parameter name="CAPTION" value="Accident State"/>
</Property>

<ForeignKey name="AccidentSt">
<Properties>AccidentSt</Properties>
<ReferencedClass>Dict.StateProvince</ReferencedClass>
</ForeignKey>

<Property name="AccDt">
<Description>
This column contains the date of accident.  It may be used in the DTP03 segment
of the 2000C or 2000D loop of an electronic 278 (Referral) transaction</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Accident Date"/>
</Property>

<Property name="AccX12CauseCode">
<Description>
This column contains the X12 Related-Causes code for an accident.  It may be
used in 2000F-UM-0501 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>Dict.RelatedCausesCode</Type>
<Parameter name="CAPTION" value="Accident X12 Cause Code"/>
</Property>

<ForeignKey name="AccX12CauseCode">
<Properties>AccX12CauseCode</Properties>
<ReferencedClass>Dict.RelatedCausesCode</ReferencedClass>
</ForeignKey>

<Property name="ActAdmDt">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Actual Admission Date"/>
<Parameter name="MAXVAL" value="+$H"/>
</Property>

<Property name="ActDischDt">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Actual Discharge Date"/>
<Parameter name="MAXVAL" value="+$H"/>
</Property>

<Property name="ActSurgDt">
<Description><![CDATA[
This column contains the actual surgery date.  It may be used in the DTP03
segment of the 2000F loop of an electronic 278 (Referral) transaction
<P>]]></Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Actual Surgery Date"/>
</Property>

<Property name="Adjudication">
<Description>
a reference to the adjudication totals for referrals linked to a claim.</Description>
<Type>Referrals.Adjudication</Type>
</Property>

<Property name="AdmitPhySpecialty">
<Description>
        This is dictionary 202.</Description>
<Type>Dict.BillingArea</Type>
<Parameter name="CAPTION" value="Admit Phy Specialty"/>
</Property>

<ForeignKey name="AdmitPhySpecialty">
<Properties>AdmitPhySpecialty</Properties>
<ReferencedClass>Dict.BillingArea</ReferencedClass>
</ForeignKey>

<Property name="AdmDx">
<Type>Dict.Icd9CmDiagnosis</Type>
<Parameter name="CAPTION" value="Admitting Diagnosis"/>
</Property>

<ForeignKey name="AdmDx">
<Properties>AdmDx</Properties>
<ReferencedClass>Dict.Icd9CmDiagnosis</ReferencedClass>
</ForeignKey>

<Property name="AdmDxFreeText">
<Description>
A freetext admitting diagnosis.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Admitting Diagnosis Frtxt"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="240"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="AdmDxFromDt1">
<Description>
Admitting DX from date, #1.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="ADM DX From DT 1"/>
</Property>

<Property name="AdmDxFromDt2">
<Description>
Admitting DX from date, #2.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="ADM DX From DT 2"/>
</Property>

<Property name="AdmDxFromDt3">
<Description>
Admitting DX from date, #3.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="ADM DX From DT 3"/>
</Property>

<Property name="AdmDxToDt1">
<Description>
Admitting DX to date, #1.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="ADM DX To DT 1"/>
</Property>

<Property name="AdmDxToDt2">
<Description>
Admitting DX to date, #2.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="ADM DX To DT 2"/>
</Property>

<Property name="AdmDxToDt3">
<Description>
Admitting DX to date, #3.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="ADM DX To DT 3"/>
</Property>

<Property name="AdmFromEmerg">
<Type>%String</Type>
<Parameter name="CAPTION" value="Admitted From Emergency"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="AdmPhy">
<Type>Dict.Provider</Type>
<Parameter name="CAPTION" value="Admitting Physician"/>
</Property>

<ForeignKey name="AdmPhy">
<Properties>AdmPhy</Properties>
<ReferencedClass>Dict.Provider</ReferencedClass>
</ForeignKey>

<Property name="AdmPhyDict3">
<Type>Dict.Provider</Type>
<Parameter name="CAPTION" value="Admitting Physician"/>
</Property>

<ForeignKey name="AdmPhyDict3">
<Properties>AdmPhyDict3</Properties>
<ReferencedClass>Dict.Provider</ReferencedClass>
</ForeignKey>

<Property name="AdmPhyDict471">
<Type>Dict.Vendor</Type>
<Parameter name="CAPTION" value="Admitting Physician"/>
</Property>

<ForeignKey name="AdmPhyDict471">
<Properties>AdmPhyDict471</Properties>
<ReferencedClass>Dict.Vendor</ReferencedClass>
</ForeignKey>

<Property name="AdmPhyFreeText">
<Type>%String</Type>
<Parameter name="CAPTION" value="Admitting Physician"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="AdmSrc">
<Description>
This column contains the admission source for an inpatient.  It may be used in
2000F-CL1-02 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>Dict.AdmissionSource</Type>
<Parameter name="CAPTION" value="Admission Source"/>
</Property>

<ForeignKey name="AdmSrc">
<Properties>AdmSrc</Properties>
<ReferencedClass>Dict.AdmissionSource</ReferencedClass>
</ForeignKey>

<Property name="AdmToHos">
<Type>%String</Type>
<Parameter name="CAPTION" value="Admitted To Hospital"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="AdmType">
<Description>
This column contains the type of admission for an inpatient.  It may be used in
2000F-CL1-01 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>Dict.AdmissionType</Type>
<Parameter name="CAPTION" value="Admission Type"/>
</Property>

<ForeignKey name="AdmType">
<Properties>AdmType</Properties>
<ReferencedClass>Dict.AdmissionType</ReferencedClass>
</ForeignKey>

<Property name="AmbTransReasonCode">
<Description>
This column contains the reason for the ambulance transport.  It may be used
in the CR104 segment of the 2000F loop of an electronic 278 (Referral)
transaction</Description>
<Type>Dict.AmbulanceTransportReasonCode</Type>
<Parameter name="CAPTION" value="Amb Trans Reason Code"/>
</Property>

<ForeignKey name="AmbTransReasonCode">
<Properties>AmbTransReasonCode</Properties>
<ReferencedClass>Dict.AmbulanceTransportReasonCode</ReferencedClass>
</ForeignKey>

<Property name="AmbTypeCode">
<Description>
This column contains the type of ambulance transport.  It may be used in the
CR103 segment of the 2000F loop of an electronic 278 (Referral) transaction</Description>
<Type>Dict.AmbulanceTypeCode</Type>
<Parameter name="CAPTION" value="Amb Type Code"/>
</Property>

<ForeignKey name="AmbTypeCode">
<Properties>AmbTypeCode</Properties>
<ReferencedClass>Dict.AmbulanceTypeCode</ReferencedClass>
</ForeignKey>

<Property name="AmtAdjud">
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Amount Adjudicated"/>
</Property>

<Property name="Approval">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="AppBy">
<Type>%String</Type>
<Parameter name="CAPTION" value="Approved By"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ArterialBloodGasQt">
<Description>
This column contains the Arterial Blood Gas Quantity.  It may be used in the
CR510 segment of the 2000F loop of an electronic 278 (Referral) transaction</Description>
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Arterial Blood Gas Qt"/>
</Property>

<Property name="AttPhyDict3">
<Type>Dict.Provider</Type>
<Parameter name="CAPTION" value="Attending Physician"/>
</Property>

<ForeignKey name="AttPhyDict3">
<Properties>AttPhyDict3</Properties>
<ReferencedClass>Dict.Provider</ReferencedClass>
</ForeignKey>

<Property name="AttPhyDict471">
<Type>Dict.Vendor</Type>
<Parameter name="CAPTION" value="Attending Physician"/>
</Property>

<ForeignKey name="AttPhyDict471">
<Properties>AttPhyDict471</Properties>
<ReferencedClass>Dict.Vendor</ReferencedClass>
</ForeignKey>

<Property name="AttPhySpecialty">
<Type>Dict.BillingArea</Type>
<Parameter name="CAPTION" value="Attending Phy Specialty"/>
</Property>

<ForeignKey name="AttPhySpecialty">
<Properties>AttPhySpecialty</Properties>
<ReferencedClass>Dict.BillingArea</ReferencedClass>
</ForeignKey>

<Property name="AuthNum">
<Type>%String</Type>
<Parameter name="CAPTION" value="Authorization Number"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Cin">
<Description><![CDATA[
Display enrollment contract number on the referral.
Suppress the dummy enrollment contract from displaying if the HMO is an OPENHMO.
<P>
<P>
<P>
<P>]]></Description>
<Type>%Integer</Type>
</Property>

<Property name="ClinicalRequest">
<Description>
Clinical Request Id</Description>
<Type>CON.ClinRequest</Type>
<Parameter name="CAPTION" value="Clinical Request"/>
</Property>

<ForeignKey name="ClinicalRequest">
<Properties>ClinicalRequest</Properties>
<ReferencedClass>CON.ClinRequest</ReferencedClass>
</ForeignKey>

<Property name="ClmBtc">
<Description>
This data element is updated durinng MCA Claim NightJobs when this referral is
linked to a claim and the claim is processed  by Night Jobs.  Once this element
is defined users cannot change the Referral Target.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Claim Batch #"/>
</Property>

<Property name="ClmBtcTx">
<Description>
This data element is updated durinng MCA Claim NightJobs when this referral is
linked to a claim and the claim is processed  by Night Jobs.  Once this element
is defined users cannot change the Referral Target.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Claim Batch Tx"/>
</Property>

<Property name="Cob">
<Type>Dict.HmoCobIndicator</Type>
<Parameter name="CAPTION" value="COB"/>
</Property>

<ForeignKey name="Cob">
<Properties>Cob</Properties>
<ReferencedClass>Dict.HmoCobIndicator</ReferencedClass>
</ForeignKey>

<Property name="CobFsc">
<Type>Dict.FSC</Type>
<Parameter name="CAPTION" value="COB FSC"/>
</Property>

<ForeignKey name="CobFsc">
<Properties>CobFsc</Properties>
<ReferencedClass>Dict.FSC</ReferencedClass>
</ForeignKey>

<Property name="CobPercentForLiability">
<Description><![CDATA[
This field holds the COB percent for liability calculations, it is derived from
the FSC or the COB dictionary 521.
<P>]]></Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="COB % For Liability"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Com">
<Description>
This field contains up to 10 lines of comments for a referral.</Description>
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="ComplicationInd">
<Description>
This column contains the complication indicator.  It may be used in 2000F-CR2-
09 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Complication Indicator"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="ConfCom">
<Description>
This field contains up to 10 lines of comments for a referral.</Description>
<Type>%Text</Type>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Confidential Comments"/>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="ConsOnly">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="ContTel">
<Type>DBMS.Telephone</Type>
<Parameter name="CAPTION" value="Contact Telephone #"/>
</Property>

<Property name="CovCat">
<Type>Dict.HmoCoverageCategory</Type>
<Parameter name="CAPTION" value="Coverage Category"/>
</Property>

<ForeignKey name="CovCat">
<Properties>CovCat</Properties>
<ReferencedClass>Dict.HmoCoverageCategory</ReferencedClass>
</ForeignKey>

<Property name="CovInLieuHos">
<Type>%String</Type>
<Parameter name="CAPTION" value="Covered In Lieu Hos"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="CreatedBy">
<Description>
This column contains the initials of the person that created the referral.</Description>
<Type>SecurityPlus.Usr</Type>
<Required>1</Required>
<SqlComputeCode> S {*}=$P(SECID,"^",1) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Created By"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<ForeignKey name="CreatedBy">
<Properties>CreatedBy</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="CreatedDt">
<Description>
 </Description>
<Type>%Date</Type>
<SqlComputeCode> S {*}=+$H </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Created Date"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="CreatedTime">
<Description>
The time on which the referral was created.</Description>
<Type>%Time</Type>
<SqlComputeCode> S {*}=$P($H,",",2) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Created Time"/>
<Parameter name="FORMAT" value="4"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="CurCondition">
<Description>
This column contains the current condition of the patient.  It is a lookup to
D22133.  It is used in the UM07 segment of the 2000F loop of an electronic 278
(Referral) transaction</Description>
<Type>Dict.CurrentHealthCondition</Type>
<Parameter name="CAPTION" value="Current Condition"/>
</Property>

<ForeignKey name="CurCondition">
<Properties>CurCondition</Properties>
<ReferencedClass>Dict.CurrentHealthCondition</ReferencedClass>
</ForeignKey>

<Property name="CustomerDate1">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Customer Date 1:"/>
</Property>

<Property name="CustomerDate2">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Customer Date 2:"/>
</Property>

<Property name="CustomerDate3">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Customer Date 3:"/>
</Property>

<Property name="CustomerDate4">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Customer Date 4:"/>
</Property>

<Property name="CustomerDate5">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Customer Date 5:"/>
</Property>

<Property name="CustomerFreeText1">
<Type>%String</Type>
<Parameter name="CAPTION" value="Customer Free Text 1:"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CustomerFreeText2">
<Type>%String</Type>
<Parameter name="CAPTION" value="Customer Free Text 2:"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CustomerFreeText3">
<Type>%String</Type>
<Parameter name="CAPTION" value="Customer Free Text 3:"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CustomerFreeText4">
<Type>%String</Type>
<Parameter name="CAPTION" value="Customer Free Text 4:"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CustomerFreeText5">
<Type>%String</Type>
<Parameter name="CAPTION" value="Customer Free Text 5:"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CustomerFreeText6">
<Type>%String</Type>
<Parameter name="CAPTION" value="Customer Free Text 6:"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CustomerYesNo1">
<Type>%String</Type>
<Parameter name="CAPTION" value="Customer Yes/No 1:"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="CustomerYesNo2">
<Type>%String</Type>
<Parameter name="CAPTION" value="Customer Yes/No 2:"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="CustomerYesNo3">
<Type>%String</Type>
<Parameter name="CAPTION" value="Customer Yes/No 3:"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="CustomCopay">
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Custom Copay"/>
</Property>

<Property name="DailyOxyUseRate">
<Description>
This column captures the daily oxygen use count.  It may be used in the CR507
segment of the 2000F loop of an electronic 278 (Referral) transaction</Description>
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Daily Oxy Use Rate"/>
</Property>

<Property name="DateOfInjury">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Date Of Injury"/>
</Property>

<Property name="Descr">
<Description>
A short description for the referral.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Description"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DischDtHome">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Discharge Date Home"/>
<Parameter name="MAXVAL" value="+$H"/>
</Property>

<Property name="DischDx">
<Type>%String</Type>
<Parameter name="CAPTION" value="Discharge Diagnosis"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DischDxFromDt1">
<Description>
Discharge DX from date, #1.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Disch DX From DT 1"/>
</Property>

<Property name="DischDxFromDt2">
<Description>
Discharge DX from date, #2.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Disch DX From DT 2"/>
</Property>

<Property name="DischDxFromDt3">
<Description>
Discharge DX from date, #3.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Disch DX From DT 3"/>
</Property>

<Property name="DischDxToDt1">
<Description>
Discharge DX to date, #1.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Disch DX To DT 1"/>
</Property>

<Property name="DischDxToDt2">
<Description>
Discharge DX to date, #2.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Disch DX To DT 2"/>
</Property>

<Property name="DischDxToDt3">
<Description>
Discharge DX to date, #3.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Disch DX To DT 3"/>
</Property>

<Property name="DrgSerial">
<Description>
a reference to some DRG information</Description>
<Type>Referrals.ReferralDRG</Type>
<Parameter name="CAPTION" value="Drg Serial"/>
</Property>

<ForeignKey name="DrgSerialBillArea">
<Properties>DrgSerial.BillArea</Properties>
<ReferencedClass>Dict.BillingArea</ReferencedClass>
</ForeignKey>

<ForeignKey name="DrgSerialBillAreaReferFrom">
<Properties>DrgSerial.BillAreaReferFrom</Properties>
<ReferencedClass>Dict.BillingArea</ReferencedClass>
</ForeignKey>

<ForeignKey name="DrgSerialDischDisp">
<Properties>DrgSerial.DischDisp</Properties>
<ReferencedClass>Dict.DischargeDisposition</ReferencedClass>
</ForeignKey>

<ForeignKey name="DrgSerialDrgTable">
<Properties>DrgSerial.DrgTable</Properties>
<ReferencedClass>Dict.DrgSchedule</ReferencedClass>
</ForeignKey>

<Property name="DtOrd">
<Description>
The date ordered for the referral.</Description>
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Date Ordered"/>
<Parameter name="MAXVAL" value="+$H"/>
</Property>

<Property name="Dx">
<Type>Dict.Icd9CmDiagnosis</Type>
<Parameter name="CAPTION" value="Diagnosis"/>
</Property>

<ForeignKey name="Dx">
<Properties>Dx</Properties>
<ReferencedClass>Dict.Icd9CmDiagnosis</ReferencedClass>
</ForeignKey>

<Property name="Dx1FromDt">
<Description>
Primary diagnosis from date.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Diagnosis 1 From Date"/>
</Property>

<Property name="Dx1ToDt">
<Description>
Primary diagnosis to date.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Diagnosis 1 To Date"/>
</Property>

<Property name="Dx2">
<Description>
The secondary diagnosis.</Description>
<Type>Dict.Icd9CmDiagnosis</Type>
<Parameter name="CAPTION" value="Diagnosis Secondary"/>
</Property>

<ForeignKey name="Dx2">
<Properties>Dx2</Properties>
<ReferencedClass>Dict.Icd9CmDiagnosis</ReferencedClass>
</ForeignKey>

<Property name="Dx2FromDt">
<Description>
Secondary diagnosis from date.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Diagnosis 2 From DT"/>
</Property>

<Property name="Dx2ToDt">
<Description>
Secondary diagnosis to date.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Diagnosis 2 To Date"/>
</Property>

<Property name="Edi278inPayrDepctr">
<Description>
278 inbound payor Dependent level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Depctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrPrvctr">
<Description>
278 inbound payor Provider level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Prvctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrReqctr">
<Description>
278 inbound payor Requester level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Reqctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrRun">
<Description>
278 inbound payor Run number.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Run"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrSlnctr">
<Description>
278 inbound payor Service Line level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Slnctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrSubctr">
<Description>
278 inbound payor Subscriber level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Subctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrTxstctr">
<Description>
278 inbound payor Transaction Set level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Txstctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrUmoctr">
<Description>
278 inbound payor UMO level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Umoctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="EdiAction">
<Type>Dict.Edi278FollowupActionCodes</Type>
<Parameter name="CAPTION" value="EDI Action"/>
</Property>

<ForeignKey name="EdiAction">
<Properties>EdiAction</Properties>
<ReferencedClass>Dict.Edi278FollowupActionCodes</ReferencedClass>
</ForeignKey>

<Property name="EdiAttachmentTransCode">
<Description>
EDI Attachment Transmission Code.</Description>
<Type>Dict.EdiAttachmentTransmissionCodes</Type>
<Parameter name="CAPTION" value="Edi Attachment Trans Code"/>
</Property>

<ForeignKey name="EdiAttachmentTransCode">
<Properties>EdiAttachmentTransCode</Properties>
<ReferencedClass>Dict.EdiAttachmentTransmissionCodes</ReferencedClass>
</ForeignKey>

<Property name="EdiAttachmentType">
<Description>
EDI Attachment Type.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi Attachment Type"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="EdiAuthRejReason">
<Description>
This column contains the EDI Authorization Reject Reason.</Description>
<Type>Dict.Edi278RejectReasonCodes</Type>
<Parameter name="CAPTION" value="Edi Auth Rej Reason"/>
</Property>

<ForeignKey name="EdiAuthRejReason">
<Properties>EdiAuthRejReason</Properties>
<ReferencedClass>Dict.Edi278RejectReasonCodes</ReferencedClass>
</ForeignKey>

<Property name="EdiCertType">
<Type>Dict.Edi278CertificationType</Type>
<Parameter name="CAPTION" value="EDI Certifcation Type"/>
</Property>

<ForeignKey name="EdiCertType">
<Properties>EdiCertType</Properties>
<ReferencedClass>Dict.Edi278CertificationType</ReferencedClass>
</ForeignKey>

<Property name="EdiEditRejReason">
<Description>
This column contains the EDI Edit Reject Reason.</Description>
<Type>Dict.Edi278RejectionReasonCodes</Type>
<Parameter name="CAPTION" value="Edi Edit Rej Reason"/>
</Property>

<ForeignKey name="EdiEditRejReason">
<Properties>EdiEditRejReason</Properties>
<ReferencedClass>Dict.Edi278RejectionReasonCodes</ReferencedClass>
</ForeignKey>

<Property name="EdiHsdDeliveryPattern">
<Description>
EDI X12 HSD segment, Field 7.</Description>
<Type>Dict.EdiHealthCareServPatternOfDelivery</Type>
<Parameter name="CAPTION" value="Edi Hsd Delivery Pattern"/>
</Property>

<ForeignKey name="EdiHsdDeliveryPattern">
<Properties>EdiHsdDeliveryPattern</Properties>
<ReferencedClass>Dict.EdiHealthCareServPatternOfDelivery</ReferencedClass>
</ForeignKey>

<Property name="EdiHsdPdCnt">
<Description>
EDI X12 HSD segment, Field 6.</Description>
<Type>DBMS.AccountingPeriod</Type>
<Parameter name="CAPTION" value="Edi Hsd Period Count"/>
</Property>

<Property name="EdiHsdPdQual">
<Description>
EDI X12 HSD segment, Field 5.</Description>
<Type>DBMS.AccountingPeriod</Type>
<Parameter name="CAPTION" value="Edi Hsd Period Qualifier"/>
<Parameter name="VALUELIST" value="/Hour/Day/Years/Episode/Visit/Month/Week/"/>
</Property>

<Property name="EdiHsdQuant">
<Description>
EDI X12 HSD segment, Field 2.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Edi Hsd Quantity"/>
</Property>

<Property name="EdiHsdQuantQual">
<Description>
EDI X12 HSD segment, Field 1.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi Hsd Quantity Qualifier"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Days/Units/Hours/Month/Visits/"/>
</Property>

<Property name="EdiHsdUnits">
<Description>
EDI X12 HSD segment, Field 3.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi Hsd Units"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Days/Months/Week/"/>
</Property>

<Property name="EdiIncomingStat">
<Type>%String</Type>
<Parameter name="CAPTION" value="EDI Incoming Status"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="EdiLevOfServ">
<Type>Dict.Edi278LevelOfService</Type>
<Parameter name="CAPTION" value="EDI Level Of Service"/>
</Property>

<ForeignKey name="EdiLevOfServ">
<Properties>EdiLevOfServ</Properties>
<ReferencedClass>Dict.Edi278LevelOfService</ReferencedClass>
</ForeignKey>

<Property name="EdiProvType">
<Description>
EDI X12 Provider Type.</Description>
<Type>Dict.Edi278ProvType</Type>
<Parameter name="CAPTION" value="Edi Provider Type"/>
</Property>

<ForeignKey name="EdiProvType">
<Properties>EdiProvType</Properties>
<ReferencedClass>Dict.Edi278ProvType</ReferencedClass>
</ForeignKey>

<Property name="EdiRefPrvTaxonomyCode">
<Description>
This field contains the EDI Taxonomy Code for the referring provider (Requestor)
.  This element was designed for use with referrals which are filed via EDI,
but can also be used for manual referral entry. The same column can be used in
FDL to send in outbound EDI Response files.</Description>
<Type>Dict.EdiProviderTaxonomyCodes</Type>
<Parameter name="CAPTION" value="Edi Ref Prv Taxonomy Code"/>
</Property>

<ForeignKey name="EdiRefPrvTaxonomyCode">
<Properties>EdiRefPrvTaxonomyCode</Properties>
<ReferencedClass>Dict.EdiProviderTaxonomyCodes</ReferencedClass>
</ForeignKey>

<Property name="EdiRejReason">
<Description>
This column contains the EDI Authorization Reject Reason.</Description>
<Type>Dict.Edi278RejectReasonCodes</Type>
<Parameter name="CAPTION" value="EDI Reject Reason"/>
</Property>

<ForeignKey name="EdiRejReason">
<Properties>EdiRejReason</Properties>
<ReferencedClass>Dict.Edi278RejectReasonCodes</ReferencedClass>
</ForeignKey>

<Property name="EdiReq">
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi Request"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="EdiReqCat">
<Type>Dict.Edi278RequestCategoryCodes</Type>
<Parameter name="CAPTION" value="Edi Request Category"/>
</Property>

<ForeignKey name="EdiReqCat">
<Properties>EdiReqCat</Properties>
<ReferencedClass>Dict.Edi278RequestCategoryCodes</ReferencedClass>
</ForeignKey>

<Property name="EdiServType">
<Type>Dict.Edi278ServiceTypeCode</Type>
<Parameter name="CAPTION" value="EDI Service Type"/>
</Property>

<ForeignKey name="EdiServType">
<Properties>EdiServType</Properties>
<ReferencedClass>Dict.Edi278ServiceTypeCode</ReferencedClass>
</ForeignKey>

<Property name="EdiSvcPrvTaxonomyCode">
<Description>
This field contains the EDI Taxonomy Code for the refer to (Service) provider.
This element was designed for use with referrals which are filed via EDI, but
can also be used for manual referral entry. The same column can be used in FDL
to send in outbound EDI Response files.</Description>
<Type>Dict.EdiProviderTaxonomyCodes</Type>
<Parameter name="CAPTION" value="Edi Svc Prv Taxonomy Code"/>
</Property>

<ForeignKey name="EdiSvcPrvTaxonomyCode">
<Properties>EdiSvcPrvTaxonomyCode</Properties>
<ReferencedClass>Dict.EdiProviderTaxonomyCodes</ReferencedClass>
</ForeignKey>

<Property name="EdiTradingPartner">
<Description>
EDI Trading Partner used for most recent EDI referral processing.</Description>
<Type>Dict.EdiTradingPartner</Type>
<Parameter name="CAPTION" value="Edi Trading Partner"/>
</Property>

<ForeignKey name="EdiTradingPartner">
<Properties>EdiTradingPartner</Properties>
<ReferencedClass>Dict.EdiTradingPartner</ReferencedClass>
</ForeignKey>

<Property name="EdiX12Status">
<Type>Dict.Edi278HealthCareServiceReviewActionCodeResponses</Type>
<Parameter name="CAPTION" value="EDI X12 Status"/>
</Property>

<ForeignKey name="EdiX12Status">
<Properties>EdiX12Status</Properties>
<ReferencedClass>Dict.Edi278HealthCareServiceReviewActionCodeResponses</ReferencedClass>
</ForeignKey>

<Property name="EquipNm">
<Type>%String</Type>
<Parameter name="CAPTION" value="Equipment Name"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="EquipReasonDesc">
<Description>
This column contais the oxygen equipment reason description.  It may be used in
the CR505 segment of the 2000F loop of an electronic 278 (Referral) transaction</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Equip Reason Desc"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="EstDob">
<Description>
This column contains the estimated date of birth.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Estimated Dob"/>
</Property>

<Property name="EstPendLiab">
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Estimated Pending Liability"/>
</Property>

<Property name="ExpAdmDt">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Expected Admission Date"/>
</Property>

<Property name="ExpDischDt">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Expected Discharge Date"/>
</Property>

<Property name="ExpLos">
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Expected Length Of Stay"/>
</Property>

<Property name="ExpSurgDt">
<Description>
This column contains the expected surgery date. It may be used in the DTP03
segment of the 2000F loop of the an electronic 278 (Referral) transaction</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Expected Surgery Date"/>
</Property>

<Property name="Extnum">
<Description><![CDATA[
This column is created for the Referral w/o Enrollment project.
It collects the external referral number. Note this is different than the REX.
<P>]]></Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="External Referral #"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FirstEncDt">
<Type>%Date</Type>
<Parameter name="CAPTION" value="First Encounter Date"/>
</Property>

<Property name="FollowUpToIp">
<Type>%String</Type>
<Parameter name="CAPTION" value="Follup Up To Inpatient"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="GlCredit">
<Description>
 </Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Gl Credit Number"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="GlDebit">
<Description>
 </Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Gl Debit Account Number"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HhCertTypeCode">
<Description>
This column is a look-up to D22147 and indicates the type of certification.  It
may be used in the CR608 segment of the 2000F loop of an electronic 278
(Referral) transaction</Description>
<Type>Dict.HomeHealthCertificationTypeCode</Type>
<Parameter name="CAPTION" value="Hh Cert Type Code"/>
</Property>

<ForeignKey name="HhCertTypeCode">
<Properties>HhCertTypeCode</Properties>
<ReferencedClass>Dict.HomeHealthCertificationTypeCode</ReferencedClass>
</ForeignKey>

<Property name="HhMedCovInd">
<Description>
This column contains the Medicare Coverage indicator for the patient.  It may
be used in 2000F-CR6-07 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>Dict.CondOrRespCodeYNU</Type>
<Parameter name="CAPTION" value="Hh Medicare Coverage Indicator"/>
</Property>

<ForeignKey name="HhMedCovInd">
<Properties>HhMedCovInd</Properties>
<ReferencedClass>Dict.CondOrRespCodeYNU</ReferencedClass>
</ForeignKey>

<Property name="HhNsfInd">
<Description>
This column contains the Home Health NSF indicator for the patient.  It may be
used in 2000F-CR6-06 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>Dict.CondOrRespCodeYNU</Type>
<Parameter name="CAPTION" value="Hh Nsf Indicator"/>
</Property>

<ForeignKey name="HhNsfInd">
<Properties>HhNsfInd</Properties>
<ReferencedClass>Dict.CondOrRespCodeYNU</ReferencedClass>
</ForeignKey>

<Property name="HhPhyContDt">
<Description>
This column contains the Home Health Physician Contact date.  It may be used in
2000F-CR6-14 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Hh Physician Contact Date"/>
</Property>

<Property name="HhPhyOrdDt">
<Description>
This column contains the Home Health Physician Order date.  It may be used in
2000F-CR6-12 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Hh Physician Order Date"/>
</Property>

<Property name="HhPrognosisCode">
<Description>
This column contains the Home Health patient's prognosis code.  It may be used
in 2000F-CR6-01 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>Dict.PatientPrognosisCode</Type>
<Parameter name="CAPTION" value="Hh Prognosis Code"/>
</Property>

<ForeignKey name="HhPrognosisCode">
<Properties>HhPrognosisCode</Properties>
<ReferencedClass>Dict.PatientPrognosisCode</ReferencedClass>
</ForeignKey>

<Property name="HhStartDt">
<Description>
This column contains the Home Health start date for the patient.  It may be
used in 2000F-CR6-02 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Hh Start DT"/>
</Property>

<Property name="Hmo">
<Type>Dict.HmoProfile</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="Hmo">
<Properties>Hmo</Properties>
<ReferencedClass>Dict.HmoProfile</ReferencedClass>
</ForeignKey>

<Property name="Id">
<Type>Registration.Patient</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<ForeignKey name="Id">
<Properties>Id</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="InpOut">
<Type>%String</Type>
<Parameter name="CAPTION" value="Inpatient Outpatient"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/I/O/"/>
</Property>

<Property name="InsApprBy">
<Description>
Party from the insurer who approved the request.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Insurance Approved By"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="InsApprDt">
<Description>
Date insurer approved request.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Insurance Approved Date"/>
</Property>

<Property name="InOutArea">
<Type>%String</Type>
<Parameter name="CAPTION" value="In Out Area"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/I/O/"/>
</Property>

<Property name="LastEditBy">
<Description>
This column contains the USERNAME of the person that last edited the referral.</Description>
<Type>SecurityPlus.Usr</Type>
<Parameter name="CAPTION" value="Last Edit By"/>
</Property>

<ForeignKey name="LastEditBy">
<Properties>LastEditBy</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="LastEditDt">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Last Edit Date"/>
</Property>

<Property name="LastMensPd">
<Description>
This column contains the last menstrual period.  It may be used in the DTP03
segment of the 2000C or 2000D loop of an electronic 278 (Referral) transaction</Description>
<Type>DBMS.AccountingPeriod</Type>
<Parameter name="CAPTION" value="Last Menstrual Pd"/>
</Property>

<Property name="LastVisitDt">
<Description>
This column contains the date last seen by a physician.  It may be used in the
CR613 segment of the 2000F loop of an electronic 278 (Referral) transaction</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Last Visit Date"/>
</Property>

<Property name="LevelOfCare">
<Type>Dict.HmoGenericDictionary2</Type>
<Parameter name="CAPTION" value="Level Of Care"/>
</Property>

<ForeignKey name="LevelOfCare">
<Properties>LevelOfCare</Properties>
<ReferencedClass>Dict.HmoGenericDictionary2</ReferencedClass>
</ForeignKey>

<Property name="Loc">
<Type>Dict.Location</Type>
<Parameter name="CAPTION" value="Location"/>
</Property>

<ForeignKey name="Loc">
<Properties>Loc</Properties>
<ReferencedClass>Dict.Location</ReferencedClass>
</ForeignKey>

<Property name="MaxAmt">
<Description>
        This is maximum $ benifit for the referral.  Use with caution</Description>
<Type>DBMS.Currency</Type>
</Property>

<Property name="MaxDays">
<Description>
        Beware Global doc says use with caution</Description>
<Type>%Numeric</Type>
</Property>

<Property name="MeasurementCode">
<Description>
This column contains the Spinal Manipulation unit or basis measurement code. 
The valid choices are:
DA - Day                WK - Week
MO - Month              YR - Year</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Measurement Code"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/DA/MO/WK/YR/"/>
</Property>

<Property name="MedApprBy">
<Description>
Physician who medically approved request.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Medically Approved By"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MedApprDt">
<Description>
Date physician medically approved request.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Medically Approved Date"/>
</Property>

<Property name="MedCovIndicator">
<Description><![CDATA[
This column indicates if the patient is covered by Medicare.  Valid responses
are Y,N, & U.  It may be used in the CR607 segment of the 2000F loop on an
electronic 278 (Referral) transaction]]></Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Medicare Cov Indicator"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/U/"/>
</Property>

<Property name="MonthlyTreatmentCnt">
<Description>
This column captures the number of treatments rendered in the month of service.
 It may be used in the CR207 segment of the 2000F loop of an electronic 278
(Referral) transaction.</Description>
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Monthly Treatment Count"/>
</Property>

<Property name="NatureCondCode">
<Description><![CDATA[
This column captures the nature of a patient's condition.  It may be used in
the CR208 segment of the 2000F loop of an electronic 278 (Referral) transaction.
<P>]]></Description>
<Type>Dict.NatureOfConditionCode</Type>
<Parameter name="CAPTION" value="Nature Cond Code"/>
</Property>

<ForeignKey name="NatureCondCode">
<Properties>NatureCondCode</Properties>
<ReferencedClass>Dict.NatureOfConditionCode</ReferencedClass>
</ForeignKey>

<Property name="NewBorn">
<Type>%Date</Type>
<Parameter name="CAPTION" value="New Born"/>
</Property>

<Property name="NsgHomeResStatusCode">
<Description>
This column contains the status of the nursing home resident at the time of
service.  It may be used in the CL104 segment of the 2000F loop of an
electronic 278 (Referral) transaction</Description>
<Type>Dict.NursingHomeResStatCode</Type>
<Parameter name="CAPTION" value="Nsg Home Res Status Code"/>
</Property>

<ForeignKey name="NsgHomeResStatusCode">
<Properties>NsgHomeResStatusCode</Properties>
<ReferencedClass>Dict.NursingHomeResStatCode</ReferencedClass>
</ForeignKey>

<Property name="OnsetCurSymp">
<Description>
This column contains the onset of current symptoms or Illness date.  It may be
used in the DTP03 segment of the 2000C or 2000D loop of an electronic 278
(Referral) transaction</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Onset Cur Symp"/>
</Property>

<Property name="OpenFsc">
<Description>
This column contains the FSC which issued the Open Referral. 
This is the column used in OPEN HMO Referrals only.
v8.0</Description>
<Type>Dict.FSC</Type>
<Parameter name="CAPTION" value="Open FSC"/>
</Property>

<ForeignKey name="OpenFsc">
<Properties>OpenFsc</Properties>
<ReferencedClass>Dict.FSC</ReferencedClass>
</ForeignKey>

<Property name="Operated">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="OrigRefNum">
<Description>
When a referral is moved/replaced this column contains the original referral 
external number.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Orginal Referral Number"/>
</Property>

<Property name="OutOfNetwork">
<Type>%String</Type>
<Parameter name="CAPTION" value="Out of Network"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="OxygenFlowRate">
<Description>
This column contains the oxygen flow rate in liters per minute.  It may be used
in the CR506 segment of the 2000F loop of an electronic 278 (Referral)
transaction</Description>
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Oxygen Flow Rate"/>
<Parameter name="SCALE" value="2"/>
</Property>

<Property name="OxyDeliverySysCode">
<Description>
This column is a look-up to D22145 and contains the particular form of delivery
that was prescribed.  It may be used in the CR517 segment of the 2000F loop on
an electronic 278 (Referral) transaction</Description>
<Type>Dict.OxygenDeliverySystem</Type>
<Parameter name="CAPTION" value="Oxy Delivery Sys Code"/>
</Property>

<ForeignKey name="OxyDeliverySysCode">
<Properties>OxyDeliverySysCode</Properties>
<ReferencedClass>Dict.OxygenDeliverySystem</ReferencedClass>
</ForeignKey>

<Property name="OxyEquipTypeCode">
<Description>
This column is a look-up to D22141 and indicates the specific type of equipment
being prescribed for the delivery of oxygen.  It may be used in the CR503
segment of the 2000F loop of an electronic 278 (Referral) transaction</Description>
<Type>Dict.OxygenEquipmentTypeCode</Type>
<Parameter name="CAPTION" value="Oxy Equip Type Code"/>
</Property>

<ForeignKey name="OxyEquipTypeCode">
<Properties>OxyEquipTypeCode</Properties>
<ReferencedClass>Dict.OxygenEquipmentTypeCode</ReferencedClass>
</ForeignKey>

<Property name="OxyEquipTypeCode2">
<Description>
This column is a look-up to D22141 and indicates the specific type of equipment
being prescribed for the delivery of oxygen.  It may be used in the CR504
segment of the 2000F loop of an electronic 278 (Referral) transaction</Description>
<Type>Dict.OxygenEquipmentTypeCode</Type>
<Parameter name="CAPTION" value="Oxy Equip Type Code"/>
</Property>

<ForeignKey name="OxyEquipTypeCode2">
<Properties>OxyEquipTypeCode2</Properties>
<ReferencedClass>Dict.OxygenEquipmentTypeCode</ReferencedClass>
</ForeignKey>

<Property name="OxySaturationQty">
<Description>
This column contains the Oxygen Saturation Quantity.  It may be used in the
CR511 segment of the 2000F loop of an electronic 278 (Referral) transaction</Description>
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Oxy Saturation Qty"/>
</Property>

<Property name="OxyTestCondCode">
<Description>
This column is a look-up to D22143 and contains the conditions under which a
patient was tested.  It may be used in the CR512 segment of the 2000F loop of
an electronic 278 (Referral) transaction</Description>
<Type>Dict.OxygenTestConditionCode</Type>
<Parameter name="CAPTION" value="Oxy Test Cond Code"/>
</Property>

<ForeignKey name="OxyTestCondCode">
<Properties>OxyTestCondCode</Properties>
<ReferencedClass>Dict.OxygenTestConditionCode</ReferencedClass>
</ForeignKey>

<Property name="OxyTestFindCode">
<Description>
This column is a look-up to D22144 and contains the findings of oxygen tests
performed on a patient.  It may be used in the CR514 segment of the 2000F loop
of an electronic 278 (Referral) transaction</Description>
<Type>Dict.OxygenTestFindingsCode</Type>
<Parameter name="CAPTION" value="Oxy Test Find Code"/>
</Property>

<ForeignKey name="OxyTestFindCode">
<Properties>OxyTestFindCode</Properties>
<ReferencedClass>Dict.OxygenTestFindingsCode</ReferencedClass>
</ForeignKey>

<Property name="OxyUseHourRate">
<Description>
This column contains the number of hours per period of oxygen use.  It may be
used in the CR508 segment of the 2000F loop of an electronic 278 (Referral)
transaction</Description>
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Oxy Use Hour Rate"/>
</Property>

<Property name="PatCondDesc1">
<Description>
This column contains the patient condition description. It may be used in the
CR210 segment of the 2000F loop on an electronic 278 (Referral) transaction</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Pat Cond Desc 1"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PatCondDesc2">
<Description>
This column contains additional description of the patient's condition.  It may
be used in the CR211 segment of the 2000F loop on an electronic 278 (Referral)
transaction</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Pat Cond Desc 2"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PatEventTrackingNum">
<Description><![CDATA[
This column contains the Patient event tracking number, which can be used in the
TRN02 segment of the 2000C loop of an electronic 278 (Referral) transaction
<P>]]></Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Pat Event Tracking Num"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PatPrognosisCode">
<Description>
This column is a look-up to D22146 and contains the physcian's prognosis for
the patient</Description>
<Type>Dict.PatientPrognosisCode</Type>
<Parameter name="CAPTION" value="Pat Prognosis Code"/>
</Property>

<ForeignKey name="PatPrognosisCode">
<Properties>PatPrognosisCode</Properties>
<ReferencedClass>Dict.PatientPrognosisCode</ReferencedClass>
</ForeignKey>

<Property name="PayType">
<Type>Dict.HmoPayType</Type>
<Parameter name="CAPTION" value="Pay Type"/>
</Property>

<ForeignKey name="PayType">
<Properties>PayType</Properties>
<ReferencedClass>Dict.HmoPayType</ReferencedClass>
</ForeignKey>

<Property name="PcpOfRefPatient">
<Description><![CDATA[
This column retrieves the PCP of the patient at the time the referral was filed.
<P>]]></Description>
<Type>Dict.Provider</Type>
<Parameter name="CAPTION" value="PCP Of Referred Patient"/>
</Property>

<ForeignKey name="PcpOfRefPatient">
<Properties>PcpOfRefPatient</Properties>
<ReferencedClass>Dict.Provider</ReferencedClass>
</ForeignKey>

<Property name="PhyContDt">
<Description>
This column contains the date of the Home Health Agency's most recent contact
with the physician.  It may be used in the CR614 segment of the 2000F loop of
an electronic 278 (Referral) transaction</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Phy Contact Date"/>
</Property>

<Property name="PortOxyFlowRate">
<Description>
This column contains the oxygen flow rate for a portable oxygen system in
liters per minute.  It may be used in the CR516 segment of the 2000F loop of an
electronic 278 (Referral) transaction</Description>
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Port Oxy Flow Rate"/>
</Property>

<Property name="Precert">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="PrecertDt">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Precert Date"/>
</Property>

<Property name="PreCertNum">
<Description>
This column is created for the Referral w/o Pre-Enrollment project.
It collects the pre-cert number for the referral.</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PreConvRefNum">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PriApp">
<Type>%String</Type>
<Parameter name="CAPTION" value="Prior Approval"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="PriEditBy">
<Description>
This column contains a reference to the USERNAME of the person that
edited this referral prior to the current state.</Description>
<Type>SecurityPlus.Usr</Type>
<Parameter name="CAPTION" value="Prior Edit By"/>
</Property>

<ForeignKey name="PriEditBy">
<Properties>PriEditBy</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="PriEditDt">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Prior Edit Date"/>
</Property>

<Property name="PrognosisCode">
<Description>
This column contains the physician's prognosis for the patient.  It can be used
in the UM08 segment of the 2000F loop of an electronic 278 (Referral)
transaction</Description>
<Type>Dict.PrognosisCode</Type>
<Parameter name="CAPTION" value="Prognosis Code"/>
</Property>

<ForeignKey name="PrognosisCode">
<Properties>PrognosisCode</Properties>
<ReferencedClass>Dict.PrognosisCode</ReferencedClass>
</ForeignKey>

<Property name="PrvCertId">
<Description>
This column contains the previous certification identification.  This field is
meant to contain the certification number assigned by the UMO.  It may be used
in the REF02 segment of the 2000F loop of an electronic 278 (Referral)
transaction</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Prv Cert Id"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Reason">
<Type>Dict.HmoReferralReason</Type>
</Property>

<ForeignKey name="Reason">
<Properties>Reason</Properties>
<ReferencedClass>Dict.HmoReferralReason</ReferencedClass>
</ForeignKey>

<Property name="ReasonForRef2">
<Type>%String</Type>
<Parameter name="CAPTION" value="Reason For Referral 2"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReasForRefFrtxt">
<Type>%String</Type>
<Parameter name="CAPTION" value="Reason For Referral"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReferralRequest">
<Description>
Referral Request Id</Description>
<Type>Referrals.ReferralRequest</Type>
<Parameter name="CAPTION" value="Referral Request"/>
</Property>

<Property name="ReferToBa">
<Description><![CDATA[
This is a new referral target created for the FFS referral module.
<P>
<P>]]></Description>
<Type>Dict.BillingArea</Type>
<Parameter name="CAPTION" value="Refer To Billing Area"/>
</Property>

<ForeignKey name="ReferToBa">
<Properties>ReferToBa</Properties>
<ReferencedClass>Dict.BillingArea</ReferencedClass>
</ForeignKey>

<Property name="ReferToDiv">
<Description><![CDATA[
This is a new referral target for internal referrals and External Incoming
Referrals.
<P>]]></Description>
<Type>Dict.Division</Type>
<Parameter name="CAPTION" value="Refer To Division"/>
</Property>

<ForeignKey name="ReferToDiv">
<Properties>ReferToDiv</Properties>
<ReferencedClass>Dict.Division</ReferencedClass>
</ForeignKey>

<Property name="ReferToFreetext">
<Description>
This column is used for FFS Referrals to capture the free-text referring target
if the referral provider is not in the Provider Dictionary (D3) nor in the
Referring Physician Dictionary (D123).</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Refer To Freetext"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReferToFreetextId">
<Description>
This is the free text ID number for the free text refer to physician.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Refer To Freetext ID"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReferToLoc">
<Type>Dict.Location</Type>
<Parameter name="CAPTION" value="Refer To Location"/>
</Property>

<ForeignKey name="ReferToLoc">
<Properties>ReferToLoc</Properties>
<ReferencedClass>Dict.Location</ReferencedClass>
</ForeignKey>

<Property name="ReferToPhy">
<Description>
This column allows the use of dictionary 123 entries as referral targets, this
feature can only be used in Open Referrals and cannot be used in MCA Referrals.</Description>
<Type>Dict.ReferringPhysician</Type>
<Parameter name="CAPTION" value="Refer To Referring Physician"/>
</Property>

<ForeignKey name="ReferToPhy">
<Properties>ReferToPhy</Properties>
<ReferencedClass>Dict.ReferringPhysician</ReferencedClass>
</ForeignKey>

<Property name="ReferToProv">
<Description>
 </Description>
<Type>Dict.Provider</Type>
<Parameter name="CAPTION" value="Refer To Provider"/>
</Property>

<ForeignKey name="ReferToProv">
<Properties>ReferToProv</Properties>
<ReferencedClass>Dict.Provider</ReferencedClass>
</ForeignKey>

<Property name="ReferToVnd">
<Description>
 </Description>
<Type>Dict.Vendor</Type>
<Parameter name="CAPTION" value="Refer To Vendor"/>
</Property>

<ForeignKey name="ReferToVnd">
<Properties>ReferToVnd</Properties>
<ReferencedClass>Dict.Vendor</ReferencedClass>
</ForeignKey>

<Property name="RefCondCat">
<Description>
This column contains the referral certification condition category. It can be
used in the CRC01 segment of the 2000F loop of an electronic 278 (Referral)
transaction</Description>
<Type>Dict.ReferralCondCategory</Type>
<Parameter name="CAPTION" value="Ref Cond Cat"/>
</Property>

<ForeignKey name="RefCondCat">
<Properties>RefCondCat</Properties>
<ReferencedClass>Dict.ReferralCondCategory</ReferencedClass>
</ForeignKey>

<Property name="RefCondCode">
<Description><![CDATA[
This column contains the referral condition code.  It is a look-up to D22136. 
It can be used in the CRC03 segment of the 2000F loop of an electronic 278
(Referral) transaction
<P>]]></Description>
<Type>Dict.ReferralCondCode</Type>
<Parameter name="CAPTION" value="Ref Cond Code"/>
</Property>

<ForeignKey name="RefCondCode">
<Properties>RefCondCode</Properties>
<ReferencedClass>Dict.ReferralCondCode</ReferencedClass>
</ForeignKey>

<Property name="RefCont">
<Type>%String</Type>
<Parameter name="CAPTION" value="Referral Contact Name"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RefFromEmerg">
<Type>%String</Type>
<Parameter name="CAPTION" value="Referred From Emergency"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="RefNum">
<Description>
This column displays the referral number.  This column is linked to the index
table MCA_I_IX_REF_NUM.  Use of this column in a query Where clause may speed
up processing.</Description>
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Referral Number"/>
<Parameter name="MINVAL" value="1001"/>
</Property>

<Property name="RefPhyD123">
<Description>
This column is used for FFS Referrals to capture the real referral referring
physician in dictionary 123.</Description>
<Type>Dict.ReferringPhysician</Type>
<Parameter name="CAPTION" value="Referring Physician"/>
</Property>

<ForeignKey name="RefPhyD123">
<Properties>RefPhyD123</Properties>
<ReferencedClass>Dict.ReferringPhysician</ReferencedClass>
</ForeignKey>

<Property name="RefPhyFreetext">
<Description>
This column is used for FFS Referrals to capture the free-text referring source
if the referral provider is not in the Provider Dictionary (D3) nor in the
Referring Physician Dictionary (D123). </Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Referring Physician"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RefPhyFreetextAddr1">
<Description>
This column references the first address line associated with the free-text
referring source.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Referring Physician Freetext Address Line 1"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RefPhyFreetextAddr2">
<Description>
This column references the second address line associated with the free-text
referring source.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Referring Physician Freetext Address Line 2"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RefPhyFreetextCty">
<Description>
This column references the city associated with the free-text referring source.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Referring Physician Freetext City"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RefPhyFreetextId">
<Description>
This is the free text ID number for the free text referring physician.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Referring Physician ID"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RefPhyFreetextSt">
<Description><![CDATA[
This column references the state associated with the free-text referring source.
<P>]]></Description>
<Type>Dict.StateProvince</Type>
<Parameter name="CAPTION" value="Referring Physician Freetext State"/>
</Property>

<ForeignKey name="RefPhyFreetextSt">
<Properties>RefPhyFreetextSt</Properties>
<ReferencedClass>Dict.StateProvince</ReferencedClass>
</ForeignKey>

<Property name="RefPhyFreetextTel">
<Description>
This column references the telephone number associated with the free-text
referring source.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Referring Physician Freetext Phone"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RefPhyFreetextZip">
<Description>
This column references the zip code associated with the free-text referring
source.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Referring Physician Freetext ZIP"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RefProv">
<Type>Dict.Provider</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Referring Provider"/>
</Property>

<ForeignKey name="RefProv">
<Properties>RefProv</Properties>
<ReferencedClass>Dict.Provider</ReferencedClass>
</ForeignKey>

<Property name="RefTarget">
<Description>
This column returns the the billing area to render services if it exists, else
the division if it exists, else the referring physician if it exists, else the
vendor if it exists, else the provider if it exists, else the service location 
where care will be provided otherwise the NULL string.</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode> N DN,ID,X S {*}="",X=$S({ReferToBa}:{ReferToBa}_"|"_202,{ReferToDiv}:{ReferToDiv}_"|"_102,{ReferToVnd}:{ReferToVnd}_"|"_471,{ReferToProv}:{ReferToProv}_"|"_3,{ReferToLoc}:{ReferToLoc}_"|"_100,{ReferToPhy}:{ReferToPhy}_"|"_123,1:""),ID=$P(X,"|",1),DN=$P(X,"|",2) S:ID {*}=$P(^DE(DN,ID,0),"^",1) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Referral Target"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="RefType">
<Description>
 </Description>
<Type>Dict.HmoReferralType</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Referral Type"/>
</Property>

<ForeignKey name="RefType">
<Properties>RefType</Properties>
<ReferencedClass>Dict.HmoReferralType</ReferencedClass>
</ForeignKey>

<Property name="ReplacementMem">
<Description>
When a referral is moved/replaced this column contains the Member internal Id 
that the referral was moved from/to</Description>
<Type>Registration.Patient</Type>
<Parameter name="CAPTION" value="Replacement Member"/>
</Property>

<Property name="ReplacementRefNum">
<Description>
When a referral has been moved/replaced this column contains the replacement 
referral number.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Replacement Referral Number"/>
</Property>

<Property name="ReplacementType">
<Description>
This column contains information about the replacement type for a referral when 
it is moved from one patient to another.  The values are
0 = Replacement Referral
1 = Referral has been replaced</Description>
<Type>DBMS.MenuDataType</Type>
<Parameter name="CAPTION" value="Replacement Type"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Replacement/Referral Replaced/"/>
<Parameter name="VALUELIST" value="/0/1/"/>
</Property>

<Property name="ResTherOrderText">
<Description>
This column allows for a free-form description to clarify the related data
elements and their content.  It may be used in the CR509 segment of the 2000F
loop of an electronic 278 (Referral) transaction</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Res Ther Order Text"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RevDt">
<Description>
Date of Review.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Review Date"/>
</Property>

<Property name="Rin">
<Description>
An internal referral identifier.  This number is generated as part of filing a
referral.  Rin values start at 100 and each new referral for an Hmo and Id
incremented by 100.  If a member has 3 referrals for an Hmo then Rin will have
value of 100, 200 and 300.</Description>
<Type>%Integer</Type>
<SqlColumnNumber>4</SqlColumnNumber>
<SqlComputeCode> S {*}=##class(Referrals.Referral).GenerateRin({Hmo},{Id})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="RiskFund">
<Type>Dict.HmoFund</Type>
<Parameter name="CAPTION" value="Risk Management Fund"/>
</Property>

<ForeignKey name="RiskFund">
<Properties>RiskFund</Properties>
<ReferencedClass>Dict.HmoFund</ReferencedClass>
</ForeignKey>

<Property name="RmsType">
<Description>
Indicates the type of Medical Service Request (REFERRAL,PRECERTIFICATION,
AUTHORIZATION).</Description>
<Type>DBMS.MenuDataType</Type>
<Parameter name="CAPTION" value="Rms Type"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Referral/Precertification/Authorization/"/>
<Parameter name="VALUELIST" value="/R/P/A/"/>
</Property>

<Property name="RoomNum">
<Type>%String</Type>
<Parameter name="CAPTION" value="Room Number"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RoundPhy">
<Type>Dict.Vendor</Type>
<Parameter name="CAPTION" value="Rounding Physician"/>
</Property>

<ForeignKey name="RoundPhy">
<Properties>RoundPhy</Properties>
<ReferencedClass>Dict.Vendor</ReferencedClass>
</ForeignKey>

<Property name="SameDayAdm">
<Type>%String</Type>
<Parameter name="CAPTION" value="Same Day Admission"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="Service">
<Description>
The service is a dictionary 37 entry.</Description>
<Type>Dict.Service</Type>
</Property>

<ForeignKey name="Service">
<Properties>Service</Properties>
<ReferencedClass>Dict.Service</ReferencedClass>
</ForeignKey>

<Property name="ServDtFrom">
<Description>
Service from date.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Service Date From"/>
</Property>

<Property name="ServDtTo">
<Description>
Service to date.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Service Date To"/>
</Property>

<Property name="SmTrtmtCnt">
<Description>
This column contains the total number of treatments in the series.  Used when
requesting certification for Spinal Manipulation services.</Description>
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Sm Trtmt Count"/>
</Property>

<Property name="SmTrtmtSeriesNum">
<Description>
This column contains the number this treatment is in a series.  Used in
requesting certification for spinal manipulation services</Description>
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Sm Trtmt Series Num"/>
</Property>

<Property name="SnfIndicator">
<Description><![CDATA[
This column indicates if the patient is receiving care in a 1861J1 (skilled
nursing) facility.  Valid responses are Y,N, & U.  It may be used in the CR606
segment of the 2000F loop of an electronic 278 (Referral) transaction]]></Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Snf Indicator"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/U/"/>
</Property>

<Property name="SourceType">
<Description>
This is the referral source (Referring From) type from D11474.</Description>
<Type>Dict.RefSourceTargetOpt</Type>
<Parameter name="CAPTION" value="Source Type"/>
</Property>

<ForeignKey name="SourceType">
<Properties>SourceType</Properties>
<ReferencedClass>Dict.RefSourceTargetOpt</ReferencedClass>
</ForeignKey>

<Property name="Spec">
<Type>%String</Type>
<Parameter name="CAPTION" value="Specialist"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="SrvTraceNum">
<Description>
This column contains the Service Trace number.  This data is used in the TRN02
segment of the 2000F loop of an electronic 278 (Referral) transaction.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Srv Trace Num"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Statis">
<Type>%String</Type>
<Parameter name="CAPTION" value="Statistical"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="Status">
<Description>
 </Description>
<Type>Dict.HmoReferralStatusFlag</Type>
<Required>1</Required>
</Property>

<ForeignKey name="Status">
<Properties>Status</Properties>
<ReferencedClass>Dict.HmoReferralStatusFlag</ReferencedClass>
</ForeignKey>

<Property name="SubluxationLevelCode">
<Description>
This column identifies the specific level of subluxation.  It may be used in
the CR203 segment in the 2000F loop of an electronic 278 (Referral) transaction</Description>
<Type>Dict.SubluxationLevelCode</Type>
<Parameter name="CAPTION" value="Subluxation Level Code"/>
</Property>

<ForeignKey name="SubluxationLevelCode">
<Properties>SubluxationLevelCode</Properties>
<ReferencedClass>Dict.SubluxationLevelCode</ReferencedClass>
</ForeignKey>

<Property name="SubluxationLevelCodeTo">
<Description>
This column identifies the specific level of subluxation.  It may be used in
the CR204 segment in the 2000F loop of an electronic 278 (Referral) transaction</Description>
<Type>Dict.SubluxationLevelCode</Type>
<Parameter name="CAPTION" value="Subluxation Level Code"/>
</Property>

<ForeignKey name="SubluxationLevelCodeTo">
<Properties>SubluxationLevelCodeTo</Properties>
<ReferencedClass>Dict.SubluxationLevelCode</ReferencedClass>
</ForeignKey>

<Property name="TargetType">
<Description>
This is the referral target (Refer To) type from D11474.</Description>
<Type>Dict.RefSourceTargetOpt</Type>
<Parameter name="CAPTION" value="Target Type"/>
</Property>

<ForeignKey name="TargetType">
<Properties>TargetType</Properties>
<ReferencedClass>Dict.RefSourceTargetOpt</ReferencedClass>
</ForeignKey>

<Property name="TimeOfAdmit">
<Type>%Time</Type>
<Parameter name="CAPTION" value="Time Of Admit"/>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="TimeOfDay">
<Type>%Time</Type>
<Parameter name="CAPTION" value="Time Of Day"/>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="TimeOfVis">
<Type>%Time</Type>
<Parameter name="CAPTION" value="Time Of Visit"/>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="TotEstLiab">
<Type>DBMS.Currency</Type>
</Property>

<Property name="TransDist">
<Description>
This column contains the distance traveled during transport.  It is required
(on a 278 transaction) if known.  Segment is sent on certifications involving
non-emergency ambulance transport of a patient</Description>
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Trans Dist"/>
</Property>

<Property name="TransFromFrtxt">
<Description>
This column contains a free-text entry of where the patient was transported
from.  It may be used in 2000F-CR1-07 (Loop-Segment-Field) of an electronic 278
transaction.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Trans From Frtxt"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TransFromOthHos">
<Type>%String</Type>
<Parameter name="CAPTION" value="Trans From Another Hospital"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="TransToFrtxt">
<Type>%String</Type>
<Parameter name="CAPTION" value="Trans To Free Text"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TransWeight">
<Description>
This column contains the patient weight at the time of transport.  It may be
used in 2000F-CR1-02 (Loop-Segment-Field) of an electronic 278 transaction.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Transport Weight"/>
</Property>

<Property name="TreatmentsAuthorized">
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Treatments Authorized"/>
</Property>

<Property name="TreatmentPdCount">
<Description>
This column captures the time period in the treatment series.  It may be used
in the CR206 segment of the 2000F loop of an electronic 278 (Referral)
transaction</Description>
<Type>DBMS.AccountingPeriod</Type>
<Parameter name="CAPTION" value="Treatment Period Cound"/>
</Property>

<Property name="TypeOfAdm">
<Type>Dict.HmoTypeOfAdmit</Type>
<Parameter name="CAPTION" value="Admit Type"/>
</Property>

<ForeignKey name="TypeOfAdm">
<Properties>TypeOfAdm</Properties>
<ReferencedClass>Dict.HmoTypeOfAdmit</ReferencedClass>
</ForeignKey>

<Property name="UrReviewer">
<Type>Dict.RepresentativeReviewer</Type>
<Parameter name="CAPTION" value="UR Reviewer"/>
</Property>

<ForeignKey name="UrReviewer">
<Properties>UrReviewer</Properties>
<ReferencedClass>Dict.RepresentativeReviewer</ReferencedClass>
</ForeignKey>

<Property name="ValidFromDt">
<Description>
This is the valid from date.  If no valid from date is supplied by the user
then this field is defaulted from either the admit date or the date ordered.</Description>
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Valid From Date"/>
</Property>

<Property name="ValidThru">
<Description>
This Valid through is used for referral type.  DME - the Rental/Purchase one.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Valid Thru"/>
</Property>

<Property name="ValidToDt">
<Description>
 </Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Valid To Date"/>
</Property>

<Property name="VndrCat">
<Type>Dict.VendorCategory</Type>
<Parameter name="CAPTION" value="Vendor Category"/>
</Property>

<ForeignKey name="VndrCat">
<Properties>VndrCat</Properties>
<ReferencedClass>Dict.VendorCategory</ReferencedClass>
</ForeignKey>

<Property name="VndAddr">
<Type>%String</Type>
<Parameter name="CAPTION" value="Vendor Address"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="VndTel">
<Type>DBMS.Telephone</Type>
<Parameter name="CAPTION" value="Vendor Phone"/>
</Property>

<Property name="XrayAvailability">
<Description>
This column contains the XRAY availability response. </Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Xray Availability"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="Anesthesia">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/GENERAL/LOCAL/NONE/"/>
<Parameter name="VALUELIST" value="/1/2/3/"/>
</Property>

<Property name="Coverage">
<Description>
What is the coverage for the referral</Description>
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/100%/Denied/Combo/"/>
<Parameter name="VALUELIST" value="/1/2/3/"/>
</Property>

<Property name="DayOfWeekSat1st">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/SA/SU/MO/TU/WE/TH/FR/"/>
<Parameter name="VALUELIST" value="/1/2/3/4/5/6/7/"/>
</Property>

<Property name="DayOfWeekSun1st">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/SU/MO/TU/WE/TH/FR/SA/"/>
<Parameter name="VALUELIST" value="/1/2/3/4/5/6/7/"/>
</Property>

<Property name="IncomingOutgoing">
<Description><![CDATA[
This column is used by MCA_B_REF.INCOMING_OUTGOING in Report Writer to derived 
the string INCOMING, OUTGOING or blank. Do not put this column on screens.    
This column is created for the Referral w/o Pre-Enrollment project.            
<P>]]></Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/1/2/"/>
</Property>

<Property name="IntExt">
<Description>
A flag indicating if the referral was Internal or External</Description>
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/External/Internal/"/>
<Parameter name="VALUELIST" value="/1/2/"/>
</Property>

<Property name="InOutArea2">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/I/O/"/>
<Parameter name="VALUELIST" value="/1/2/"/>
</Property>

<Property name="ReasStatis">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/OTHER/"/>
<Parameter name="VALUELIST" value="/1/"/>
</Property>

<Property name="RegMicu">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/REGULAR/MICU/"/>
<Parameter name="VALUELIST" value="/1/2/"/>
</Property>

<Property name="RentPur">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/RENTAL/PURCHASE/MAINTAINANCE/OTHER/"/>
<Parameter name="VALUELIST" value="/1/2/3/4/"/>
</Property>

<Property name="RiskFactor">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Normal/At Risk/High Risk/"/>
<Parameter name="VALUELIST" value="/1/2/3/"/>
</Property>

<Property name="TransFrom">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Hospital/Home/Nursing Home/Doctors Office/Accident Site/Other/"/>
<Parameter name="VALUELIST" value="/1/2/3/4/5/6/"/>
</Property>

<Property name="TransTo">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Hospital/Home/Nursing Home/Doctors Office/Other/"/>
<Parameter name="VALUELIST" value="/1/2/3/4/5/"/>
</Property>

<Property name="TypeOfHhc">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/SN/PT/OT/HHA/LPN/RN/ST/IT/NA/OTHER/"/>
<Parameter name="VALUELIST" value="/1/2/3/4/5/6/7/8/9/10/"/>
</Property>

<Property name="TypeOfHomeHealth">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/VN/PT/OT/ST/SS/HHA/"/>
<Parameter name="VALUELIST" value="/1/2/3/4/5/6/"/>
</Property>

<Property name="TypeOfTherapy">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Speech/Physical/Occupational/Other/"/>
<Parameter name="VALUELIST" value="/1/2/3/4/"/>
</Property>

<Property name="Urgency">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Emergency/Elective/Unkown/"/>
<Parameter name="VALUELIST" value="/1/2/3/"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Hmo,Id,Rin</Properties>
<Unique>1</Unique>
</Index>

<Index name="ZActAdmDt">
<Type>index</Type>
<Properties>Hmo,ActAdmDt,RefNum</Properties>
</Index>

<Index name="ZActDischDt">
<Type>index</Type>
<Properties>Hmo,ActDischDt,RefNum</Properties>
</Index>

<Index name="ZCreatedBy">
<Type>index</Type>
<Properties>Hmo,CreatedBy,RefNum</Properties>
</Index>

<Index name="ZDtOrd">
<Type>index</Type>
<Properties>Hmo,DtOrd,RefNum</Properties>
</Index>

<Index name="ZExpAdmDt">
<Type>index</Type>
<Properties>Hmo,ExpAdmDt,RefNum</Properties>
</Index>

<Index name="ZExpDischDt">
<Type>index</Type>
<Properties>Hmo,ExpDischDt,RefNum</Properties>
</Index>

<Index name="ZExtnum">
<Type>index</Type>
<Properties>Hmo,Extnum,RefNum</Properties>
</Index>

<Index name="ZReferToBa">
<Type>index</Type>
<Properties>Hmo,ReferToBa,RefNum</Properties>
</Index>

<Index name="ZReferToDiv">
<Type>index</Type>
<Properties>Hmo,ReferToDiv,RefNum</Properties>
</Index>

<Index name="ZReferToLoc">
<Type>index</Type>
<Properties>Hmo,ReferToLoc,RefNum</Properties>
</Index>

<Index name="ZReferToPhy">
<Type>index</Type>
<Properties>Hmo,ReferToPhy,RefNum</Properties>
</Index>

<Index name="ZReferToProv">
<Type>index</Type>
<Properties>Hmo,ReferToProv,RefNum</Properties>
</Index>

<Index name="ZReferToVnd">
<Type>index</Type>
<Properties>Hmo,ReferToVnd,RefNum</Properties>
</Index>

<Index name="ZRefNum">
<Type>index</Type>
<Properties>Hmo,RefNum</Properties>
<Unique>1</Unique>
</Index>

<Index name="ZRefProv">
<Type>index</Type>
<Properties>Hmo,RefProv,RefNum</Properties>
</Index>

<Index name="ZRefType">
<Type>index</Type>
<Properties>Hmo,RefType,RefNum</Properties>
</Index>

<Index name="ZStatus">
<Type>index</Type>
<Properties>Hmo,Status,RefNum</Properties>
</Index>

<Index name="ZValidFromDt">
<Type>index</Type>
<Properties>Hmo,ValidFromDt,RefNum</Properties>
</Index>

<Index name="ZValidToDt">
<Type>index</Type>
<Properties>Hmo,ValidToDt,RefNum</Properties>
</Index>

<ForeignKey name="Batch">
<Properties>Hmo,ClmBtc</Properties>
<ReferencedClass>MCA.Claim.Batch</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Trigger name="DeleteCleanup">
<Code>
 N ARCHMO,GSYS,GUCI,MCAMHMO,MCAPHMO,SYHC,SYHCL,SYHED,SYHM,SYHP,SYHPB,SYHR,SYHRG,UCHC,UCHCL,UCHED,UCHM,UCHP,UCHPB,UCHR,UCHRG N HMO S HMO={Hmo}
 s hmo={Hmo}
 S ARCHMO=$p($g(^["MHRREG"]HMO(hmo)),"^",16),GSYS=$p($g(^["MHRREG"]HMO(hmo)),"^",20),GUCI=$p($g(^["MHRREG"]HMO(hmo)),"^",19),MCAMHMO=$p($g(^["MHRREG"]HMO(hmo)),"^",16),MCAPHMO=$p($g(^["MHRREG"]HMO(hmo)),"^",15),SYHC=$p($g(^["MHRREG"]HMO(hmo)),"^",12),SYHCL=$p($g(^["MHHREG"]HMO(hmo)),"^",10),SYHED=$p($g(^["MHRREG"]HMO(hmo)),"^",18),SYHM=$p($g(^["MHRREG"]HMO(hmo)),"^",2),SYHP=$p($g(^["MHRREG"]HMO(hmo)),"^",8),SYHPB=$p($g(^["MHRREG"]HMO(hmo)),"^",6),SYHR=$p($g(^["MHRREG"]HMO(hmo)),"^",4),SYHRG=$p($g(^["MHRREG"]HMO(hmo)),"^",14),UCHC=$p($g(^["MHRREG"]HMO(hmo)),"^",11),UCHCL=$p($g(^["MHRREG"]HMO(hmo)),"^",9),UCHED=$p($g(^["MHRREG"]HMO(hmo)),"^",17),UCHM=$p($g(^["MHRREG"]HMO(hmo)),"^",1),UCHP=$p($g(^["MHRREG"]HMO(hmo)),"^",7),UCHPB=$p($g(^["MHRREG"]HMO(hmo)),"^",5),UCHR=$p($g(^["MHRREG"]HMO(hmo)),"^",3),UCHRG=$p($g(^["MHRREG"]HMO(hmo)),"^",13)

 k ^["MHRHMO"]HMOREF({Hmo},{Id},{Rin})</Code>
<Event>DELETE</Event>
<Time>AFTER</Time>
</Trigger>

<Trigger name="CheckRequired">
<Code><![CDATA[
 N ARCHMO,GSYS,GUCI,MCAMHMO,MCAPHMO,SYHC,SYHCL,SYHED,SYHM,SYHP,SYHPB,SYHR,SYHRG,UCHC,UCHCL,UCHED,UCHM,UCHP,UCHPB,UCHR,UCHRG N HMO S HMO={Hmo}
 s hmo={Hmo}
 S ARCHMO=$p($g(^["MHRREG"]HMO(hmo)),"^",16),GSYS=$p($g(^["MHRREG"]HMO(hmo)),"^",20),GUCI=$p($g(^["MHRREG"]HMO(hmo)),"^",19),MCAMHMO=$p($g(^["MHRREG"]HMO(hmo)),"^",16),MCAPHMO=$p($g(^["MHRREG"]HMO(hmo)),"^",15),SYHC=$p($g(^["MHRREG"]HMO(hmo)),"^",12),SYHCL=$p($g(^["MHRREG"]HMO(hmo)),"^",10),SYHED=$p($g(^["MHRREG"]HMO(hmo)),"^",18),SYHM=$p($g(^["MHRREG"]HMO(hmo)),"^",2),SYHP=$p($g(^["MHRREG"]HMO(hmo)),"^",8),SYHPB=$p($g(^["MHRREG"]HMO(hmo)),"^",6),SYHR=$p($g(^["MHRREG"]HMO(hmo)),"^",4),SYHRG=$p($g(^["MHRREG"]HMO(hmo)),"^",14),UCHC=$p($g(^["MHRREG"]HMO(hmo)),"^",11),UCHCL=$p($g(^["MHRREG"]HMO(hmo)),"^",9),UCHED=$p($g(^["MHRREG"]HMO(hmo)),"^",17),UCHM=$p($g(^["MHRREG"]HMO(hmo)),"^",1),UCHP=$p($g(^["MHRREG"]HMO(hmo)),"^",7),UCHPB=$p($g(^["MHRREG"]HMO(hmo)),"^",5),UCHR=$p($g(^["MHRREG"]HMO(hmo)),"^",3),UCHRG=$p($g(^["MHRREG"]HMO(hmo)),"^",13)

 I {RefTarget}="" s %ok=0,%msg="A referral target is required to file." Q

 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 N OPENHMO,HMO S HMO={Hmo}
 &SQL(SELECT OpenHmo INTO :OPENHMO FROM Dict.HmoProfile WHERE Id=:HMO(hmo))
 I 'OPENHMO,'{Cin} {
  s %ok=0
  s %msg="A Cin is quired to file when an Enrollment Hmo."
 }
 I {RiskFund}="" {
   N UsingRiskMgmt &SQL(SELECT UsingRiskMgmt INTO :UsingRiskMgmt
                        FROM   MCA.SystemOption)
   I UsingRiskMgmt'="Y" S %ok=0,%msg="A risk fund is required to file."
 }
 Q]]></Code>
<Event>INSERT/UPDATE</Event>
</Trigger>

<Trigger name="AllowUpdate">
<Code>
 N ARCHMO,GSYS,GUCI,MCAMHMO,MCAPHMO,SYHC,SYHCL,SYHED,SYHM,SYHP,SYHPB,SYHR,SYHRG,UCHC,UCHCL,UCHED,UCHM,UCHP,UCHPB,UCHR,UCHRG N HMO S HMO={Hmo}
 s hmo={hmo}
 S ARCHMO=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",16),GSYS=$p($g(^["MHRREG"]HMO(hmo)),"^",20),GUCI=$P($G(^["MHRREG"]HMO(HMO)),"^",19),MCAMHMO=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",16),MCAPHMO=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",15)
 s SYHC=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",12),SYHCL=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",10),SYHED=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",18)
 s SYHM=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",2),SYHP=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",8),SYHPB=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",6),SYHR=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",4),SYHRG=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",14),UCHC=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",11),UCHCL=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",9),UCHED=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",17),UCHM=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",1),UCHP=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",7),UCHPB=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",5),UCHR=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",3),UCHRG=$P($G(^["MHRREG"]HMO(HMO(hmo))),"^",13)

 ;</Code>
<Event>UPDATE</Event>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.Referral"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYHP) D UCHP^UDDMCA  ;Get extended syntax for MCA_A_TBL_OUTPUT_PROD
 If '$D(SYE)!'$D(SYHP) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYHP) D UCHP^UDDMCA  ;Get extended syntax for MCA_A_TBL_OUTPUT_PROD
 If '$D(SYE)!'$D(SYHP) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="ByHmoId">
<Description>
Provided a comma delimited list of internal Hmos and Internal Id get a list of
referrals in reverse order.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%String,Id:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT %ID As Rowid,
       RefNum, RefType->Mnemonic As RefTypeMnemonic,
       RefType->Name As ReferralType,
       COALESCE(ReferToBa->Name,ReferToDiv->Name,ReferToLoc->Name,
                ReferToProv->Name,ReferToPhy->Name,ReferToVnd->Name)
       As ReferTo,
       %External(IntExt) As InternalExternal,
       ValidFromDt,ValidToDt, Status->Name As Status,
       Status->Mnemonic As StatusMnemonic, Descr, ExtNum,
       OpenFsc->Mnemonic As FSCMnemonic, OpenFsc->Name As OpenFSC

FROM      Referrals.Referral
WHERE     (Hmo %INLIST $LISTFROMSTRING(:Hmo,',') AND  Id = :Id)
          AND (DBMS.Tools_HmoPassSecurity(Hmo,USER)=1)
ORDER BY  Hmo,Rin DESC]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Rowid:%String,RefNum:%Integer,RefTypeMnemonic:%String,ReferralType:%String,ReferTo:%String,InternalExternal:%String,ValidFromDt:%Date,ValidToDt:%Date,Status:%String,StatusMnemonic:%String,Descr:%String,Extnum:%String,FSCMnemonic:%String,OpenFSC:%String"/>
</Query>

<Query name="ByRefNum">
<Description>
Provided an Hmo and RefNum get the matching Id</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%String,RefNum:%Integer,Grp:%Integer,DeactFilter:%Boolean="1",YearOfBirth:%Integer,Sex:%String,ApproximateAge:%Integer,Org:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT    
       Id,Id->PatNm,Id->Mrn,Id->DeactDt,Id->Sex,Id->Dob,
       Id->GuarNmIfNotPat, DBMS.Tools_Age(Id->Dob,CURRENT_DATE) As Age, 
       Id->Tel, DBMS.Tools_MaskField(Id->Ssn,4) As Ssn,
       Id->StreetAddrL1,Id->StreetAddrL2,Id->CtySt,Id->Zip,
       Registration.PatientAka_List(Id) As Akas,
       Id->PtLicenseNum, Id->EmpTel, Id->CellTel,
       Id->Deceased, Id->DeactReason,
       Registration.PatientOtherNumber_List(Id) As OtherNumbers,
       Registration.PatientEmrn_GetMRN(Id,:Org,1) As EMrn,
       Id->EmailAddress

FROM   Referrals.Referral
WHERE  (Hmo %INLIST $LISTFROMSTRING(:Hmo,',') OR :Hmo IS NULL) AND 
       (RefNum = :RefNum) AND
       (Registration.GroupActivity_PatientRestricted(Id,:Grp)=0) AND
       (:DeactFilter = 0 or (:DeactFilter=1 and Id->DeactDt IS NULL)) AND
      (:YearOfBirth IS NULL OR YEAR(Id->Dob) = :YearOfBirth) AND
      (:Sex IS NULL OR Id->Sex=UCASE(:Sex)) AND
      (:ApproximateAge IS NULL
         OR DATEDIFF('YY',Id->Dob,CURRENT_DATE) BETWEEN :ApproximateAge-5 AND
                                                         :ApproximateAge+5)]]></SqlQuery>
<Parameter name="ROWSPEC" value="Id:%Integer,PatNm:%String,Mrn:%String,DeactDt:%Date,Sex:%String,Dob:%Date,GuarNmIfNotPat:%String,Age:%String,Tel:%String,Ssn:%String,StreetAddrL1:%String,StreetAddrL2:%String,CtySt:%String,Zip:%String,Akas:%String,PtLicenseNum:%String,EmpTel:%String,CellTel:%String,Deceased:%String,DeactReason:%String,OtherNumbers:%String,EMrn:%String,EmailAddress:%String"/>
</Query>

<Query name="ByHmoReferralType">
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%Integer,Type:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT  T1.Hmo->Mnemonic as HMO,
        T1.RefNum,
        T1.Id->PatNm,
        T1.Status->Name As Status,
        T3.Num as MemNum,
        T1.RefType->Mnemonic As RefType,
        LEFT(%EXTERNAL(T1.IntExt),1) As IntExt,
        COALESCE(T1.ReferToBa->Name,T1.ReferToDiv->Name,T1.ReferToLoc->Name,
                 T1.ReferToProv->Name,T1.ReferToPhy->Name,T1.ReferToVnd->Name)
        As ReferTo,
        COALESCE(T1.RefPhyFreetext,T1.RefPhyD123->Name,T1.RefProv->Name) 
        As RefBy,
        T1.CreatedBy,
        T1.DtOrd,
        T1.ValidFromDt
FROM    Referrals.Referral T1 JOIN MCA_Enrollment.Contract T2
        ON (T1.Hmo = T2.Hmo AND T1.Cin = T2.Cin)
        JOIN MCA_Enrollment.ContractMember T3 
        ON (T3.Contract = T2.%Id AND T3.Id = T1.Id)
WHERE   (T1.Hmo = :Hmo and T1.RefType = :Type)

ORDER BY T1.RefNum]]></SqlQuery>
<Parameter name="ROWSPEC" value="HMO,RefNum,PatNm,Status,MemNum,RefType,IntExt,ReferTo,RefBy,CreatedBy,DtOrd,ValidFromDt"/>
</Query>

<Query name="ByExtNum">
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%String,ExtNum:%String,Grp:%Integer,DeactFilter:%Boolean="1",YearOfBirth:%Integer,Sex:%String,ApproximateAge:%Integer,Org:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT
       Id,Id->PatNm,Id->Mrn,Id->DeactDt,Id->Sex,Id->Dob,
       Id->GuarNmIfNotPat, DBMS.Tools_Age(Id->Dob,CURRENT_DATE) As Age,
       Id->Tel, DBMS.Tools_MaskField(Id->Ssn,4) As Ssn,
       Id->StreetAddrL1,Id->StreetAddrL2,Id->CtySt,Id->Zip,
       Registration.PatientAka_List(Id) As Akas,
       Id->PtLicenseNum, Id->EmpTel, Id->CellTel,
       Id->Deceased, Id->DeactReason,
       Registration.PatientOtherNumber_List(Id) As OtherNumbers,
       Registration.PatientEmrn_GetMRN(Id,:Org,1) As EMrn,
       Id->EmailAddress

FROM   Referrals.Referral
WHERE  (Hmo %INLIST $LISTFROMSTRING(:Hmo,',') OR :Hmo IS NULL) AND
       (ExtNum = :ExtNum) AND
       (Registration.GroupActivity_PatientRestricted(Id,:Grp)=0) AND
       (:DeactFilter = 0 or (:DeactFilter=1 and Id->DeactDt IS NULL)) AND
      (:YearOfBirth IS NULL OR YEAR(Id->Dob) = :YearOfBirth) AND
      (:Sex IS NULL OR Id->Sex=UCASE(:Sex)) AND
      (:ApproximateAge IS NULL
         OR DATEDIFF('YY',Id->Dob,CURRENT_DATE) BETWEEN :ApproximateAge-5 AND
                                                         :ApproximateAge+5)]]></SqlQuery>
<Parameter name="ROWSPEC" value="Id:%Integer,PatNm:%String,Mrn:%String,DeactDt:%Date,Sex:%String,Dob:%Date,GuarNmIfNotPat:%String,Age:%String,Tel:%String,Ssn:%String,StreetAddrL1:%String,StreetAddrL2:%String,CtySt:%String,Zip:%String,Akas:%String,PtLicenseNum:%String,EmpTel:%String,CellTel:%String,Deceased:%String,DeactReason:%String,OtherNumbers:%String,EMrn:%String,EmailAddress:%String"/>
</Query>

<Query name="ByHmoDtOrd">
<Description>
Provided a comma delimited list of Hmo Ids, and a Dt range get a list of
referrals by Dt Ordered.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%String,FromDt:%Date,ToDt:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT   T1.Hmo, T1.Hmo->Mnemonic As HmoMnemonic, T1.Id, T1.Id->PatNm As Member,
         T1.RefNum,T1.DtOrd, T1.Rin, T1.Status As StatusId,
         T1.Status->Name As Status, T1.ValidFromDt, T1.ValidToDt,
         T1.RefType->Name As ReferralType

FROM     Referrals.Referral T1

WHERE    ((T1.Hmo %INLIST $LISTFROMSTRING(:Hmo,',')) OR (:Hmo IS NULL))
         AND
         (T1.DtOrd BETWEEN COALESCE(:FromDt,CURRENT_DATE) 
                   AND     COALESCE(:ToDt,CURRENT_DATE))]]></SqlQuery>
<Parameter name="ROWSPEC" value="Hmo:%Integer,HmoMnemonic:%String,Id:%Integer,Member:%String,RefNum:%Integer,DtOrd:%Date,Rin:%Integer,StatusId:%Integer,Status:%String,ValidFromDt:%Date,ValidToDt:%Date,ReferralType:%String"/>
</Query>

<Method name="UserHasAccess">
<Description>
This method is used to determine whether or not a user has access to a referral.
This is done by sending Referral Type logical value as well as 
the AppRou(Application routine) which should be used to get the security 
categories.  This is often = HMO but could be set to BAR or SCHED when 
looking at Open Referrals.  The Security Category List from the application is 
compared against the Referral's Referral Type Security Category if defined, if 
the referral type has no Security Categories then access is allowed.
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>RefType:%Integer,User:%String,AppRou:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECCAT,SYHP,UCHP,UCHT,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Boolean</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYHP) D UCHP^UDDMCA  ;Get extended syntax for MCA_A_TBL_OUTPUT_PROD
 If '$D(SYE)!'$D(SYHP) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 &SQL(SELECT LIST(Item) INTO :RSECCAT FROM Dict.HmoReferralTypeSecurityCategory 
      WHERE HmoReferralType = :RefType)
 I RSECCAT="" Q 1
 &sql(SELECT LIST(SECCAT) INTO :SECCAT FROM SecurityPlus.UsrApplicationCategory 
      WHERE UsrApplication->Usr = :User and
            UsrApplication->AssociatedSystemApplication = :AppRou)
 I SECCAT[(","_RSECCAT_",") Q 1

 Q 1
]]></Implementation>
</Method>

<Method name="CustomSecurity">
<Description>
This method/sqlproc provides user access to MCA AESMAP # 111 and can be used to
determine if a user has access to a specific referral provided
HMO
ID
MCARIN
USER</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>HMO:%Integer,ID:%Integer,MCARIN:%Integer,USER:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UCHM,SYHM,SECID,SEC,RIN,SECID,SECCAT,HMOTBL,SECCAT,SYHP,UCHP,UCHT,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Boolean</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYHP) D UCHP^UDDMCA  ;Get extended syntax for MCA_A_TBL_OUTPUT_PROD
 If '$D(SYE)!'$D(SYHP) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 I '$G(HMO) Q 0
 I '$G(ID) Q 0
 I '$G(MCARIN) Q 0
 N UCHM,SYHM,SECID,SEC,RIN
 S SECID=USER,RIN=MCARIN
 S UCHM=$P($G(^["MHRREG"]HMO(HMO)),SYHM=$P($G(^["MHRREG"]HMO(HMO)),"^",2))
 S SEC=1 D EXEC^UAESMAP("MCA",111,1) I 'SEC Q 1   
 Q 1
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECCAT,SYHP,UCHP,UCHT,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYHP) D UCHP^UDDMCA  ;Get extended syntax for MCA_A_TBL_OUTPUT_PROD
 If '$D(SYE)!'$D(SYHP) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 TSTART
 S HMO="" F  S HMO=$O(HMOTBL(HMO)) Q:HMO=""  D
 . K ^[$P(HMOTBL(HMO),"^",1)]HMOREF(HMO)   ;Data Global
 . K ^[UCHP]HMOINDXR   ;User defined index global
 . K ^[$P(HMOTBL(HMO),"^",1)]HMORIDX(HMO)   ;Standard Index Global
 . K ^[$P(HMOTBL(HMO),"^",1)]HMOREX(HMO)   ;Standard Index Global
 ;Delete the children data
 D ##CLASS(Referrals.ReferralLine).%KillExtent()
 D ##CLASS(Referrals.ReferralAudit).%KillExtent()
 D ##CLASS(Referrals.ReferralLinkedCase).%KillExtent()
 D ##CLASS(Referrals.ReferralLinkedClm).%KillExtent()
 D ##CLASS(Referrals.ReferralLinkedInv).%KillExtent()
 D ##CLASS(Referrals.ReferralAppointment).%KillExtent()
 D ##CLASS(Referrals.ReferralStatusHistory).%KillExtent()
 D ##CLASS(Referrals.ReferralWorkingDx).%KillExtent()
 D ##CLASS(Referrals.ReferralWorkingPx).%KillExtent()
 D ##CLASS(Referrals.ReferralAuthorizedPx).%KillExtent()
 D ##CLASS(Referrals.ReferralDuplicate).%KillExtent()
 D ##CLASS(Referrals.ReferralVisit).%KillExtent()
 D ##CLASS(Referrals.ReferralApptSummary).%KillExtent()
 D ##CLASS(Referrals.ReferralInpatientDt).%KillExtent()
 TCOMMIT
 Q $$$OK
]]></Implementation>
</Method>

<Method name="OkToPurgePatient">
<Description>
Check to see if it is ok to Purge a patient record.  It is ok to delete a
patient record if there are no referrals on the system for the patient.        
       </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECCAT,SYHP,UCHP,UCHT,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYHP) D UCHP^UDDMCA  ;Get extended syntax for MCA_A_TBL_OUTPUT_PROD
 If '$D(SYE)!'$D(SYHP) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009
    #SQLCompile Mode=Deferred
 #endif

 //If we get any Rowids then we cannot allow delete
 &SQL(SELECT  %ID INTO :Rowid 
      FROM    Referrals.Referral
      WHERE   Id = :Id)
 I $G(Rowid)'="" Q 0
 Q 1
]]></Implementation>
</Method>

<Method name="ReferralListSecurity">
<Description>
Implement a call to MCA AESMap 203.  This is used during the referral listing
report.

Internally the variable REFOK is used to determine if the user has access to
the referral.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>REFOK,NUMIN,HMO,UCHM,SYHM,ID,SECID,SECCAT,HMOTBL,SECCAT,SYHP,UCHP,UCHT,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Boolean</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYHP) D UCHP^UDDMCA  ;Get extended syntax for MCA_A_TBL_OUTPUT_PROD
 If '$D(SYE)!'$D(SYHP) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 N REFOK S REFOK=1
 N NUMIN S NUMIN=Rin
 N HMO,ID S HMO=Hmo,ID=Id
 N UCHM,SYHM S UCHM=$P(HMOTBL(HMO),"^",1),SYHM=$P(HMOTBL(HMO),"^",2)
 D EXEC^UAESMAP("MCA",203,1)
 Q $G(REFOK)
]]></Implementation>
</Method>

<Method name="GenerateRin">
<Description>
Provided an Hmo and Id generate a new Rin.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>HMO:%Integer,ID:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECCAT,SYHP,UCHP,UCHT,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYHP) D UCHP^UDDMCA  ;Get extended syntax for MCA_A_TBL_OUTPUT_PROD
 If '$D(SYE)!'$D(SYHP) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 S UCHM="MHRHMO",SYHM=""
 L +^["MHRHMO"]HMOREF(HMO,ID,0) 
 S:'$D(^["MHRHMO"]HMOREF(HMO,ID,0)) ^(0)="" 
 S X=^(0),^(0)=X+1_"^"_$P(X,"^",2,999),RIN=X+1*100 
 L -^["MHRHMO"]HMOREF(HMO,ID,0)
 Q RIN
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>AI:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
 S ..AccDt=$G(AI(2527))
 D ..AccX12CauseCodeSetObjectId($G(AI(2531)))
 D ..AccidentCntrySetObjectId($G(AI(2533)))
 D ..AccidentStSetObjectId($G(AI(2532)))
 S ..ActAdmDt=$G(AI(19))
 S ..ActDischDt=$G(AI(20))
 S ..ActSurgDt=$G(AI(315))
 D ..Adjudication.LocalToObject($G(AI(1.9)))
 D ..AdmDxSetObjectId($G(AI(4.8)))
 S ..AdmDxFreeText=$G(AI(2.7))
 S ..AdmDxFromDt1=$G(AI(5514))
 S ..AdmDxFromDt2=$G(AI(5516))
 S ..AdmDxFromDt3=$G(AI(5518))
 S ..AdmDxToDt1=$G(AI(5515))
 S ..AdmDxToDt2=$G(AI(5517))
 S ..AdmDxToDt3=$G(AI(5519))
 S ..AdmFromEmerg=$G(AI(515))
 D ..AdmPhySetObjectId($G(AI(2.6)))
 D ..AdmPhyDict3SetObjectId($G(AI(514)))
 D ..AdmPhyDict471SetObjectId($G(AI(10.6)))
 S ..AdmPhyFreeText=$G(AI(8.6))
 D ..AdmSrcSetObjectId($G(AI(335)))
 S ..AdmToHos=$G(AI(4.6))
 D ..AdmTypeSetObjectId($G(AI(334)))
 D ..AdmitPhySpecialtySetObjectId($G(AI(11.6)))
 D ..AmbTransReasonCodeSetObjectId($G(AI(321)))
 D ..AmbTypeCodeSetObjectId($G(AI(320)))
 S ..AmtAdjud=$G(AI(16))
 S ..Anesthesia=$G(AI(2714))
 S ..AppBy=$G(AI(2301))
 S ..Approval=$G(AI(1.8))
 S ..ArterialBloodGasQt=$G(AI(2515))
 D ..AttPhyDict3SetObjectId($G(AI(9.6)))
 D ..AttPhyDict471SetObjectId($G(AI(38.8)))
 D ..AttPhySpecialtySetObjectId($G(AI(12.6)))
 S ..AuthNum=$G(AI(7.8))
 S ..Cin=$G(AI(32))
 D ..ClinicalRequestSetObjectId($G(AI(3801)))
 S ..ClmBtc=$P($G(AI(27)),"*",1)
 S ..ClmBtcTx=$P($G(AI(27)),"*",2)
 D ..CobSetObjectId($G(AI(501)))
 D ..CobFscSetObjectId($G(AI(305)))
 S ..CobPercentForLiability=$G(AI(309))
 S ..ComplicationInd=$G(AI(333))
 S ..ConsOnly=$G(AI(2607))
 S ..ContTel=$G(AI(6.7))
 D ..CovCatSetObjectId($G(AI(308)))
 S ..CovInLieuHos=$G(AI(2702))
 S ..Coverage=$G(AI(2116))
 D ..CreatedBySetObjectId($G(AI(1.2)))
 S ..CreatedDt=$G(AI(2.2))
 S ..CreatedTime=$G(AI(3.2))
 D ..CurConditionSetObjectId($G(AI(312)))
 S ..CustomCopay=$G(AI(6001))
 S ..CustomerDate1=$G(AI(6001))
 S ..CustomerDate2=$G(AI(6002))
 S ..CustomerDate3=$G(AI(6003))
 S ..CustomerDate4=$G(AI(6004))
 S ..CustomerDate5=$G(AI(6005))
 S ..CustomerFreeText1=$G(AI(6009))
 S ..CustomerFreeText2=$G(AI(6010))
 S ..CustomerFreeText3=$G(AI(6011))
 S ..CustomerFreeText4=$G(AI(6012))
 S ..CustomerFreeText5=$G(AI(6013))
 S ..CustomerFreeText6=$G(AI(6014))
 S ..CustomerYesNo1=$G(AI(6006))
 S ..CustomerYesNo2=$G(AI(6007))
 S ..CustomerYesNo3=$G(AI(6008))
 S ..DailyOxyUseRate=$G(AI(2512))
 S ..DateOfInjury=$G(AI(502))
 S ..DayOfWeekSat1st=$G(AI(512))
 S ..DayOfWeekSun1st=$G(AI(512))
 S ..Descr=$G(AI(5))
 S ..DischDtHome=$G(AI(2612))
 S ..DischDx=$G(AI(3.7))
 S ..DischDxFromDt1=$G(AI(5520))
 S ..DischDxFromDt2=$G(AI(5522))
 S ..DischDxFromDt3=$G(AI(5524))
 S ..DischDxToDt1=$G(AI(5521))
 S ..DischDxToDt2=$G(AI(5523))
 S ..DischDxToDt3=$G(AI(5525))
 D ..DrgSerial.LocalToObject($G(AI(3601)))
 S ..DtOrd=$G(AI(11))
 D ..DxSetObjectId($G(AI(25)))
 S ..Dx1FromDt=$G(AI(35))
 S ..Dx1ToDt=$G(AI(36))
 D ..Dx2SetObjectId($G(AI(34)))
 S ..Dx2FromDt=$G(AI(37))
 S ..Dx2ToDt=$G(AI(38))
 S ..Edi278inPayrDepctr=$P($G(AI(5211)),",",6)
 S ..Edi278inPayrPrvctr=$P($G(AI(5211)),",",7)
 S ..Edi278inPayrReqctr=$P($G(AI(5211)),",",4)
 S ..Edi278inPayrRun=$P($G(AI(5211)),",",1)
 S ..Edi278inPayrSlnctr=$P($G(AI(5211)),",",8)
 S ..Edi278inPayrSubctr=$P($G(AI(5211)),",",5)
 S ..Edi278inPayrTxstctr=$P($G(AI(5211)),",",2)
 S ..Edi278inPayrUmoctr=$P($G(AI(5211)),",",3)
 D ..EdiActionSetObjectId($G(AI(5208)))
 D ..EdiAttachmentTransCodeSetObjectId($G(AI(5218)))
 S ..EdiAttachmentType=$G(AI(5217))
 D ..EdiAuthRejReasonSetObjectId($G(AI(5206)))
 D ..EdiCertTypeSetObjectId($G(AI(5201)))
 D ..EdiEditRejReasonSetObjectId($G(AI(5210)))
 D ..EdiHsdDeliveryPatternSetObjectId($P($G(AI(5216)),",",7))
 S ..EdiHsdPdCnt=$P($G(AI(5216)),",",6)
 S ..EdiHsdPdQual=$P($G(AI(5216)),",",5)
 S ..EdiHsdQuant=$P($G(AI(5216)),",",2)
 S ..EdiHsdQuantQual=$P($G(AI(5216)),",",1)
 S ..EdiHsdUnits=$P($G(AI(5216)),",",3)
 S ..EdiIncomingStat=$G(AI(5209))
 D ..EdiLevOfServSetObjectId($G(AI(5205)))
 D ..EdiProvTypeSetObjectId($G(AI(5215)))
 D ..EdiRefPrvTaxonomyCodeSetObjectId($G(AI(5212)))
 D ..EdiRejReasonSetObjectId($G(AI(5206)))
 S ..EdiReq=$G(AI(5203))
 D ..EdiReqCatSetObjectId($G(AI(5202)))
 D ..EdiServTypeSetObjectId($G(AI(5204)))
 D ..EdiSvcPrvTaxonomyCodeSetObjectId($G(AI(5213)))
 D ..EdiTradingPartnerSetObjectId($G(AI(5214)))
 D ..EdiX12StatusSetObjectId($G(AI(5207)))
 S ..EquipNm=$G(AI(2701))
 S ..EquipReasonDesc=$G(AI(5507))
 S ..EstDob=$G(AI(2529))
 S ..EstPendLiab=$G(AI(15))
 S ..ExpAdmDt=$G(AI(17))
 S ..ExpDischDt=$G(AI(21))
 S ..ExpLos=$G(AI(18))
 S ..ExpSurgDt=$G(AI(316))
 S ..Extnum=$G(AI(5601))
 S ..FirstEncDt=$G(AI(2601))
 S ..FollowUpToIp=$G(AI(2611))
 S ..GlCredit=$G(AI(2202))
 S ..GlDebit=$G(AI(2201))
 D ..HhCertTypeCodeSetObjectId($G(AI(2524)))
 D ..HhMedCovIndSetObjectId($G(AI(2536)))
 D ..HhNsfIndSetObjectId($G(AI(2535)))
 S ..HhPhyContDt=$G(AI(2538))
 S ..HhPhyOrdDt=$G(AI(2537))
 D ..HhPrognosisCodeSetObjectId($G(AI(2520)))
 S ..HhStartDt=$G(AI(2534))
 D ..HmoSetObjectId($G(HMO))
 D ..IdSetObjectId($G(ID))
 S ..InOutArea=$G(AI(2.8))
 S ..InOutArea2=$G(AI(2709))
 S ..IncomingOutgoing=$G(AI(5603))
 S ..InpOut=$G(AI(6.6))
 S ..InsApprBy=$G(AI(5510))
 S ..InsApprDt=$G(AI(5511))
 S ..IntExt=$G(AI(13.8))
 D ..LastEditBySetObjectId($G(AI(4.2)))
 S ..LastEditDt=$G(AI(5.2))
 S ..LastMensPd=$G(AI(2528))
 S ..LastVisitDt=$G(AI(2525))
 D ..LevelOfCareSetObjectId($G(AI(508)))
 D ..LocSetObjectId($G(AI(519)))
 S ..MaxAmt=$G(AI(28))
 S ..MaxDays=$G(AI(24))
 S ..MeasurementCode=$G(AI(326))
 S ..MedApprBy=$G(AI(5512))
 S ..MedApprDt=$G(AI(5513))
 S ..MedCovIndicator=$G(AI(2523))
 S ..MonthlyTreatmentCnt=$G(AI(328))
 D ..NatureCondCodeSetObjectId($G(AI(329)))
 S ..NewBorn=$G(AI(2707))
 D ..NsgHomeResStatusCodeSetObjectId($G(AI(318)))
 S ..OnsetCurSymp=$G(AI(2530))
 D ..OpenFscSetObjectId($G(AI(5606)))
 S ..Operated=$G(AI(5504))
 S ..OrigRefNum=$G(AI(4002))
 S ..OutOfNetwork=$G(AI(7.7))
 D ..OxyDeliverySysCodeSetObjectId($G(AI(2518)))
 D ..OxyEquipTypeCodeSetObjectId($G(AI(2510)))
 D ..OxyEquipTypeCode2SetObjectId($G(AI(2539)))
 S ..OxySaturationQty=$G(AI(2516))
 D ..OxyTestCondCodeSetObjectId($G(AI(2517)))
 D ..OxyTestFindCodeSetObjectId($G(AI(2519)))
 S ..OxyUseHourRate=$G(AI(2513))
 S ..OxygenFlowRate=$G(AI(2511))
 S ..PatCondDesc1=$G(AI(5505))
 S ..PatCondDesc2=$G(AI(5506))
 S ..PatEventTrackingNum=$G(AI(310))
 D ..PatPrognosisCodeSetObjectId($G(AI(2520)))
 D ..PayTypeSetObjectId($G(AI(301)))
 D ..PcpOfRefPatientSetObjectId($G(AI(9)))
 S ..PhyContDt=$G(AI(2526))
 S ..PortOxyFlowRate=$G(AI(2521))
 S ..PreCertNum=$G(AI(5602))
 S ..PreConvRefNum=$G(AI(2504))
 S ..Precert=$G(AI(5501))
 S ..PrecertDt=$G(AI(5503))
 S ..PriApp=$G(AI(2610))
 D ..PriEditBySetObjectId($G(AI(6.2)))
 S ..PriEditDt=$G(AI(7.2))
 D ..PrognosisCodeSetObjectId($G(AI(313)))
 S ..PrvCertId=$G(AI(314))
 S ..ReasForRefFrtxt=$G(AI(1.7))
 S ..ReasStatis=$G(AI(521))
 D ..ReasonSetObjectId($G(AI(13)))
 S ..ReasonForRef2=$G(AI(4.7))
 D ..RefCondCatSetObjectId($G(AI(317)))
 D ..RefCondCodeSetObjectId($G(AI(319)))
 S ..RefCont=$G(AI(5.7))
 S ..RefFromEmerg=$G(AI(3.8))
 S ..RefNum=$G(AI(2))
 D ..RefPhyD123SetObjectId($G(AI(5607)))
 S ..RefPhyFreetext=$G(AI(5608))
 S ..RefPhyFreetextAddr1=$G(AI(5616))
 S ..RefPhyFreetextAddr2=$G(AI(5617))
 S ..RefPhyFreetextCty=$G(AI(5618))
 S ..RefPhyFreetextId=$G(AI(5609))
 D ..RefPhyFreetextStSetObjectId($G(AI(5619)))
 S ..RefPhyFreetextTel=$G(AI(5615))
 S ..RefPhyFreetextZip=$G(AI(5620))
 D ..RefProvSetObjectId($G(AI(10)))
 D ..RefTypeSetObjectId($G(AI(3)))
 D ..ReferToBaSetObjectId($G(AI(5604)))
 D ..ReferToDivSetObjectId($G(AI(5605)))
 S ..ReferToFreetext=$G(AI(5611))
 S ..ReferToFreetextId=$G(AI(5612))
 D ..ReferToLocSetObjectId($G(AI(8)))
 D ..ReferToPhySetObjectId($G(AI(5610)))
 D ..ReferToProvSetObjectId($G(AI(12)))
 D ..ReferToVndSetObjectId($G(AI(26)))
 D ..ReferralRequestSetObjectId($G(AI(3802)))
 S ..RegMicu=$G(AI(9.8))
 S ..RentPur=$G(AI(10.8))
 D ..ReplacementMemSetObjectId($G(AI(4006)))
 S ..ReplacementRefNum=$G(AI(4003))
 S ..ReplacementType=$G(AI(4001))
 S ..ResTherOrderText=$G(AI(2514))
 S ..RevDt=$G(AI(5509))
 S ..RiskFactor=$G(AI(7.6))
 D ..RiskFundSetObjectId($G(AI(29)))
 S ..RmsType=$G(AI(5508))
 S ..RoomNum=$G(AI(528))
 D ..RoundPhySetObjectId($G(AI(2708)))
 S ..SameDayAdm=$G(AI(506))
 S ..ServDtFrom=$G(AI(331))
 S ..ServDtTo=$G(AI(332))
 D ..ServiceSetObjectId($G(AI(33)))
 S ..SmTrtmtCnt=$G(AI(324))
 S ..SmTrtmtSeriesNum=$G(AI(323))
 S ..SnfIndicator=$G(AI(2522))
 D ..SourceTypeSetObjectId($G(AI(5613)))
 S ..Spec=$G(AI(2706))
 S ..SrvTraceNum=$G(AI(311))
 S ..Statis=$G(AI(504))
 D ..StatusSetObjectId($G(AI(1)))
 D ..SubluxationLevelCodeSetObjectId($G(AI(325)))
 D ..SubluxationLevelCodeToSetObjectId($G(AI(338)))
 D ..TargetTypeSetObjectId($G(AI(5614)))
 S ..TimeOfAdmit=$G(AI(3.6))
 S ..TimeOfDay=$G(AI(513))
 S ..TimeOfVis=$G(AI(2710))
 S ..TotEstLiab=$G(AI(14))
 S ..TransDist=$G(AI(322))
 S ..TransFrom=$G(AI(8.8))
 S ..TransFromFrtxt=$G(AI(337))
 S ..TransFromOthHos=$G(AI(2705))
 S ..TransTo=$G(AI(11.8))
 S ..TransToFrtxt=$G(AI(2140))
 S ..TransWeight=$G(AI(336))
 S ..TreatmentPdCount=$G(AI(327))
 S ..TreatmentsAuthorized=$G(AI(23))
 D ..TypeOfAdmSetObjectId($G(AI(505)))
 S ..TypeOfHhc=$G(AI(517))
 S ..TypeOfHomeHealth=$G(AI(5.6))
 S ..TypeOfTherapy=$G(AI(516))
 D ..UrReviewerSetObjectId($G(AI(5502)))
 S ..Urgency=$G(AI(507))
 S ..ValidFromDt=$G(AI(6))
 S ..ValidThru=$G(AI(2715))
 S ..ValidToDt=$G(AI(7))
 S ..VndAddr=$G(AI(5.8))
 S ..VndTel=$G(AI(6.8))
 D ..VndrCatSetObjectId($G(AI(520)))
 S ..XrayAvailability=$G(AI(330))
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[AI:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>HMO,ID,MCARIN</PublicList>
<Implementation><![CDATA[
 S HMO=""
 I ..Hmo S HMO=..Hmo.SummaryValidate("Hmo",.Error)
 S ID=""
 I ..Id,##class(%Dictionary.CompiledMethod).%OpenId("Registration.Patient||SummaryValidate") S ID=..Id.SummaryValidate("Id",.Error)
 E   I ..Id S ID=..Id.%Id()
 S MCARIN=..Rin
 S AI(2527)=..AccDt
 S AI(2531)=""
 I ..AccX12CauseCode S AI(2531)=..AccX12CauseCode.SummaryValidate("AccX12CauseCode",.Error)
 S AI(2533)=""
 I ..AccidentCntry S AI(2533)=..AccidentCntry.SummaryValidate("AccidentCntry",.Error)
 S AI(2532)=""
 I ..AccidentSt S AI(2532)=..AccidentSt.SummaryValidate("AccidentSt",.Error)
 S AI(19)=..ActAdmDt
 S AI(20)=..ActDischDt
 S AI(315)=..ActSurgDt
 K X D ..Adjudication.ObjectToLocal(.X)
 S Adjudication=X,FINT=X
 S AI(1.9)=X
 S AI(4.8)=""
 I ..AdmDx S AI(4.8)=..AdmDx.SummaryValidate("AdmDx",.Error)
 S AI(2.7)=..AdmDxFreeText
 S AI(5514)=..AdmDxFromDt1
 S AI(5516)=..AdmDxFromDt2
 S AI(5518)=..AdmDxFromDt3
 S AI(5515)=..AdmDxToDt1
 S AI(5517)=..AdmDxToDt2
 S AI(5519)=..AdmDxToDt3
 S AI(515)=..AdmFromEmerg
 S AI(2.6)=""
 I ..AdmPhy S AI(2.6)=..AdmPhy.SummaryValidate("AdmPhy",.Error)
 S AI(514)=""
 I ..AdmPhyDict3 S AI(514)=..AdmPhyDict3.SummaryValidate("AdmPhyDict3",.Error)
 S AI(10.6)=""
 I ..AdmPhyDict471 S AI(10.6)=..AdmPhyDict471.SummaryValidate("AdmPhyDict471",.Error)
 S AI(8.6)=..AdmPhyFreeText
 S AI(335)=""
 I ..AdmSrc S AI(335)=..AdmSrc.SummaryValidate("AdmSrc",.Error)
 S AI(4.6)=..AdmToHos
 S AI(334)=""
 I ..AdmType S AI(334)=..AdmType.SummaryValidate("AdmType",.Error)
 S AI(11.6)=""
 I ..AdmitPhySpecialty S AI(11.6)=..AdmitPhySpecialty.SummaryValidate("AdmitPhySpecialty",.Error)
 S AI(321)=""
 I ..AmbTransReasonCode S AI(321)=..AmbTransReasonCode.SummaryValidate("AmbTransReasonCode",.Error)
 S AI(320)=""
 I ..AmbTypeCode S AI(320)=..AmbTypeCode.SummaryValidate("AmbTypeCode",.Error)
 S AI(16)=..AmtAdjud
 S AI(2714)=..Anesthesia
 S AI(2301)=..AppBy
 S AI(1.8)=..Approval
 S AI(2515)=..ArterialBloodGasQt
 S AI(9.6)=""
 I ..AttPhyDict3 S AI(9.6)=..AttPhyDict3.SummaryValidate("AttPhyDict3",.Error)
 S AI(38.8)=""
 I ..AttPhyDict471 S AI(38.8)=..AttPhyDict471.SummaryValidate("AttPhyDict471",.Error)
 S AI(12.6)=""
 I ..AttPhySpecialty S AI(12.6)=..AttPhySpecialty.SummaryValidate("AttPhySpecialty",.Error)
 S AI(7.8)=..AuthNum
 S AI(32)=..Cin
 S AI(3801)=""
 I ..ClinicalRequest,##class(%Dictionary.CompiledMethod).%OpenId("CON.ClinRequest||SummaryValidate") S AI(3801)=..ClinicalRequest.SummaryValidate("ClinicalRequest",.Error)
 E   I ..ClinicalRequest S AI(3801)=..ClinicalRequest.%Id()
 S $P(AI(27),"*",1)=..ClmBtc
 S $P(AI(27),"*",2)=..ClmBtcTx
 S AI(501)=""
 I ..Cob S AI(501)=..Cob.SummaryValidate("Cob",.Error)
 S AI(305)=""
 I ..CobFsc S AI(305)=..CobFsc.SummaryValidate("CobFsc",.Error)
 S AI(309)=..CobPercentForLiability
 S AI(333)=..ComplicationInd
 S AI(2607)=..ConsOnly
 S AI(6.7)=..ContTel
 S AI(308)=""
 I ..CovCat S AI(308)=..CovCat.SummaryValidate("CovCat",.Error)
 S AI(2702)=..CovInLieuHos
 S AI(2116)=..Coverage
 S AI(1.2)=""
 I ..CreatedBy,##class(%Dictionary.CompiledMethod).%OpenId("SecurityPlus.Usr||SummaryValidate") S AI(1.2)=..CreatedBy.SummaryValidate("CreatedBy",.Error)
 E   I ..CreatedBy S AI(1.2)=..CreatedBy.%Id()
 S AI(2.2)=..CreatedDt
 S AI(3.2)=..CreatedTime
 S AI(312)=""
 I ..CurCondition S AI(312)=..CurCondition.SummaryValidate("CurCondition",.Error)
 S AI(6001)=..CustomCopay
 S AI(6001)=..CustomerDate1
 S AI(6002)=..CustomerDate2
 S AI(6003)=..CustomerDate3
 S AI(6004)=..CustomerDate4
 S AI(6005)=..CustomerDate5
 S AI(6009)=..CustomerFreeText1
 S AI(6010)=..CustomerFreeText2
 S AI(6011)=..CustomerFreeText3
 S AI(6012)=..CustomerFreeText4
 S AI(6013)=..CustomerFreeText5
 S AI(6014)=..CustomerFreeText6
 S AI(6006)=..CustomerYesNo1
 S AI(6007)=..CustomerYesNo2
 S AI(6008)=..CustomerYesNo3
 S AI(2512)=..DailyOxyUseRate
 S AI(502)=..DateOfInjury
 S AI(512)=..DayOfWeekSat1st
 S AI(512)=..DayOfWeekSun1st
 S AI(5)=..Descr
 S AI(2612)=..DischDtHome
 S AI(3.7)=..DischDx
 S AI(5520)=..DischDxFromDt1
 S AI(5522)=..DischDxFromDt2
 S AI(5524)=..DischDxFromDt3
 S AI(5521)=..DischDxToDt1
 S AI(5523)=..DischDxToDt2
 S AI(5525)=..DischDxToDt3
 K X D ..DrgSerial.ObjectToLocal(.X)
 S DrgSerial=X,FINT=X
 S AI(3601)=X
 S AI(11)=..DtOrd
 S AI(25)=""
 I ..Dx S AI(25)=..Dx.SummaryValidate("Dx",.Error)
 S AI(35)=..Dx1FromDt
 S AI(36)=..Dx1ToDt
 S AI(34)=""
 I ..Dx2 S AI(34)=..Dx2.SummaryValidate("Dx2",.Error)
 S AI(37)=..Dx2FromDt
 S AI(38)=..Dx2ToDt
 S $P(AI(5211),",",6)=..Edi278inPayrDepctr
 S $P(AI(5211),",",7)=..Edi278inPayrPrvctr
 S $P(AI(5211),",",4)=..Edi278inPayrReqctr
 S $P(AI(5211),",",1)=..Edi278inPayrRun
 S $P(AI(5211),",",8)=..Edi278inPayrSlnctr
 S $P(AI(5211),",",5)=..Edi278inPayrSubctr
 S $P(AI(5211),",",2)=..Edi278inPayrTxstctr
 S $P(AI(5211),",",3)=..Edi278inPayrUmoctr
 S AI(5208)=""
 I ..EdiAction S AI(5208)=..EdiAction.SummaryValidate("EdiAction",.Error)
 S AI(5218)=""
 I ..EdiAttachmentTransCode S AI(5218)=..EdiAttachmentTransCode.SummaryValidate("EdiAttachmentTransCode",.Error)
 S AI(5217)=..EdiAttachmentType
 S AI(5206)=""
 I ..EdiAuthRejReason S AI(5206)=..EdiAuthRejReason.SummaryValidate("EdiAuthRejReason",.Error)
 S AI(5201)=""
 I ..EdiCertType S AI(5201)=..EdiCertType.SummaryValidate("EdiCertType",.Error)
 S AI(5210)=""
 I ..EdiEditRejReason S AI(5210)=..EdiEditRejReason.SummaryValidate("EdiEditRejReason",.Error)
 S $P(AI(5216),",",7)=""
 I ..EdiHsdDeliveryPattern S $P(AI(5216),",",7)=..EdiHsdDeliveryPattern.SummaryValidate("EdiHsdDeliveryPattern",.Error)
 S $P(AI(5216),",",6)=..EdiHsdPdCnt
 S $P(AI(5216),",",5)=..EdiHsdPdQual
 S $P(AI(5216),",",2)=..EdiHsdQuant
 S $P(AI(5216),",",1)=..EdiHsdQuantQual
 S $P(AI(5216),",",3)=..EdiHsdUnits
 S AI(5209)=..EdiIncomingStat
 S AI(5205)=""
 I ..EdiLevOfServ S AI(5205)=..EdiLevOfServ.SummaryValidate("EdiLevOfServ",.Error)
 S AI(5215)=""
 I ..EdiProvType S AI(5215)=..EdiProvType.SummaryValidate("EdiProvType",.Error)
 S AI(5212)=""
 I ..EdiRefPrvTaxonomyCode S AI(5212)=..EdiRefPrvTaxonomyCode.SummaryValidate("EdiRefPrvTaxonomyCode",.Error)
 S AI(5206)=""
 I ..EdiRejReason S AI(5206)=..EdiRejReason.SummaryValidate("EdiRejReason",.Error)
 S AI(5203)=..EdiReq
 S AI(5202)=""
 I ..EdiReqCat S AI(5202)=..EdiReqCat.SummaryValidate("EdiReqCat",.Error)
 S AI(5204)=""
 I ..EdiServType S AI(5204)=..EdiServType.SummaryValidate("EdiServType",.Error)
 S AI(5213)=""
 I ..EdiSvcPrvTaxonomyCode S AI(5213)=..EdiSvcPrvTaxonomyCode.SummaryValidate("EdiSvcPrvTaxonomyCode",.Error)
 S AI(5214)=""
 I ..EdiTradingPartner S AI(5214)=..EdiTradingPartner.SummaryValidate("EdiTradingPartner",.Error)
 S AI(5207)=""
 I ..EdiX12Status S AI(5207)=..EdiX12Status.SummaryValidate("EdiX12Status",.Error)
 S AI(2701)=..EquipNm
 S AI(5507)=..EquipReasonDesc
 S AI(2529)=..EstDob
 S AI(15)=..EstPendLiab
 S AI(17)=..ExpAdmDt
 S AI(21)=..ExpDischDt
 S AI(18)=..ExpLos
 S AI(316)=..ExpSurgDt
 S AI(5601)=..Extnum
 S AI(2601)=..FirstEncDt
 S AI(2611)=..FollowUpToIp
 S AI(2202)=..GlCredit
 S AI(2201)=..GlDebit
 S AI(2524)=""
 I ..HhCertTypeCode S AI(2524)=..HhCertTypeCode.SummaryValidate("HhCertTypeCode",.Error)
 S AI(2536)=""
 I ..HhMedCovInd S AI(2536)=..HhMedCovInd.SummaryValidate("HhMedCovInd",.Error)
 S AI(2535)=""
 I ..HhNsfInd S AI(2535)=..HhNsfInd.SummaryValidate("HhNsfInd",.Error)
 S AI(2538)=..HhPhyContDt
 S AI(2537)=..HhPhyOrdDt
 S AI(2520)=""
 I ..HhPrognosisCode S AI(2520)=..HhPrognosisCode.SummaryValidate("HhPrognosisCode",.Error)
 S AI(2534)=..HhStartDt
 S AI(2.8)=..InOutArea
 S AI(2709)=..InOutArea2
 S AI(5603)=..IncomingOutgoing
 S AI(6.6)=..InpOut
 S AI(5510)=..InsApprBy
 S AI(5511)=..InsApprDt
 S AI(13.8)=..IntExt
 S AI(4.2)=""
 I ..LastEditBy,##class(%Dictionary.CompiledMethod).%OpenId("SecurityPlus.Usr||SummaryValidate") S AI(4.2)=..LastEditBy.SummaryValidate("LastEditBy",.Error)
 E   I ..LastEditBy S AI(4.2)=..LastEditBy.%Id()
 S AI(5.2)=..LastEditDt
 S AI(2528)=..LastMensPd
 S AI(2525)=..LastVisitDt
 S AI(508)=""
 I ..LevelOfCare S AI(508)=..LevelOfCare.SummaryValidate("LevelOfCare",.Error)
 S AI(519)=""
 I ..Loc S AI(519)=..Loc.SummaryValidate("Loc",.Error)
 S AI(28)=..MaxAmt
 S AI(24)=..MaxDays
 S AI(326)=..MeasurementCode
 S AI(5512)=..MedApprBy
 S AI(5513)=..MedApprDt
 S AI(2523)=..MedCovIndicator
 S AI(328)=..MonthlyTreatmentCnt
 S AI(329)=""
 I ..NatureCondCode S AI(329)=..NatureCondCode.SummaryValidate("NatureCondCode",.Error)
 S AI(2707)=..NewBorn
 S AI(318)=""
 I ..NsgHomeResStatusCode S AI(318)=..NsgHomeResStatusCode.SummaryValidate("NsgHomeResStatusCode",.Error)
 S AI(2530)=..OnsetCurSymp
 S AI(5606)=""
 I ..OpenFsc S AI(5606)=..OpenFsc.SummaryValidate("OpenFsc",.Error)
 S AI(5504)=..Operated
 S AI(4002)=..OrigRefNum
 S AI(7.7)=..OutOfNetwork
 S AI(2518)=""
 I ..OxyDeliverySysCode S AI(2518)=..OxyDeliverySysCode.SummaryValidate("OxyDeliverySysCode",.Error)
 S AI(2510)=""
 I ..OxyEquipTypeCode S AI(2510)=..OxyEquipTypeCode.SummaryValidate("OxyEquipTypeCode",.Error)
 S AI(2539)=""
 I ..OxyEquipTypeCode2 S AI(2539)=..OxyEquipTypeCode2.SummaryValidate("OxyEquipTypeCode2",.Error)
 S AI(2516)=..OxySaturationQty
 S AI(2517)=""
 I ..OxyTestCondCode S AI(2517)=..OxyTestCondCode.SummaryValidate("OxyTestCondCode",.Error)
 S AI(2519)=""
 I ..OxyTestFindCode S AI(2519)=..OxyTestFindCode.SummaryValidate("OxyTestFindCode",.Error)
 S AI(2513)=..OxyUseHourRate
 S AI(2511)=..OxygenFlowRate
 S AI(5505)=..PatCondDesc1
 S AI(5506)=..PatCondDesc2
 S AI(310)=..PatEventTrackingNum
 S AI(2520)=""
 I ..PatPrognosisCode S AI(2520)=..PatPrognosisCode.SummaryValidate("PatPrognosisCode",.Error)
 S AI(301)=""
 I ..PayType S AI(301)=..PayType.SummaryValidate("PayType",.Error)
 S AI(9)=""
 I ..PcpOfRefPatient S AI(9)=..PcpOfRefPatient.SummaryValidate("PcpOfRefPatient",.Error)
 S AI(2526)=..PhyContDt
 S AI(2521)=..PortOxyFlowRate
 S AI(5602)=..PreCertNum
 S AI(2504)=..PreConvRefNum
 S AI(5501)=..Precert
 S AI(5503)=..PrecertDt
 S AI(2610)=..PriApp
 S AI(6.2)=""
 I ..PriEditBy,##class(%Dictionary.CompiledMethod).%OpenId("SecurityPlus.Usr||SummaryValidate") S AI(6.2)=..PriEditBy.SummaryValidate("PriEditBy",.Error)
 E   I ..PriEditBy S AI(6.2)=..PriEditBy.%Id()
 S AI(7.2)=..PriEditDt
 S AI(313)=""
 I ..PrognosisCode S AI(313)=..PrognosisCode.SummaryValidate("PrognosisCode",.Error)
 S AI(314)=..PrvCertId
 S AI(1.7)=..ReasForRefFrtxt
 S AI(521)=..ReasStatis
 S AI(13)=""
 I ..Reason S AI(13)=..Reason.SummaryValidate("Reason",.Error)
 S AI(4.7)=..ReasonForRef2
 S AI(317)=""
 I ..RefCondCat S AI(317)=..RefCondCat.SummaryValidate("RefCondCat",.Error)
 S AI(319)=""
 I ..RefCondCode S AI(319)=..RefCondCode.SummaryValidate("RefCondCode",.Error)
 S AI(5.7)=..RefCont
 S AI(3.8)=..RefFromEmerg
 S AI(2)=..RefNum
 S AI(5607)=""
 I ..RefPhyD123 S AI(5607)=..RefPhyD123.SummaryValidate("RefPhyD123",.Error)
 S AI(5608)=..RefPhyFreetext
 S AI(5616)=..RefPhyFreetextAddr1
 S AI(5617)=..RefPhyFreetextAddr2
 S AI(5618)=..RefPhyFreetextCty
 S AI(5609)=..RefPhyFreetextId
 S AI(5619)=""
 I ..RefPhyFreetextSt S AI(5619)=..RefPhyFreetextSt.SummaryValidate("RefPhyFreetextSt",.Error)
 S AI(5615)=..RefPhyFreetextTel
 S AI(5620)=..RefPhyFreetextZip
 S AI(10)=""
 I ..RefProv S AI(10)=..RefProv.SummaryValidate("RefProv",.Error)
 S AI(3)=""
 I ..RefType S AI(3)=..RefType.SummaryValidate("RefType",.Error)
 S AI(5604)=""
 I ..ReferToBa S AI(5604)=..ReferToBa.SummaryValidate("ReferToBa",.Error)
 S AI(5605)=""
 I ..ReferToDiv S AI(5605)=..ReferToDiv.SummaryValidate("ReferToDiv",.Error)
 S AI(5611)=..ReferToFreetext
 S AI(5612)=..ReferToFreetextId
 S AI(8)=""
 I ..ReferToLoc S AI(8)=..ReferToLoc.SummaryValidate("ReferToLoc",.Error)
 S AI(5610)=""
 I ..ReferToPhy S AI(5610)=..ReferToPhy.SummaryValidate("ReferToPhy",.Error)
 S AI(12)=""
 I ..ReferToProv S AI(12)=..ReferToProv.SummaryValidate("ReferToProv",.Error)
 S AI(26)=""
 I ..ReferToVnd S AI(26)=..ReferToVnd.SummaryValidate("ReferToVnd",.Error)
 S AI(3802)=""
 I ..ReferralRequest,##class(%Dictionary.CompiledMethod).%OpenId("Referrals.ReferralRequest||SummaryValidate") S AI(3802)=..ReferralRequest.SummaryValidate("ReferralRequest",.Error)
 E   I ..ReferralRequest S AI(3802)=..ReferralRequest.%Id()
 S AI(9.8)=..RegMicu
 S AI(10.8)=..RentPur
 S AI(4006)=""
 I ..ReplacementMem,##class(%Dictionary.CompiledMethod).%OpenId("Registration.Patient||SummaryValidate") S AI(4006)=..ReplacementMem.SummaryValidate("ReplacementMem",.Error)
 E   I ..ReplacementMem S AI(4006)=..ReplacementMem.%Id()
 S AI(4003)=..ReplacementRefNum
 S AI(4001)=..ReplacementType
 S AI(2514)=..ResTherOrderText
 S AI(5509)=..RevDt
 S AI(7.6)=..RiskFactor
 S AI(29)=""
 I ..RiskFund S AI(29)=..RiskFund.SummaryValidate("RiskFund",.Error)
 S AI(5508)=..RmsType
 S AI(528)=..RoomNum
 S AI(2708)=""
 I ..RoundPhy S AI(2708)=..RoundPhy.SummaryValidate("RoundPhy",.Error)
 S AI(506)=..SameDayAdm
 S AI(331)=..ServDtFrom
 S AI(332)=..ServDtTo
 S AI(33)=""
 I ..Service S AI(33)=..Service.SummaryValidate("Service",.Error)
 S AI(324)=..SmTrtmtCnt
 S AI(323)=..SmTrtmtSeriesNum
 S AI(2522)=..SnfIndicator
 S AI(5613)=""
 I ..SourceType S AI(5613)=..SourceType.SummaryValidate("SourceType",.Error)
 S AI(2706)=..Spec
 S AI(311)=..SrvTraceNum
 S AI(504)=..Statis
 S AI(1)=""
 I ..Status S AI(1)=..Status.SummaryValidate("Status",.Error)
 S AI(325)=""
 I ..SubluxationLevelCode S AI(325)=..SubluxationLevelCode.SummaryValidate("SubluxationLevelCode",.Error)
 S AI(338)=""
 I ..SubluxationLevelCodeTo S AI(338)=..SubluxationLevelCodeTo.SummaryValidate("SubluxationLevelCodeTo",.Error)
 S AI(5614)=""
 I ..TargetType S AI(5614)=..TargetType.SummaryValidate("TargetType",.Error)
 S AI(3.6)=..TimeOfAdmit
 S AI(513)=..TimeOfDay
 S AI(2710)=..TimeOfVis
 S AI(14)=..TotEstLiab
 S AI(322)=..TransDist
 S AI(8.8)=..TransFrom
 S AI(337)=..TransFromFrtxt
 S AI(2705)=..TransFromOthHos
 S AI(11.8)=..TransTo
 S AI(2140)=..TransToFrtxt
 S AI(336)=..TransWeight
 S AI(327)=..TreatmentPdCount
 S AI(23)=..TreatmentsAuthorized
 S AI(505)=""
 I ..TypeOfAdm S AI(505)=..TypeOfAdm.SummaryValidate("TypeOfAdm",.Error)
 S AI(517)=..TypeOfHhc
 S AI(5.6)=..TypeOfHomeHealth
 S AI(516)=..TypeOfTherapy
 S AI(5502)=""
 I ..UrReviewer S AI(5502)=..UrReviewer.SummaryValidate("UrReviewer",.Error)
 S AI(507)=..Urgency
 S AI(6)=..ValidFromDt
 S AI(2715)=..ValidThru
 S AI(7)=..ValidToDt
 S AI(5.8)=..VndAddr
 S AI(6.8)=..VndTel
 S AI(520)=""
 I ..VndrCat S AI(520)=..VndrCat.SummaryValidate("VndrCat",.Error)
 S AI(330)=..XrayAvailability
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..AdmDxFreeText["^") Q -1
 I (..AdmFromEmerg["^") Q -1
 I (..AdmPhyFreeText["^") Q -1
 I (..AdmToHos["^") Q -1
 I (..Anesthesia["^") Q -1
 I (..AppBy["^") Q -1
 I (..Approval["^") Q -1
 I (..AuthNum["^") Q -1
 I (..CobPercentForLiability["^") Q -1
 I (..ComplicationInd["^") Q -1
 I (..ConsOnly["^") Q -1
 I (..CovInLieuHos["^") Q -1
 I (..Coverage["^") Q -1
 I (..CustomerFreeText1["^") Q -1
 I (..CustomerFreeText2["^") Q -1
 I (..CustomerFreeText3["^") Q -1
 I (..CustomerFreeText4["^") Q -1
 I (..CustomerFreeText5["^") Q -1
 I (..CustomerFreeText6["^") Q -1
 I (..CustomerYesNo1["^") Q -1
 I (..CustomerYesNo2["^") Q -1
 I (..CustomerYesNo3["^") Q -1
 I (..DayOfWeekSat1st["^") Q -1
 I (..DayOfWeekSun1st["^") Q -1
 I (..Descr["^") Q -1
 I (..DischDx["^") Q -1
 I (..Edi278inPayrDepctr["^")||(..Edi278inPayrDepctr[",") Q -1
 I (..Edi278inPayrPrvctr["^")||(..Edi278inPayrPrvctr[",") Q -1
 I (..Edi278inPayrReqctr["^")||(..Edi278inPayrReqctr[",") Q -1
 I (..Edi278inPayrRun["^")||(..Edi278inPayrRun[",") Q -1
 I (..Edi278inPayrSlnctr["^")||(..Edi278inPayrSlnctr[",") Q -1
 I (..Edi278inPayrSubctr["^")||(..Edi278inPayrSubctr[",") Q -1
 I (..Edi278inPayrTxstctr["^")||(..Edi278inPayrTxstctr[",") Q -1
 I (..Edi278inPayrUmoctr["^")||(..Edi278inPayrUmoctr[",") Q -1
 I (..EdiAttachmentType["^") Q -1
 I (..EdiHsdQuantQual["^")||(..EdiHsdQuantQual[",") Q -1
 I (..EdiHsdUnits["^")||(..EdiHsdUnits[",") Q -1
 I (..EdiIncomingStat["^") Q -1
 I (..EdiReq["^") Q -1
 I (..EquipNm["^") Q -1
 I (..EquipReasonDesc["^") Q -1
 I (..Extnum["^") Q -1
 I (..FollowUpToIp["^") Q -1
 I (..GlCredit["^") Q -1
 I (..GlDebit["^") Q -1
 I (..InOutArea["^") Q -1
 I (..InOutArea2["^") Q -1
 I (..IncomingOutgoing["^") Q -1
 I (..InpOut["^") Q -1
 I (..InsApprBy["^") Q -1
 I (..IntExt["^") Q -1
 I (..MeasurementCode["^") Q -1
 I (..MedApprBy["^") Q -1
 I (..MedCovIndicator["^") Q -1
 I (..Operated["^") Q -1
 I (..OutOfNetwork["^") Q -1
 I (..PatCondDesc1["^") Q -1
 I (..PatCondDesc2["^") Q -1
 I (..PatEventTrackingNum["^") Q -1
 I (..PreCertNum["^") Q -1
 I (..PreConvRefNum["^") Q -1
 I (..Precert["^") Q -1
 I (..PriApp["^") Q -1
 I (..PrvCertId["^") Q -1
 I (..ReasForRefFrtxt["^") Q -1
 I (..ReasStatis["^") Q -1
 I (..ReasonForRef2["^") Q -1
 I (..RefCont["^") Q -1
 I (..RefFromEmerg["^") Q -1
 I (..RefPhyFreetext["^") Q -1
 I (..RefPhyFreetextAddr1["^") Q -1
 I (..RefPhyFreetextAddr2["^") Q -1
 I (..RefPhyFreetextCty["^") Q -1
 I (..RefPhyFreetextId["^") Q -1
 I (..RefPhyFreetextTel["^") Q -1
 I (..RefPhyFreetextZip["^") Q -1
 I (..ReferToFreetext["^") Q -1
 I (..ReferToFreetextId["^") Q -1
 I (..RegMicu["^") Q -1
 I (..RentPur["^") Q -1
 I (..ReplacementType["^") Q -1
 I (..ResTherOrderText["^") Q -1
 I (..RiskFactor["^") Q -1
 I (..RmsType["^") Q -1
 I (..RoomNum["^") Q -1
 I (..SameDayAdm["^") Q -1
 I (..SnfIndicator["^") Q -1
 I (..Spec["^") Q -1
 I (..SrvTraceNum["^") Q -1
 I (..Statis["^") Q -1
 I (..TransFrom["^") Q -1
 I (..TransFromFrtxt["^") Q -1
 I (..TransFromOthHos["^") Q -1
 I (..TransTo["^") Q -1
 I (..TransToFrtxt["^") Q -1
 I (..TypeOfHhc["^") Q -1
 I (..TypeOfHomeHealth["^") Q -1
 I (..TypeOfTherapy["^") Q -1
 I (..Urgency["^") Q -1
 I (..VndAddr["^") Q -1
 I (..XrayAvailability["^") Q -1
 Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.Referral</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECCAT,SYHP,UCHP,UCHT,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYHP) D UCHP^UDDMCA  ;Get extended syntax for MCA_A_TBL_OUTPUT_PROD
 If '$D(SYE)!'$D(SYHP) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Parameter name="EXTENTQUERYSPEC">
<Default>Status</Default>
</Parameter>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralS</StreamLocation>
<ExtentSize>5740</ExtentSize>
<Property name="AccDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AccX12CauseCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AccidentCntry">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AccidentSt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ActAdmDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ActDischDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ActSurgDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmDx">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmDxFreeText">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmDxFromDt1">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmDxFromDt2">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmDxFromDt3">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmDxToDt1">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmDxToDt2">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmDxToDt3">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmFromEmerg">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="AdmPhy">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmPhyDict3">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmPhyDict471">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmPhyFreeText">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmSrc">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmToHos">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="AdmType">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AdmitPhySpecialty">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AlcDays">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AmbTransReasonCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AmbTypeCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AmtAdjud">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Anesthesia">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="AppBy">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Approval">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="ArterialBloodGasQt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AttPhyDict3">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AttPhyDict471">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AttPhySpecialty">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="AuthNum">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="BillArea">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="BillAreaReferFrom">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Birthweight">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Cin">
<Selectivity>0.0216%</Selectivity>
</Property>
<Property name="ClmBtc">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ClmBtcTx">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Cob">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CobFsc">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CobPercentForLiability">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Com">
<Selectivity>2.8531%</Selectivity>
</Property>
<Property name="ComplicationInd">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="ConfCom">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ConsOnly">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="ContTel">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CovCat">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CovChg">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CovInLieuHos">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="Coverage">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="CreatedBy">
<Selectivity>2.2082%</Selectivity>
</Property>
<Property name="CreatedDt">
<Selectivity>0.8979%</Selectivity>
</Property>
<Property name="CreatedTime">
<Selectivity>0.0194%</Selectivity>
</Property>
<Property name="CurCondition">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomCopay">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomerDate1">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomerDate2">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomerDate3">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomerDate4">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomerDate5">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomerFreeText1">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomerFreeText2">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomerFreeText3">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomerFreeText4">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomerFreeText5">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomerFreeText6">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="CustomerYesNo1">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="CustomerYesNo2">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="CustomerYesNo3">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="DailyOxyUseRate">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DateOfInjury">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DayOfWeekSat1st">
<Selectivity>11.1111%</Selectivity>
</Property>
<Property name="DayOfWeekSun1st">
<Selectivity>11.1111%</Selectivity>
</Property>
<Property name="Descr">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="DischDisp">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DischDtHome">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DischDx">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DischDxFromDt1">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DischDxFromDt2">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DischDxFromDt3">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DischDxToDt1">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DischDxToDt2">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DischDxToDt3">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Drg">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DrgPay">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DrgTable">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="DrgType">
<Selectivity>16.6667%</Selectivity>
</Property>
<Property name="DtOrd">
<Selectivity>0.6781%</Selectivity>
</Property>
<Property name="Dx">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Dx1FromDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Dx1ToDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Dx2">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Dx2FromDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Dx2ToDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Edi278inPayrDepctr">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Edi278inPayrPrvctr">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Edi278inPayrReqctr">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Edi278inPayrRun">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Edi278inPayrSlnctr">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Edi278inPayrSubctr">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Edi278inPayrTxstctr">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Edi278inPayrUmoctr">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiAction">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiAttachmentTransCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiAttachmentType">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiAuthRejReason">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiCertType">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiEditRejReason">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiHsdDeliveryPattern">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiHsdPdCnt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiHsdPdQual">
<Selectivity>11.1111%</Selectivity>
</Property>
<Property name="EdiHsdQuant">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiHsdQuantQual">
<Selectivity>14.2857%</Selectivity>
</Property>
<Property name="EdiHsdUnits">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="EdiIncomingStat">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiLevOfServ">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiProvType">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiRefPrvTaxonomyCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiRejReason">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiReq">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="EdiReqCat">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiServType">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiSvcPrvTaxonomyCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiTradingPartner">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EdiX12Status">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EquipNm">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EquipReasonDesc">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EstDob">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="EstPendLiab">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ExpAdmDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ExpDischDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ExpLos">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ExpSurgDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Extnum">
<Selectivity>0.0481%</Selectivity>
</Property>
<Property name="FirstEncDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="FollowUpToIp">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="GlCredit">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="GlDebit">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="HhCertTypeCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="HhMedCovInd">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="HhNsfInd">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="HhPhyContDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="HhPhyOrdDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="HhPrognosisCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="HhStartDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Hmo">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Id">
<Selectivity>0.0240%</Selectivity>
</Property>
<Property name="InOutArea">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="InOutArea2">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="IncomingOutgoing">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="InpOut">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="InsApprBy">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="InsApprDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="IntExt">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="LastEditBy">
<Selectivity>6.2500%</Selectivity>
</Property>
<Property name="LastEditDt">
<Selectivity>4.3476%</Selectivity>
</Property>
<Property name="LastMensPd">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="LastVisitDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="LevelOfCare">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Loc">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="MaxAmt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="MaxDays">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="MeasurementCode">
<Selectivity>16.6667%</Selectivity>
</Property>
<Property name="MedApprBy">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="MedApprDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="MedCovIndicator">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="MonthlyTreatmentCnt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="NatureCondCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="NewBorn">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="NsgHomeResStatusCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="NysDrgPool">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="NysPerdiemPool">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="OnsetCurSymp">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="OpenFsc">
<Selectivity>5.5555%</Selectivity>
</Property>
<Property name="Operated">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="OrigRefNum">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="OthAmtFromClaims">
<Selectivity>49.9998%</Selectivity>
</Property>
<Property name="OutOfNetwork">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="OxyDeliverySysCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="OxyEquipTypeCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="OxyEquipTypeCode2">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="OxySaturationQty">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="OxyTestCondCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="OxyTestFindCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="OxyUseHourRate">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="OxygenFlowRate">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PatCondDesc1">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PatCondDesc2">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PatEventTrackingNum">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PatPrognosisCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PayType">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PcpOfRefPatient">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PerDiemPay">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PhyContDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PortOxyFlowRate">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PreCertNum">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PreConvRefNum">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Precert">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="PrecertDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PriApp">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="PriEditBy">
<Selectivity>11.1111%</Selectivity>
</Property>
<Property name="PriEditDt">
<Selectivity>9.0909%</Selectivity>
</Property>
<Property name="PrognosisCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="PrvCertId">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ReasForRefFrtxt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ReasStatis">
<Selectivity>33.3333%</Selectivity>
</Property>
<Property name="Reason">
<Selectivity>16.6666%</Selectivity>
</Property>
<Property name="ReasonForRef2">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RefCondCat">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RefCondCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RefCont">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RefFromEmerg">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="RefNum">
<Selectivity>1</Selectivity>
</Property>
<Property name="RefPhyD123">
<Selectivity>0.3886%</Selectivity>
</Property>
<Property name="RefPhyFreetext">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RefPhyFreetextAddr1">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RefPhyFreetextAddr2">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RefPhyFreetextCty">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RefPhyFreetextId">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RefPhyFreetextSt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RefPhyFreetextTel">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RefPhyFreetextZip">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RefProv">
<Selectivity>49.9998%</Selectivity>
</Property>
<Property name="RefType">
<Selectivity>11.1111%</Selectivity>
</Property>
<Property name="ReferToBa">
<Selectivity>49.9998%</Selectivity>
</Property>
<Property name="ReferToDiv">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ReferToFreetext">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ReferToFreetextId">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ReferToLoc">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ReferToPhy">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ReferToProv">
<Selectivity>1.0754%</Selectivity>
</Property>
<Property name="ReferToVnd">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RegMicu">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="RentPur">
<Selectivity>16.6667%</Selectivity>
</Property>
<Property name="ReplacementMem">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ReplacementRefNum">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ReplacementType">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="ResTherOrderText">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RevDt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Rin">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="RiskFactor">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="RiskFund">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RmsType">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="RoomNum">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="RoundPhy">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="SameDayAdm">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="ServDtFrom">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ServDtTo">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Service">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="SmTrtmtCnt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="SmTrtmtSeriesNum">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="SnfIndicator">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="SourceType">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Spec">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="SrvTraceNum">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Statis">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="Status">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="SubluxationLevelCode">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="SubluxationLevelCodeTo">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TargetType">
<Selectivity>49.9998%</Selectivity>
</Property>
<Property name="TimeOfAdmit">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TimeOfDay">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TimeOfVis">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TotAppDaysFromClaims">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TotAppFromClaims">
<Selectivity>4.7618%</Selectivity>
</Property>
<Property name="TotAppTreatments">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="TotAppUnitsFromClaims">
<Selectivity>12.5000%</Selectivity>
</Property>
<Property name="TotBilledFromClaims">
<Selectivity>4.5453%</Selectivity>
</Property>
<Property name="TotCopayFromClaims">
<Selectivity>49.9998%</Selectivity>
</Property>
<Property name="TotDedFromClaims">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TotEstLiab">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TotRejFromClaims">
<Selectivity>49.9998%</Selectivity>
</Property>
<Property name="TotWithFromClaims">
<Selectivity>49.9998%</Selectivity>
</Property>
<Property name="TransDist">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TransFrom">
<Selectivity>12.5000%</Selectivity>
</Property>
<Property name="TransFromFrtxt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TransFromOthHos">
<Selectivity>25.0000%</Selectivity>
</Property>
<Property name="TransTo">
<Selectivity>14.2857%</Selectivity>
</Property>
<Property name="TransToFrtxt">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TransWeight">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TreatmentPdCount">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TreatmentsAuthorized">
<Selectivity>7.1429%</Selectivity>
</Property>
<Property name="TypeOfAdm">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="TypeOfHhc">
<Selectivity>8.3333%</Selectivity>
</Property>
<Property name="TypeOfHomeHealth">
<Selectivity>12.5000%</Selectivity>
</Property>
<Property name="TypeOfTherapy">
<Selectivity>16.6667%</Selectivity>
</Property>
<Property name="UrReviewer">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="Urgency">
<Selectivity>20.0000%</Selectivity>
</Property>
<Property name="ValidFromDt">
<Selectivity>0.5745%</Selectivity>
</Property>
<Property name="ValidThru">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="ValidToDt">
<Selectivity>0.4913%</Selectivity>
</Property>
<Property name="VndAddr">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="VndTel">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="VndrCat">
<Selectivity>99.9993%</Selectivity>
</Property>
<Property name="XrayAvailability">
<Selectivity>25.0000%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<ConditionalWithHostVars/>
<Global>^["MHRHMO"]HMOREF</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Data name="AccDt">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>27</Piece>
</Data>
<Data name="AccX12CauseCode">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>31</Piece>
</Data>
<Data name="AccidentCntry">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>33</Piece>
</Data>
<Data name="AccidentSt">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>32</Piece>
</Data>
<Data name="ActAdmDt">
<Delimiter>"^"</Delimiter>
<Piece>19</Piece>
</Data>
<Data name="ActDischDt">
<Delimiter>"^"</Delimiter>
<Piece>20</Piece>
</Data>
<Data name="ActSurgDt">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>15</Piece>
</Data>
<Data name="Adjudication">
<Delimiter>"||*||"</Delimiter>
<Node>+.9</Node>
<Piece>1</Piece>
</Data>
<Data name="AdmDx">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>4</Piece>
</Data>
<Data name="AdmDxFreeText">
<Delimiter>"^"</Delimiter>
<Node>+.7</Node>
<Piece>2</Piece>
</Data>
<Data name="AdmDxFromDt1">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>14</Piece>
</Data>
<Data name="AdmDxFromDt2">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>16</Piece>
</Data>
<Data name="AdmDxFromDt3">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>18</Piece>
</Data>
<Data name="AdmDxToDt1">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>15</Piece>
</Data>
<Data name="AdmDxToDt2">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>17</Piece>
</Data>
<Data name="AdmDxToDt3">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>19</Piece>
</Data>
<Data name="AdmFromEmerg">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>15</Piece>
</Data>
<Data name="AdmPhy">
<Delimiter>"^"</Delimiter>
<Node>+.6</Node>
<Piece>2</Piece>
</Data>
<Data name="AdmPhyDict3">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>14</Piece>
</Data>
<Data name="AdmPhyDict471">
<Delimiter>"^"</Delimiter>
<Node>+.6</Node>
<Piece>10</Piece>
</Data>
<Data name="AdmPhyFreeText">
<Delimiter>"^"</Delimiter>
<Node>+.6</Node>
<Piece>8</Piece>
</Data>
<Data name="AdmSrc">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>35</Piece>
</Data>
<Data name="AdmToHos">
<Delimiter>"^"</Delimiter>
<Node>+.6</Node>
<Piece>4</Piece>
</Data>
<Data name="AdmType">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>34</Piece>
</Data>
<Data name="AdmitPhySpecialty">
<Delimiter>"^"</Delimiter>
<Node>+.6</Node>
<Piece>11</Piece>
</Data>
<Data name="AmbTransReasonCode">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>21</Piece>
</Data>
<Data name="AmbTypeCode">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>20</Piece>
</Data>
<Data name="AmtAdjud">
<Delimiter>"^"</Delimiter>
<Piece>16</Piece>
</Data>
<Data name="Anesthesia">
<Delimiter>"^"</Delimiter>
<Node>+27</Node>
<Piece>14</Piece>
</Data>
<Data name="AppBy">
<Delimiter>"^"</Delimiter>
<Node>+23</Node>
<Piece>1</Piece>
</Data>
<Data name="Approval">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>1</Piece>
</Data>
<Data name="ArterialBloodGasQt">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>15</Piece>
</Data>
<Data name="AttPhyDict3">
<Delimiter>"^"</Delimiter>
<Node>+.6</Node>
<Piece>9</Piece>
</Data>
<Data name="AttPhyDict471">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>38</Piece>
</Data>
<Data name="AttPhySpecialty">
<Delimiter>"^"</Delimiter>
<Node>+.6</Node>
<Piece>12</Piece>
</Data>
<Data name="AuthNum">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>7</Piece>
</Data>
<Data name="Cin">
<Delimiter>"^"</Delimiter>
<Piece>32</Piece>
</Data>
<Data name="ClinicalRequest">
<Delimiter>"^"</Delimiter>
<Node>+38</Node>
<Piece>1</Piece>
</Data>
<Data name="ClmBtc">
<Delimiter>"^","*"</Delimiter>
<Piece>27,1</Piece>
</Data>
<Data name="ClmBtcTx">
<Delimiter>"^","*"</Delimiter>
<Piece>27,2</Piece>
</Data>
<Data name="Cob">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>1</Piece>
</Data>
<Data name="CobFsc">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>5</Piece>
</Data>
<Data name="CobPercentForLiability">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>9</Piece>
</Data>
<Data name="Com">
<RetrievalCode><![CDATA[ N Return,X,HMO,ID,MCARIN
 N ARCHMO,GSYS,GUCI,MCAMHMO,MCAPHMO,SYHC,SYHCL,SYHED,SYHM,SYHP,SYHPB,SYHR,SYHRG,UCHC,UCHCL,UCHED,UCHM,UCHP,UCHPB,UCHR,UCHRG N HMO S HMO={L1}
 s hmo={L1}
 S ARCHMO=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",16)
 s GSYS=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",20)
 s GUCI=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",19)
 s MCAMHMO=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",16)
 s MCAPHMO=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",15)
 s SYHC=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",12)
 s SYHCL=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",10)
 s SYHED=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",18)
 s SYHM=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",2)
 s SYHP=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",8)
 s SYHPB=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",6)
 s SYHR=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",4)
 s SYHRG=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",14)
 s UCHC=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",11)
 s UCHCL=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",9)
 s UCHED=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",17)
 s UCHM=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",1)
 s UCHP=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",7) 
 s UCHPB=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",5)
 s UCHR=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",3)
 s UCHRG=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",13)
 S HMO={L1}  ;MCA_B_REF.HMO
 S ID={L2}  ;MCA_B_REF.ID
 S MCARIN={L3}  ;MCA_B_REF.RIN
 S Return="",Return(1)=MCARIN+.009
 F  S Return(1)=$O(^[$ZCONVERT("MHRHMO","O","UTF8")]HMOREF(HMO,ID,Return(1)),1,Return(3)) Q:(Return(1)="")||(Return(1)>(MCARIN+.10))  S Return=Return_Return(3)_$C(13,10)
 F X=$L(Return,$C(13,10)):-1:1 Q:$P(Return,$C(13,10),X)'=""
 S Return=$P(Return,$c(13,10),1,X)
 ]]></RetrievalCode>
</Data>
<Data name="ComplicationInd">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>33</Piece>
</Data>
<Data name="ConfCom">
<RetrievalCode><![CDATA[ N Return,X,HMO,ID,MCARIN
 N GSYS,GUCI,MCAMHMO,MCAPHMO,SYHC,SYHCL,SYHED,SYHM,SYHP,SYHPB,SYHR,SYHRG,UCHC,UCHCL,UCHED,UCHM,UCHP,UCHPB,UCHR,UCHRG N HMO S HMO={L1}
 s hmo={L1}
 S ARCHMO=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",16)
 s GSYS=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",20)
 s GUCI=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",19)
 s MCAMHMO=$p($g(^[$ZCONVERT("MHREG","O","UTF8")]HMO(hmo)),"^",16)
 s MCAPHMO=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",15)
 s SYHC=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",12)
 s SYHCL=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",10) 
 s SYHED=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",18)
 s SYHM=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",2)
 s SYHP=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",8)
 s SYHPB=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",6)
 s SYHR=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",4)
 s SYHRG=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",14)
 s UCHC=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",11)
 s UCHCL=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",9)
 s UCHED=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",17)
 s UCHM=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",1)
 s UCHP=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",7)
 s UCHPB=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",5)
 s UCHR=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",3)
 s UCHRG=$p($g(^[$ZCONVERT("MHRREG","O","UTF8")]HMO(hmo)),"^",13)
 S HMO={L1}  ;MCA_B_REF.HMO
 S ID={L2}  ;MCA_B_REF.ID
 S MCARIN={L3}  ;MCA_B_REF.RIN
 S Return="",Return(1)=MCARIN+.30
 F  S Return(1)=$O(^["MHRHMO"]HMOREF(HMO,ID,Return(1)),1,Return(3)) Q:Return(1)>(MCARIN+.40)  S Return=Return_Return(3)_$C(13,10)
 F X=$L(Return,$C(13,10)):-1:1 Q:$P(Return,$C(13,10),X)'=""
 S Return=$P(Return,$c(13,10),1,X)
 s {*}=$Case(Return,$C(13,10):"",:Return)
 
]]></RetrievalCode>
</Data>
<Data name="ConsOnly">
<Delimiter>"^"</Delimiter>
<Node>+26</Node>
<Piece>7</Piece>
</Data>
<Data name="ContTel">
<Delimiter>"^"</Delimiter>
<Node>+.7</Node>
<Piece>6</Piece>
</Data>
<Data name="CovCat">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>8</Piece>
</Data>
<Data name="CovInLieuHos">
<Delimiter>"^"</Delimiter>
<Node>+27</Node>
<Piece>2</Piece>
</Data>
<Data name="Coverage">
<Delimiter>"^"</Delimiter>
<Node>+21</Node>
<Piece>16</Piece>
</Data>
<Data name="CreatedBy">
<Delimiter>"^"</Delimiter>
<Node>+.2</Node>
<Piece>1</Piece>
</Data>
<Data name="CreatedDt">
<Delimiter>"^"</Delimiter>
<Node>+.2</Node>
<Piece>2</Piece>
</Data>
<Data name="CreatedTime">
<Delimiter>"^"</Delimiter>
<Node>+.2</Node>
<Piece>3</Piece>
</Data>
<Data name="CurCondition">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>12</Piece>
</Data>
<Data name="CustomCopay">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>1</Piece>
</Data>
<Data name="CustomerDate1">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>1</Piece>
</Data>
<Data name="CustomerDate2">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>2</Piece>
</Data>
<Data name="CustomerDate3">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>3</Piece>
</Data>
<Data name="CustomerDate4">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>4</Piece>
</Data>
<Data name="CustomerDate5">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>5</Piece>
</Data>
<Data name="CustomerFreeText1">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>9</Piece>
</Data>
<Data name="CustomerFreeText2">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>10</Piece>
</Data>
<Data name="CustomerFreeText3">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>11</Piece>
</Data>
<Data name="CustomerFreeText4">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>12</Piece>
</Data>
<Data name="CustomerFreeText5">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>13</Piece>
</Data>
<Data name="CustomerFreeText6">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>14</Piece>
</Data>
<Data name="CustomerYesNo1">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>6</Piece>
</Data>
<Data name="CustomerYesNo2">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>7</Piece>
</Data>
<Data name="CustomerYesNo3">
<Delimiter>"^"</Delimiter>
<Node>+60</Node>
<Piece>8</Piece>
</Data>
<Data name="DailyOxyUseRate">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>12</Piece>
</Data>
<Data name="DateOfInjury">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>2</Piece>
</Data>
<Data name="DayOfWeekSat1st">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>12</Piece>
</Data>
<Data name="DayOfWeekSun1st">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>12</Piece>
</Data>
<Data name="Descr">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="DischDtHome">
<Delimiter>"^"</Delimiter>
<Node>+26</Node>
<Piece>12</Piece>
</Data>
<Data name="DischDx">
<Delimiter>"^"</Delimiter>
<Node>+.7</Node>
<Piece>3</Piece>
</Data>
<Data name="DischDxFromDt1">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>20</Piece>
</Data>
<Data name="DischDxFromDt2">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>22</Piece>
</Data>
<Data name="DischDxFromDt3">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>24</Piece>
</Data>
<Data name="DischDxToDt1">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>21</Piece>
</Data>
<Data name="DischDxToDt2">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>23</Piece>
</Data>
<Data name="DischDxToDt3">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>25</Piece>
</Data>
<Data name="DrgSerial">
<Delimiter>"~!@#$"</Delimiter>
<Node>+36</Node>
<Piece>1</Piece>
</Data>
<Data name="DtOrd">
<Delimiter>"^"</Delimiter>
<Piece>11</Piece>
</Data>
<Data name="Dx">
<Delimiter>"^"</Delimiter>
<Piece>25</Piece>
</Data>
<Data name="Dx1FromDt">
<Delimiter>"^"</Delimiter>
<Piece>35</Piece>
</Data>
<Data name="Dx1ToDt">
<Delimiter>"^"</Delimiter>
<Piece>36</Piece>
</Data>
<Data name="Dx2">
<Delimiter>"^"</Delimiter>
<Piece>34</Piece>
</Data>
<Data name="Dx2FromDt">
<Delimiter>"^"</Delimiter>
<Piece>37</Piece>
</Data>
<Data name="Dx2ToDt">
<Delimiter>"^"</Delimiter>
<Piece>38</Piece>
</Data>
<Data name="Edi278inPayrDepctr">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>11,6</Piece>
</Data>
<Data name="Edi278inPayrPrvctr">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>11,7</Piece>
</Data>
<Data name="Edi278inPayrReqctr">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>11,4</Piece>
</Data>
<Data name="Edi278inPayrRun">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>11,1</Piece>
</Data>
<Data name="Edi278inPayrSlnctr">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>11,8</Piece>
</Data>
<Data name="Edi278inPayrSubctr">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>11,5</Piece>
</Data>
<Data name="Edi278inPayrTxstctr">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>11,2</Piece>
</Data>
<Data name="Edi278inPayrUmoctr">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>11,3</Piece>
</Data>
<Data name="EdiAction">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>8</Piece>
</Data>
<Data name="EdiAttachmentTransCode">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>18</Piece>
</Data>
<Data name="EdiAttachmentType">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>17</Piece>
</Data>
<Data name="EdiAuthRejReason">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>6</Piece>
</Data>
<Data name="EdiCertType">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>1</Piece>
</Data>
<Data name="EdiEditRejReason">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>10</Piece>
</Data>
<Data name="EdiHsdDeliveryPattern">
<Delimiter>"6",","</Delimiter>
<Node>+52</Node>
<Piece>16,7</Piece>
</Data>
<Data name="EdiHsdPdCnt">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>16,6</Piece>
</Data>
<Data name="EdiHsdPdQual">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>16,5</Piece>
</Data>
<Data name="EdiHsdQuant">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>16,2</Piece>
</Data>
<Data name="EdiHsdQuantQual">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>16,1</Piece>
</Data>
<Data name="EdiHsdUnits">
<Delimiter>"^",","</Delimiter>
<Node>+52</Node>
<Piece>16,3</Piece>
</Data>
<Data name="EdiIncomingStat">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>9</Piece>
</Data>
<Data name="EdiLevOfServ">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>5</Piece>
</Data>
<Data name="EdiProvType">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>15</Piece>
</Data>
<Data name="EdiRefPrvTaxonomyCode">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>12</Piece>
</Data>
<Data name="EdiRejReason">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>6</Piece>
</Data>
<Data name="EdiReq">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>3</Piece>
</Data>
<Data name="EdiReqCat">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>2</Piece>
</Data>
<Data name="EdiServType">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>4</Piece>
</Data>
<Data name="EdiSvcPrvTaxonomyCode">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>13</Piece>
</Data>
<Data name="EdiTradingPartner">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>14</Piece>
</Data>
<Data name="EdiX12Status">
<Delimiter>"^"</Delimiter>
<Node>+52</Node>
<Piece>7</Piece>
</Data>
<Data name="EquipNm">
<Delimiter>"^"</Delimiter>
<Node>+27</Node>
<Piece>1</Piece>
</Data>
<Data name="EquipReasonDesc">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>7</Piece>
</Data>
<Data name="EstDob">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>29</Piece>
</Data>
<Data name="EstPendLiab">
<Delimiter>"^"</Delimiter>
<Piece>15</Piece>
</Data>
<Data name="ExpAdmDt">
<Delimiter>"^"</Delimiter>
<Piece>17</Piece>
</Data>
<Data name="ExpDischDt">
<Delimiter>"^"</Delimiter>
<Piece>21</Piece>
</Data>
<Data name="ExpLos">
<Delimiter>"^"</Delimiter>
<Piece>18</Piece>
</Data>
<Data name="ExpSurgDt">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>16</Piece>
</Data>
<Data name="Extnum">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>1</Piece>
</Data>
<Data name="FirstEncDt">
<Delimiter>"^"</Delimiter>
<Node>+26</Node>
<Piece>1</Piece>
</Data>
<Data name="FollowUpToIp">
<Delimiter>"^"</Delimiter>
<Node>+26</Node>
<Piece>11</Piece>
</Data>
<Data name="GlCredit">
<Delimiter>"^"</Delimiter>
<Node>+22</Node>
<Piece>2</Piece>
</Data>
<Data name="GlDebit">
<Delimiter>"^"</Delimiter>
<Node>+22</Node>
<Piece>1</Piece>
</Data>
<Data name="HhCertTypeCode">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>24</Piece>
</Data>
<Data name="HhMedCovInd">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>36</Piece>
</Data>
<Data name="HhNsfInd">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>35</Piece>
</Data>
<Data name="HhPhyContDt">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>38</Piece>
</Data>
<Data name="HhPhyOrdDt">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>37</Piece>
</Data>
<Data name="HhPrognosisCode">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>20</Piece>
</Data>
<Data name="HhStartDt">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>34</Piece>
</Data>
<Data name="InOutArea">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>2</Piece>
</Data>
<Data name="InOutArea2">
<Delimiter>"^"</Delimiter>
<Node>+27</Node>
<Piece>9</Piece>
</Data>
<Data name="IncomingOutgoing">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>3</Piece>
</Data>
<Data name="InpOut">
<Delimiter>"^"</Delimiter>
<Node>+.6</Node>
<Piece>6</Piece>
</Data>
<Data name="InsApprBy">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>10</Piece>
</Data>
<Data name="InsApprDt">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>11</Piece>
</Data>
<Data name="IntExt">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>13</Piece>
</Data>
<Data name="LastEditBy">
<Delimiter>"^"</Delimiter>
<Node>+.2</Node>
<Piece>4</Piece>
</Data>
<Data name="LastEditDt">
<Delimiter>"^"</Delimiter>
<Node>+.2</Node>
<Piece>5</Piece>
</Data>
<Data name="LastMensPd">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>28</Piece>
</Data>
<Data name="LastVisitDt">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>25</Piece>
</Data>
<Data name="LevelOfCare">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>8</Piece>
</Data>
<Data name="Loc">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>19</Piece>
</Data>
<Data name="MaxAmt">
<Delimiter>"^"</Delimiter>
<Piece>28</Piece>
</Data>
<Data name="MaxDays">
<Delimiter>"^"</Delimiter>
<Piece>24</Piece>
</Data>
<Data name="MeasurementCode">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>26</Piece>
</Data>
<Data name="MedApprBy">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>12</Piece>
</Data>
<Data name="MedApprDt">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>13</Piece>
</Data>
<Data name="MedCovIndicator">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>23</Piece>
</Data>
<Data name="MonthlyTreatmentCnt">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>28</Piece>
</Data>
<Data name="NatureCondCode">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>29</Piece>
</Data>
<Data name="NewBorn">
<Delimiter>"^"</Delimiter>
<Node>+27</Node>
<Piece>7</Piece>
</Data>
<Data name="NsgHomeResStatusCode">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>18</Piece>
</Data>
<Data name="OnsetCurSymp">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>30</Piece>
</Data>
<Data name="OpenFsc">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>6</Piece>
</Data>
<Data name="Operated">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>4</Piece>
</Data>
<Data name="OrigRefNum">
<Delimiter>"^"</Delimiter>
<Node>+40</Node>
<Piece>2</Piece>
</Data>
<Data name="OutOfNetwork">
<Delimiter>"^"</Delimiter>
<Node>+.7</Node>
<Piece>7</Piece>
</Data>
<Data name="OxyDeliverySysCode">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>18</Piece>
</Data>
<Data name="OxyEquipTypeCode">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>10</Piece>
</Data>
<Data name="OxyEquipTypeCode2">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>39</Piece>
</Data>
<Data name="OxySaturationQty">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>16</Piece>
</Data>
<Data name="OxyTestCondCode">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>17</Piece>
</Data>
<Data name="OxyTestFindCode">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>19</Piece>
</Data>
<Data name="OxyUseHourRate">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>13</Piece>
</Data>
<Data name="OxygenFlowRate">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>11</Piece>
</Data>
<Data name="PatCondDesc1">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>5</Piece>
</Data>
<Data name="PatCondDesc2">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>6</Piece>
</Data>
<Data name="PatEventTrackingNum">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>10</Piece>
</Data>
<Data name="PatPrognosisCode">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>20</Piece>
</Data>
<Data name="PayType">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>1</Piece>
</Data>
<Data name="PcpOfRefPatient">
<Delimiter>"^"</Delimiter>
<Piece>9</Piece>
</Data>
<Data name="PhyContDt">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>26</Piece>
</Data>
<Data name="PortOxyFlowRate">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>21</Piece>
</Data>
<Data name="PreCertNum">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>2</Piece>
</Data>
<Data name="PreConvRefNum">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>4</Piece>
</Data>
<Data name="Precert">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>1</Piece>
</Data>
<Data name="PrecertDt">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>3</Piece>
</Data>
<Data name="PriApp">
<Delimiter>"^"</Delimiter>
<Node>+26</Node>
<Piece>10</Piece>
</Data>
<Data name="PriEditBy">
<Delimiter>"^"</Delimiter>
<Node>+.2</Node>
<Piece>6</Piece>
</Data>
<Data name="PriEditDt">
<Delimiter>"^"</Delimiter>
<Node>+.2</Node>
<Piece>7</Piece>
</Data>
<Data name="PrognosisCode">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>13</Piece>
</Data>
<Data name="PrvCertId">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>14</Piece>
</Data>
<Data name="ReasForRefFrtxt">
<Delimiter>"^"</Delimiter>
<Node>+.7</Node>
<Piece>1</Piece>
</Data>
<Data name="ReasStatis">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>21</Piece>
</Data>
<Data name="Reason">
<Delimiter>"^"</Delimiter>
<Piece>13</Piece>
</Data>
<Data name="ReasonForRef2">
<Delimiter>"^"</Delimiter>
<Node>+.7</Node>
<Piece>4</Piece>
</Data>
<Data name="RefCondCat">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>17</Piece>
</Data>
<Data name="RefCondCode">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>19</Piece>
</Data>
<Data name="RefCont">
<Delimiter>"^"</Delimiter>
<Node>+.7</Node>
<Piece>5</Piece>
</Data>
<Data name="RefFromEmerg">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>3</Piece>
</Data>
<Data name="RefNum">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="RefPhyD123">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>7</Piece>
</Data>
<Data name="RefPhyFreetext">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>8</Piece>
</Data>
<Data name="RefPhyFreetextAddr1">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>16</Piece>
</Data>
<Data name="RefPhyFreetextAddr2">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>17</Piece>
</Data>
<Data name="RefPhyFreetextCty">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>18</Piece>
</Data>
<Data name="RefPhyFreetextId">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>9</Piece>
</Data>
<Data name="RefPhyFreetextSt">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>19</Piece>
</Data>
<Data name="RefPhyFreetextTel">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>15</Piece>
</Data>
<Data name="RefPhyFreetextZip">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>20</Piece>
</Data>
<Data name="RefProv">
<Delimiter>"^"</Delimiter>
<Piece>10</Piece>
</Data>
<Data name="RefType">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="ReferToBa">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>4</Piece>
</Data>
<Data name="ReferToDiv">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>5</Piece>
</Data>
<Data name="ReferToFreetext">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>11</Piece>
</Data>
<Data name="ReferToFreetextId">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>12</Piece>
</Data>
<Data name="ReferToLoc">
<Delimiter>"^"</Delimiter>
<Piece>8</Piece>
</Data>
<Data name="ReferToPhy">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>10</Piece>
</Data>
<Data name="ReferToProv">
<Delimiter>"^"</Delimiter>
<Piece>12</Piece>
</Data>
<Data name="ReferToVnd">
<Delimiter>"^"</Delimiter>
<Piece>26</Piece>
</Data>
<Data name="ReferralRequest">
<Delimiter>"^"</Delimiter>
<Node>+38</Node>
<Piece>2</Piece>
</Data>
<Data name="RegMicu">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>9</Piece>
</Data>
<Data name="RentPur">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>10</Piece>
</Data>
<Data name="ReplacementMem">
<Delimiter>"^"</Delimiter>
<Node>+40</Node>
<Piece>6</Piece>
</Data>
<Data name="ReplacementRefNum">
<Delimiter>"^"</Delimiter>
<Node>+40</Node>
<Piece>3</Piece>
</Data>
<Data name="ReplacementType">
<Delimiter>"^"</Delimiter>
<Node>+40</Node>
<Piece>1</Piece>
</Data>
<Data name="ResTherOrderText">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>14</Piece>
</Data>
<Data name="RevDt">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>9</Piece>
</Data>
<Data name="RiskFactor">
<Delimiter>"^"</Delimiter>
<Node>+.6</Node>
<Piece>7</Piece>
</Data>
<Data name="RiskFund">
<Delimiter>"^"</Delimiter>
<Piece>29</Piece>
</Data>
<Data name="RmsType">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>8</Piece>
</Data>
<Data name="RoomNum">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>28</Piece>
</Data>
<Data name="RoundPhy">
<Delimiter>"^"</Delimiter>
<Node>+27</Node>
<Piece>8</Piece>
</Data>
<Data name="SameDayAdm">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>6</Piece>
</Data>
<Data name="ServDtFrom">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>31</Piece>
</Data>
<Data name="ServDtTo">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>32</Piece>
</Data>
<Data name="Service">
<Delimiter>"^"</Delimiter>
<Piece>33</Piece>
</Data>
<Data name="SmTrtmtCnt">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>24</Piece>
</Data>
<Data name="SmTrtmtSeriesNum">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>23</Piece>
</Data>
<Data name="SnfIndicator">
<Delimiter>"^"</Delimiter>
<Node>+25</Node>
<Piece>22</Piece>
</Data>
<Data name="SourceType">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>13</Piece>
</Data>
<Data name="Spec">
<Delimiter>"^"</Delimiter>
<Node>+27</Node>
<Piece>6</Piece>
</Data>
<Data name="SrvTraceNum">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>11</Piece>
</Data>
<Data name="Statis">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>4</Piece>
</Data>
<Data name="Status">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="SubluxationLevelCode">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>25</Piece>
</Data>
<Data name="SubluxationLevelCodeTo">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>38</Piece>
</Data>
<Data name="TargetType">
<Delimiter>"^"</Delimiter>
<Node>+56</Node>
<Piece>14</Piece>
</Data>
<Data name="TimeOfAdmit">
<Delimiter>"^"</Delimiter>
<Node>+.6</Node>
<Piece>3</Piece>
</Data>
<Data name="TimeOfDay">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>13</Piece>
</Data>
<Data name="TimeOfVis">
<Delimiter>"^"</Delimiter>
<Node>+27</Node>
<Piece>10</Piece>
</Data>
<Data name="TotEstLiab">
<Delimiter>"^"</Delimiter>
<Piece>14</Piece>
</Data>
<Data name="TransDist">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>22</Piece>
</Data>
<Data name="TransFrom">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>8</Piece>
</Data>
<Data name="TransFromFrtxt">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>37</Piece>
</Data>
<Data name="TransFromOthHos">
<Delimiter>"^"</Delimiter>
<Node>+27</Node>
<Piece>5</Piece>
</Data>
<Data name="TransTo">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>11</Piece>
</Data>
<Data name="TransToFrtxt">
<Delimiter>"^"</Delimiter>
<Node>+21</Node>
<Piece>40</Piece>
</Data>
<Data name="TransWeight">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>36</Piece>
</Data>
<Data name="TreatmentPdCount">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>27</Piece>
</Data>
<Data name="TreatmentsAuthorized">
<Delimiter>"^"</Delimiter>
<Piece>23</Piece>
</Data>
<Data name="TypeOfAdm">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>5</Piece>
</Data>
<Data name="TypeOfHhc">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>17</Piece>
</Data>
<Data name="TypeOfHomeHealth">
<Delimiter>"^"</Delimiter>
<Node>+.6</Node>
<Piece>5</Piece>
</Data>
<Data name="TypeOfTherapy">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>16</Piece>
</Data>
<Data name="UrReviewer">
<Delimiter>"^"</Delimiter>
<Node>+55</Node>
<Piece>2</Piece>
</Data>
<Data name="Urgency">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>7</Piece>
</Data>
<Data name="ValidFromDt">
<Delimiter>"^"</Delimiter>
<Piece>6</Piece>
</Data>
<Data name="ValidThru">
<Delimiter>"^"</Delimiter>
<Node>+27</Node>
<Piece>15</Piece>
</Data>
<Data name="ValidToDt">
<Delimiter>"^"</Delimiter>
<Piece>7</Piece>
</Data>
<Data name="VndAddr">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>5</Piece>
</Data>
<Data name="VndTel">
<Delimiter>"^"</Delimiter>
<Node>+.8</Node>
<Piece>6</Piece>
</Data>
<Data name="VndrCat">
<Delimiter>"^"</Delimiter>
<Node>+5</Node>
<Piece>20</Piece>
</Data>
<Data name="XrayAvailability">
<Delimiter>"^"</Delimiter>
<Node>+3</Node>
<Piece>30</Piece>
</Data>
</SQLMap>
<SQLMap name="ZActAdmDt">
<Type>index</Type>
<Condition>{ActAdmDt}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>ActAdmDt</ConditionFields>
<Global>^["MHRCONV"]HMORIDX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"ACTADM"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{ActAdmDt}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>Sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZActDischDt">
<Type>index</Type>
<Condition>{ActDischDt}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>ActDischDt</ConditionFields>
<Global>^["MHRCONV"]HMORIDX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"ACTDSC"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{ActDischDt}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>Sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZCreatedBy">
<Type>index</Type>
<ConditionalWithHostVars/>
<Global>^["MHRCONV"]HMORIDX</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"INI"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{CreatedBy}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZDtOrd">
<Type>index</Type>
<ConditionalWithHostVars/>
<Global>^["MHRCONV"]HMORIDX</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"ORDAT"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{DtOrd}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>Sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZExpAdmDt">
<Type>index</Type>
<Condition>{ExpAdmDt}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>ExpAdmDt</ConditionFields>
<Global>^["MHRCONV"]HMORIDX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"EXPADM"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{ExpAdmDt}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>Sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZExpDischDt">
<Type>index</Type>
<Condition>{ExpDischDt}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>ExpDischDt</ConditionFields>
<Global>^["MHRCONV"]HMORIDX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"EXPDSC"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{ExpDischDt}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZExtnum">
<Type>index</Type>
<Condition>{Extnum}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>Extnum</ConditionFields>
<Global>^["MHRCONV"]HMORIDX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"EXTNUM"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{Extnum}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZRefNum">
<Type>index</Type>
<ConditionalWithHostVars/>
<Global>^["MHRCONV"]HMORIDX</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREX({L1})</DataAccess>
<Expression>{RefNum}</Expression>
<StartValue>1000</StartValue>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZRefProv">
<Type>index</Type>
<ConditionalWithHostVars/>
<Global>^["MHRCONV"]HMORIDX</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"RBYDOC"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{RefProv}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["HMOHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZRefType">
<Type>index</Type>
<ConditionalWithHostVars/>
<Global>^["MHRCONV"]HMORIDX</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"REFTYP"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{RefType}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZReferToBa">
<Type>index</Type>
<Condition>{ReferToBa}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>ReferToBa</ConditionFields>
<Global>^["MHRCONV"]HMORIDX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"RTOBA"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{ReferToBa}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZReferToDiv">
<Type>index</Type>
<Condition>{ReferToDiv}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>ReferToDiv</ConditionFields>
<Global>^["MHHCONV"]HMORIDX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"RTODIV"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{ReferToDiv}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZReferToLoc">
<Type>index</Type>
<Condition>{ReferToLoc}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>ReferToLoc</ConditionFields>
<Global>^["MHRCONV"]HMORIDX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"RTOLOC"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{ReferToLoc}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZReferToPhy">
<Type>index</Type>
<Condition>{ReferToPhy}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>ReferToPhy</ConditionFields>
<Global>^["MHRCONV"]HMORIDX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"RTOPHY"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{ReferToPhy}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZReferToProv">
<Type>index</Type>
<Condition>{ReferToProv}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>ReferToProv</ConditionFields>
<Global>^["MHRCONV"]HMORIDX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"RTODOC"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{ReferToProv}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZReferToVnd">
<Type>index</Type>
<Condition>{ReferToVnd}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>ReferToVnd</ConditionFields>
<Global>^["MHRCONV"]HMORIDX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"RTOVND"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{ReferToVnd}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZStatus">
<Type>index</Type>
<Global>^["MHR"]HMO</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"RFSTA"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{Status}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZValidFromDt">
<Type>index</Type>
<ConditionalWithHostVars/>
<Global>^["MHRCONV"]HMORIDX</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"FROMDAT"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{ValidFromDt}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="ZValidToDt">
<Type>index</Type>
<Condition>{ValidToDt}'=""</Condition>
<ConditionalWithHostVars>1</ConditionalWithHostVars>
<ConditionFields>ValidToDt</ConditionFields>
<Global>^["MHRCONV"]HMORIDX</Global>
<PopulationType>conditional</PopulationType>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1})</DataAccess>
<Expression>"TODAT"</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2})</DataAccess>
<Expression>{ValidToDt}</Expression>
</Subscript>
<Subscript name="4">
<AccessType>Sub</AccessType>
<DataAccess>^["MHRHMO"]HMORIDX({L1},{L2},{L3})</DataAccess>
<Expression>{RefNum}</Expression>
</Subscript>
<Data name="Id">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Rin">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralAdmittingDx">
<Description>
This base table represents the admitting diagnosis entries from the referral and
claims file. The data is collected from a repeating field pointing to Dict. 36.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,63895.492768</TimeChanged>
<TimeCreated>63729,46518</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_ADM_DX</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralAdmittingDx</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>AdmittingDxs</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Dx">
<Description>
This column contains the admitting diagnosis.</Description>
<Type>Dict.Icd9CmDiagnosis</Type>
</Property>

<ForeignKey name="Dx">
<Properties>Dx</Properties>
<ReferencedClass>Dict.Icd9CmDiagnosis</ReferencedClass>
</ForeignKey>

<Property name="Repet">
<Description>
This column is used to loop thru each diagnosis.</Description>
<Type>%String</Type>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Repet</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralAdmittingDx"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="List">
<Description>
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer,Field:%String="Name"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 S Referral=Hmo_"||"_Id_"||"_Rin
 &SQL(SELECT LIST(Dx) INTO :Return
      FROM   Referrals.ReferralAdmittingDx
      WHERE  Referral=:Referral)                   
 I ($G(Return)="")||(Field="Id") Q Return
 Q ##class(Dict.Icd9CmDiagnosis).GetValueByIds(Return,Field)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>AI:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET</PublicList>
<Implementation><![CDATA[ D ..DxSetObjectId($G(AI(3200)))
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[AI:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 S AI(3200)=""
 I ..Dx S AI(3200)=..Dx.SummaryValidate("Dx",.Error)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.ReferralAdmittingDx</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralAdmittingDxS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>Piece</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3}+32)</DataAccess>
<Delimiter>"^"</Delimiter>
<Expression>{Repet}</Expression>
</Subscript>
<Data name="Dx"/>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralAdmittingPx">
<Description>
Repeating group for admission procedures in referrals module</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,64269.716449</TimeChanged>
<TimeCreated>63729,46518</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_ADM_PX</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralAdmittingPx</Default>
</Parameter>

<Property name="Hmo">
<Type>Dict.HmoProfile</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="Hmo">
<Properties>Hmo</Properties>
<ReferencedClass>Dict.HmoProfile</ReferencedClass>
</ForeignKey>

<Property name="Id">
<Type>Registration.Patient</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<ForeignKey name="Id">
<Properties>Id</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Px">
<Description><![CDATA[
This column contains the admitting procedure code.
<P>]]></Description>
<Type>Dict.Icd9CmProcedure</Type>
</Property>

<ForeignKey name="Px">
<Properties>Px</Properties>
<ReferencedClass>Dict.Icd9CmProcedure</ReferencedClass>
</ForeignKey>

<Property name="Repet">
<Description>
This column is used to loop thru the repetitions of procedure codes.</Description>
<Type>%String</Type>
<SqlColumnNumber>5</SqlColumnNumber>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Rin">
<Description>
a referral internal id.</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Hmo,Id,Rin,Repet</Properties>
<Unique>1</Unique>
</Index>

<ForeignKey name="Referral">
<Properties>Hmo,Id,Rin</Properties>
<ReferencedClass>Referrals.Referral</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralAdmittingPx"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="List">
<Description>
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer,Field:%String="Name"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 &SQL(SELECT LIST(Px) INTO :Return
      FROM   Referrals.ReferralAdmittingPx
      WHERE  Hmo=:Hmo AND Id=:Id AND Rin=:Rin)
 I ($G(Return)="")||(Field="Id") Q Return
 Q ##class(Dict.ProcedureCode).GetValueByIds(Return,Field)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>AI:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET,UDDREPET,UDDREPET</PublicList>
<Implementation><![CDATA[
 D ..HmoSetObjectId($G(HMO))
 D ..IdSetObjectId($G(ID))
 D ..PxSetObjectId($G(AI(3300+UDDREPET)))
 S ..Rin=$G(MCARIN)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[AI:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>HMO,ID,MCARIN,UDDREPET</PublicList>
<Implementation><![CDATA[
 S HMO=""
 I ..Hmo S HMO=..Hmo.SummaryValidate("Hmo",.Error)
 S ID=""
 I ..Id,##class(%Dictionary.CompiledMethod).%OpenId("Registration.Patient||SummaryValidate") S ID=..Id.SummaryValidate("Id",.Error)
 E   I ..Id S ID=..Id.%Id()
 S MCARIN=..Rin
 S AI(3300+UDDREPET)=""
 I ..Px S AI(3300+UDDREPET)=..Px.SummaryValidate("Px",.Error)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.ReferralAdmittingPx</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralAdmittingPxS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRREG"]HMOREF({L1})</DataAccess>
<Expression>{Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRREG"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRREG"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>Piece</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3}+33)</DataAccess>
<Delimiter>"^"</Delimiter>
<Expression>{Repet}</Expression>
</Subscript>
<Data name="Px"/>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralAppointment">
<Description>
Created by SUN 5750.  This table will allow DBMS Report Writer to query
referrals and have the SCHED appoinments associated with the referral
display.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,65424.922112</TimeChanged>
<TimeCreated>63729,46521</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_SCHED</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralAppointment</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>Appointments</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Dt">
<Description>
This column contains the date of the appointment.</Description>
<Type>%Date</Type>
</Property>

<Property name="Tm">
<Description>
This column contains the time of the appointment.</Description>
<Type>%Time</Type>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="ApptNum">
<Type>Sched.Appointment</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="ApptNum">
<Properties>ApptNum</Properties>
<ReferencedClass>Sched.Appointment</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ApptNum</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralAppointment"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 If '$D(SDPR)!'$D(SYE) D ^UDDSCH  ;Get extended syntax for SCH_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 If '$D(SDPR)!'$D(SYE) D ^UDDSCH  ;Get extended syntax for SCH_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SDPR,SSEC,SYA,SYS,UCA,UCS,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 If '$D(SDPR)!'$D(SYE) D ^UDDSCH  ;Get extended syntax for SCH_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM Referrals.ReferralAppointment)
 Q $$$OK
]]></Implementation>
</Method>

<Method name="List">
<Description>
provided an Hmo, Id, and Rin get a comma delimited list of appointments
the referral is linked to
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SDPR,SSEC,SYA,SYS,UCA,UCS,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 If '$D(SDPR)!'$D(SYE) D ^UDDSCH  ;Get extended syntax for SCH_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(SELECT LIST(ApptNum) INTO :Return
      FROM   Referrals.ReferralAppointment
      WHERE  Referral->Hmo=:Hmo AND Referral->Id=:Id AND
             Referral->Rin=:Rin)
 Q $G(Return)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SDPR,SSEC,SYA,SYS,UCA,UCS,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 If '$D(SDPR)!'$D(SYE) D ^UDDSCH  ;Get extended syntax for SCH_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralAppointmentS</StreamLocation>
<ExtentSize>1497</ExtentSize>
<Property name="ApptNum">
<Selectivity>1</Selectivity>
</Property>
<Property name="Dt">
<Selectivity>1.0904%</Selectivity>
</Property>
<Property name="Referral">
<Selectivity>0.0831%</Selectivity>
</Property>
<Property name="Tm">
<Selectivity>1.8424%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3})</DataAccess>
<Expression>"SCHED"</Expression>
</Subscript>
<Subscript name="5">
<AccessType>sub</AccessType>
<DataAccess>^[$P(HMOTBL({L1}),"^",1)]HMOREF({L1},{L2},{L3},{L4})</DataAccess>
<Expression>{ApptNum}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Data name="Dt">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Tm">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralApptSummary">
<Description>
This table contains information about the number of appointments linked to the 
referral</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,66847.546786</TimeChanged>
<TimeCreated>63729,46521</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_SCHED_SUMMARY</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralApptSummary</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>ApptSummarys</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Pending">
<Description>
this column contains the number of pending appointments linked to this referral</Description>
<Type>%Integer</Type>
</Property>

<Property name="Total">
<Description>
this column contains the total number appointments linked to the referral</Description>
<Type>%Integer</Type>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties/>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralApptSummary"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 &SQL(DELETE %NOTRIGGER FROM Referrals.ReferralApptSummary)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralApptSummaryS</StreamLocation>
<ExtentSize>1244</ExtentSize>
<Property name="Pending">
<Selectivity>33.3333%</Selectivity>
</Property>
<Property name="Referral">
<Selectivity>1</Selectivity>
</Property>
<Property name="Total">
<Selectivity>20.0000%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3})</DataAccess>
<Expression>"SCHED"</Expression>
</Subscript>
<Subscript name="5">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3},{L4})</DataAccess>
<Expression>0</Expression>
</Subscript>
<Data name="Pending">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Total">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralAudit">
<Description><![CDATA[
This table provides referral audit trail information.  Information in this
table is purged by MCA NightJobs.  The number of days to maintain this data is
found in the Referral Audit table.  Since not all referrals will have an audit
trail if you query this table along with <CLASS>Referrals.Referral</CLASS> you may want to use a LEFT
JOIN.
The Cache Class <class>DBMS.Tools</class> contains a method called
LogicalToDisplay which can be used to convert the data in the Old and New value 
columns to a displayable format.]]></Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,67355.501762</TimeChanged>
<TimeCreated>63729,46519</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_AUDIT</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralAudit</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>Audits</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Col">
<Description>
This column displays the Referrals Column that is audited.</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode> S {*}=$P({TabCol},".",2) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="CALCSELECTIVITY" value="0"/>
<Parameter name="CAPTION" value="Column"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="Dt">
<Description>
This column displays the date an audit was posted.  This column is linked to
the index table MCA_I_REF_AUD_INDEX.  Use of this column in a Query where
clause may reduce processing time in a Query.</Description>
<Type>%Date</Type>
<SqlColumnNumber>2</SqlColumnNumber>
<SqlComputeCode> S {*}=+$H </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Date"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Property name="Ini">
<Description><![CDATA[
This column displays the Security Plus username of the person that posted and
audit.  This column joins with the table <CLASS>SecurityPlus.Usr</CLASS> so that detailed user
information can be retrieved.]]></Description>
<Type>SecurityPlus.Usr</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Initials"/>
</Property>

<ForeignKey name="Ini">
<Properties>Ini</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="NewValue">
<Description><![CDATA[
This column describes the new internal value of audited column.  If the column
type is Freetext you could use this column, otherwise you would probaby not
want to use this column.  To display the external value use the column
NEW_VAL.
<P>]]></Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Internal New Value"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OldValue">
<Description>
This column describes the old internal value of audited column.  If the column
type is Freetext you could use this column, otherwise you would probaby not
want to use this column.  To display the old value use the column OLD_VAL.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Internal Old Value"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="60"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tabcol">
<Description>
This column displays the full DBMS table.column name of the field that was
audited.</Description>
<Type>%String</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
<Parameter name="CAPTION" value="Table Column"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="60"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tm">
<Description>
This column displays the posting time of the audit. </Description>
<Type>%Time</Type>
<SqlColumnNumber>3</SqlColumnNumber>
<SqlComputeCode> S {*}=$P($H,",",2) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
<Parameter name="CAPTION" value="Time"/>
<Parameter name="FORMAT" value="4"/>
<Parameter name="XMLIO" value="CALC"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Dt,Tm,Tabcol</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="DeleteDtIndex">
<Code><![CDATA[
 ;If there are no records for this dt then delete the Dt Index
 N ROWID
 N Referral S Referral={Referral}
 N Dt       S Dt={Dt}
 &SQL(SELECT %ID INTO :ROWID FROM Referrals.ReferralAudit
      WHERE  Referral=:Referral AND Dt=:Dt)
 I $G(ROWID)'="" Q
 
 ;At this there are no audits for the supplied Dt and Referral
 N HMO,ID,RIN
 S HMO=$P({Referral},"||",1),ID=$P({Referral},"||",2),RIN=$P({Referral},"||",3)
 &SQL(DELETE FROM Referrals.AuditIndex 
      WHERE  Hmo=:HMO AND Dt=:Dt AND Id=:ID AND Rin=:RIN)]]></Code>
<Event>DELETE</Event>
<Time>AFTER</Time>
</Trigger>

<Trigger name="AllowDelete">
<Code>
 ;q</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="InsertDtIndex">
<Code><![CDATA[
 N HMO,ID,RIN,DT
 S DT={Dt}
 S HMO=$P({Referral},"||",1),ID=$P({Referral},"||",2),RIN=$P({Referral},"||",3)
 &SQL(INSERT %NOCHECK INTO Referrals.AuditIndex
       (Hmo,Dt,Id,Rin) VALUES (:HMO,:DT,:ID,:RIN))]]></Code>
<Event>INSERT</Event>
<Time>AFTER</Time>
</Trigger>

<Trigger name="AllowInsert">
<Code>
 ;q</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralAudit"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="ByHmoIdRin">
<Description>
</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT   T1.Dt,T1.Tm,
         T1.Ini,T1.Ini->FullName,T1.Ini->Telephone,
         DBMS.Tools_LogicalToDisplay(T1.TabCol,T1.OldValue) As OldValue,
         DBMS.Tools_LogicalToDisplay(T1.TabCol,T1.NewValue) As NewValue,
         (SELECT COALESCE(T2.Head,$PIECE(T1.TabCol,'.',2))
          FROM   DBMS.Column T2
          WHERE  T2.Column = $PIECE(T1.TabCol,'.',2) AND
                 T2.TableDefinition->TableNm = $PIECE(T1.TabCol,'.',1)) 
          As FieldNm
FROM     Referrals.ReferralAudit T1
WHERE    T1.Referral->Hmo=:Hmo AND 
         T1.Referral->Id=:Id   AND 
         T1.Referral->Rin=:Rin
ORDER BY T1.Dt DESC,T1.Tm DESC]]></SqlQuery>
<Parameter name="ROWSPEC" value="Dt:%Date,Tm:%Time,Ini:%String,FullName:%String,Telephone:%String,OldValue:%String,NewValue:%String,FieldNm:%String"/>
</Query>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 TSTART
 S HMO="" F  S HMO=$O(HMOTBL(HMO)) Q:HMO=""  D
 . K ^[$P(HMOTBL(HMO),"^",1)]HMOREFAX(HMO)   ;Data Global
 D ##class(Referrals.AuditIndex).%KillExtent()
 TCOMMIT
 Q $$$OK
]]></Implementation>
</Method>

<Method name="Maintenance">
<Description>
Delete records older than what is defined as the Purge days</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec/>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 &SQL(DECLARE DtIndex CURSOR FOR
      SELECT Hmo,Id,Dt,Rin INTO :Hmo,:Id,:Dt,:Rin
      FROM   Referrals.AuditIndex T1
      WHERE  datediff('dd',Dt,CURRENT_DATE) > 
             (SELECT PurgeDays FROM MCA.AuditTrailSetup T2
              WHERE  T2.Hmo = T1.Hmo AND FunctionalModule = 'REFERRALS'))

  &SQL(OPEN  DtIndex)
  FOR { &SQL(FETCH DtIndex)
        QUIT:SQLCODE  
        s SQLCODE=""
        &SQL(DELETE FROM Referrals.ReferralAudit
             WHERE Referral->Hmo = :Hmo AND Referral->Id=:Id AND
                   Referral->Rin = :Rin AND Dt = :Dt)
      }

 &SQL(CLOSE DtIndex)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralAuditS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREFAU({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREFAU({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREFAU({L1},{L2},{L3})</DataAccess>
<Expression>{Dt}</Expression>
</Subscript>
<Subscript name="5">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREFAU({L1},{L2},{L3},{L4})</DataAccess>
<Expression>{Tm}</Expression>
</Subscript>
<Subscript name="6">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREFAU({L1},{L2},{L3},{L4},{L5})</DataAccess>
<Expression>{Tabcol}</Expression>
</Subscript>
<Subscript name="7">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREFAU({L1},{L2},{L3},{L4},{L5},{L6})</DataAccess>
<Expression>0</Expression>
</Subscript>
<Data name="Ini">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="NewValue">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="OldValue">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralAuthorizedPx">
<Description>
This table holds the referral authorized procedure code ranges and their units
in a repeating fashion. It is used by Open Referral feature in v8.0 only. May
be in the future, this will be used by MCA Referrals as well.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,67703.771761</TimeChanged>
<TimeCreated>63729,46519</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_AUTH_PX</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralAuthorizedPx</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>AuthorizedPxs</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="ApprovedAmt">
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Approved Amt"/>
</Property>

<Property name="DataType">
<Description>
This column stores the data type of the dictioanry field number in dictionary 1,
stored in DICT_FLD. "F"=Free Text, "S"=Synonym, # =dictionary pointer.</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Days">
<Type>%Numeric</Type>
</Property>

<Property name="DictFld">
<Description><![CDATA[
Dictionary 1 field number for this repetition, present only if
MCA_B_REF_AUTH_PX.RANGE_SINGLE_FLAG is "RANGE"
<P>
<P>]]></Description>
<Type>%Numeric</Type>
</Property>

<Property name="EndWith">
<Description>
This column contains the ending value of the procedure code range DS.</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ExcludeInclude">
<Description>
This column contains the flag (EXCLUDE/INCLUDE) indicating whether the procedure
code/range should be excluded or included.</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/INC/EXC/"/>
</Property>

<Property name="Proc">
<Description>
This column would contain the procedure code DE if the selection is a Single
Entry.</Description>
<Type>Dict.ProcedureCode</Type>
</Property>

<ForeignKey name="Proc">
<Properties>Proc</Properties>
<ReferencedClass>Dict.ProcedureCode</ReferencedClass>
</ForeignKey>

<Property name="RangeSingleFlag">
<Description>
This column contains the flag (RANGE/SINGLEe/GROUP) indicating if the current
line is a single procedure code or a range of procedures or a procedure
grouping.</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/RANGE/SINGLE/GROUP/"/>
</Property>

<Property name="Repet">
<Description><![CDATA[
This is a dummy column that report writer uses to loop through the nodes in
^HMOREF(HMO,ID,RIN,"AUTHPX","PROC",1..n)
<P>]]></Description>
<Type>%Numeric</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="StartFrom">
<Description>
This column contains the starting procedure code or range name.</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Treatments">
<Type>%Numeric</Type>
</Property>

<Property name="Units">
<Description>
This column contains the number of units this procedure code/range authorizes.
It is for informational purpose only. It is not used in adjudication.</Description>
<Type>%Numeric</Type>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Repet</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralAuthorizedPx"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM Referrals.ReferralAuthorizedPx)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>AUTHPX:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 S ..ApprovedAmt=$G(AUTHPX)
 S ..DataType=$G(AUTHPX)
 S ..Days=$G(AUTHPX)
 S ..DictFld=$G(AUTHPX)
 S ..EndWith=$G(AUTHPX)
 S ..ExcludeInclude=$G(AUTHPX)
 D ..ProcSetObjectId($G(AUTHPX))
 S ..RangeSingleFlag=$G(AUTHPX)
 S ..StartFrom=$G(AUTHPX)
 S ..Treatments=$G(AUTHPX)
 S ..Units=$G(AUTHPX)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[AUTHPX:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 S AUTHPX=..ApprovedAmt
 S AUTHPX=..DataType
 S AUTHPX=..Days
 S AUTHPX=..DictFld
 S AUTHPX=..EndWith
 S AUTHPX=..ExcludeInclude
 S AUTHPX=""
 I ..Proc S AUTHPX=..Proc.SummaryValidate("Proc",.Error)
 S AUTHPX=..RangeSingleFlag
 S AUTHPX=..StartFrom
 S AUTHPX=..Treatments
 S AUTHPX=..Units
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..DataType["^") Q -1
 I (..EndWith["^") Q -1
 I (..ExcludeInclude["^") Q -1
 I (..RangeSingleFlag["^") Q -1
 I (..StartFrom["^") Q -1
 Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.ReferralAuthorizedPx</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralAutAFE8S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3})</DataAccess>
<Expression>"AUTHPX"</Expression>
</Subscript>
<Subscript name="5">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3},{L4})</DataAccess>
<Expression>"PROC"</Expression>
</Subscript>
<Subscript name="6">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3},{L4},{L5})</DataAccess>
<Expression>{Repet}</Expression>
</Subscript>
<Data name="ApprovedAmt">
<Delimiter>"^"</Delimiter>
<Piece>9</Piece>
</Data>
<Data name="DataType">
<Delimiter>"^"</Delimiter>
<Piece>8</Piece>
</Data>
<Data name="Days">
<Delimiter>"^"</Delimiter>
<Piece>10</Piece>
</Data>
<Data name="DictFld">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="EndWith">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="ExcludeInclude">
<Delimiter>"^"</Delimiter>
<Piece>7</Piece>
</Data>
<Data name="Proc">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="RangeSingleFlag">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="StartFrom">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="Treatments">
<Delimiter>"^"</Delimiter>
<Piece>11</Piece>
</Data>
<Data name="Units">
<Delimiter>"^"</Delimiter>
<Piece>6</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralBenefit">
<Description>
This table contains the history by coverage category for all claims/invoices
referencing this referral.  when Cov=0 this is the totals for all coverage
categories.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>67330,67658.35184</TimeChanged>
<TimeCreated>63729,46519</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_BEN_HIST</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralBenefit</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>Benefits</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Accum">
<Description>
a reference to the accumulator</Description>
<Type>Dict.HmoAccumulator</Type>
<SqlColumnNumber>3</SqlColumnNumber>
<Parameter name="CAPTION" value="Accumulator"/>
</Property>

<ForeignKey name="Accum">
<Properties>Accum</Properties>
<ReferencedClass>Dict.HmoAccumulator</ReferencedClass>
</ForeignKey>

<Property name="Amt">
<Description>
the amount for the accumulator.  This amount is in logical format.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Amount"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Cov">
<Description><![CDATA[
This column contains either 0 to represent all coverage categories or a Id to
<class>Dict.HmoCoverageCategory</class>]]></Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="MINVAL" value="0"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Cov,Accum</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralBenefit"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralBenefitS</StreamLocation>
<ExtentSize>17315</ExtentSize>
<Property name="Accum">
<Selectivity>33.3333%</Selectivity>
</Property>
<Property name="Amt">
<Selectivity>1.1098%</Selectivity>
</Property>
<Property name="Cov">
<Selectivity>99.9994%</Selectivity>
</Property>
<Property name="Referral">
<Selectivity>0.0105%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3})</DataAccess>
<Expression>"HIST"</Expression>
</Subscript>
<Subscript name="5">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3},{L4})</DataAccess>
<Expression>{Cov}</Expression>
</Subscript>
<Subscript name="6">
<AccessType>Piece</AccessType>
<Delimiter>"^"</Delimiter>
<Expression>{Accum}</Expression>
</Subscript>
<Data name="Amt">
<Delimiter>"*"</Delimiter>
<Piece>1</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralDRG">
<Description>
A serial class of DRG information for a referral.</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>63729,47194.678626</TimeChanged>
<TimeCreated>63729,46549</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="SERIALDELIMITER">
<Default>^</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_L_REF_DRG</Default>
</Parameter>

<Property name="AlcDays">
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="Alternate level of Care Days"/>
</Property>

<Property name="BillArea">
<Type>Dict.BillingArea</Type>
<Parameter name="CAPTION" value="Billing Area"/>
</Property>

<Property name="BillAreaReferFrom">
<Description>
This column contains the billing area of the refer from provider.</Description>
<Type>Dict.BillingArea</Type>
<Parameter name="CAPTION" value="Billing Area"/>
</Property>

<Property name="Birthweight">
<Type>%Numeric</Type>
</Property>

<Property name="CovChg">
<Type>DBMS.Currency</Type>
</Property>

<Property name="DischDisp">
<Type>Dict.DischargeDisposition</Type>
<Parameter name="CAPTION" value="Discharge Disposition"/>
</Property>

<Property name="Drg">
<Type>%String</Type>
<Parameter name="CAPTION" value="DRG"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DrgPay">
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="DRG Payment"/>
</Property>

<Property name="DrgTable">
<Type>Dict.DrgSchedule</Type>
<Parameter name="CAPTION" value="DRG Table"/>
</Property>

<Property name="NysDrgPool">
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="NYS DRG Pool"/>
</Property>

<Property name="NysPerdiemPool">
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="NYS Perdiem Pool"/>
</Property>

<Property name="PerDiemPay">
<Type>DBMS.Currency</Type>
<Parameter name="CAPTION" value="Per Diem Payment"/>
</Property>

<Property name="DrgType">
<Type>DBMS.MenuDataType</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/INLIER/TRANSFER/SHORT STAY/LONG STAY/"/>
<Parameter name="VALUELIST" value="/1/2/3/4/"/>
</Property>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>SystemState</State>
<StreamLocation>^Referrals.ReferralDRGS</StreamLocation>
<Data name="SystemState">
<Subscript>"Referrals.ReferralDRG"</Subscript>
<Value name="1">
<Value>PerDiemPay</Value>
</Value>
<Value name="2">
<Value>Drg</Value>
</Value>
<Value name="3">
<Value>DischDisp</Value>
</Value>
<Value name="4">
<Value>DrgType</Value>
</Value>
<Value name="5">
<Value>DrgPay</Value>
</Value>
<Value name="7">
<Value>DrgTable</Value>
</Value>
<Value name="8">
<Value>NysDrgPool</Value>
</Value>
<Value name="10">
<Value>BillArea</Value>
</Value>
<Value name="11">
<Value>AlcDays</Value>
</Value>
<Value name="12">
<Value>CovChg</Value>
</Value>
<Value name="13">
<Value>Birthweight</Value>
</Value>
<Value name="14">
<Value>NysPerdiemPool</Value>
</Value>
<Value name="15">
<Value>BillAreaReferFrom</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Referrals.ReferralDischargeDx">
<Description>
This base table represents the discharge diagnosis entries of the referral 
file. The data is collected from a repeating field that is a
pointer to Dict. 36.  This data is used to calculate DRG reimbursement
information.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63729,47513.774492</TimeChanged>
<TimeCreated>63729,46520</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_DIS_DX</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralDischargeDx</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>DischargeDxs</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Dx">
<Description>
This column holds the discharge diagnosis.</Description>
<Type>Dict.Icd9CmDiagnosis</Type>
</Property>

<ForeignKey name="Dx">
<Properties>Dx</Properties>
<ReferencedClass>Dict.Icd9CmDiagnosis</ReferencedClass>
</ForeignKey>

<Property name="Repet">
<Description>
This column is used to loop thru the repetitions.</Description>
<Type>%String</Type>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Repet</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralDischargeDx"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="List">
<Description>
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer,Field:%String="Name"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 S Referral=Hmo_"||"_Id_"||"_Rin
 &SQL(SELECT LIST(Dx) INTO :Return
      FROM   Referrals.ReferralDischargeDx
      WHERE  Referral=:Referral)                    
 I ($G(Return)="")||(Field="Id") Q Return
 Q ##class(Dict.Icd9CmDiagnosis).GetValueByIds(Return,Field)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>AI:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET</PublicList>
<Implementation><![CDATA[ D ..DxSetObjectId($G(AI(2000))) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[AI:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 S AI(2000)=""
 I ..Dx S AI(2000)=..Dx.SummaryValidate("Dx",.Error) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.ReferralDischargeDx</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralDischargeDxS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^[$P(HMOTBL({L1}),"^",1)]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
<NextCode/>
<StartValue>100</StartValue>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^[$P(HMOTBL({L1}),"^",1)]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^[$P(HMOTBL({L1}),"^",1)]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>Piece</AccessType>
<DataAccess>^[$P(HMOTBL({L1}),"^",1)]HMOREF({L1},{L2},{L3}+20)</DataAccess>
<Delimiter>"^"</Delimiter>
<Expression>{Repet}</Expression>
</Subscript>
<Data name="Dx">
<Delimiter/>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralDischargePx">
<Description>
This base table represents the discharge procedure and discharge procedure date
entries in the referral file. The data is collected from a repeating
group pointing to Dict. 1. This information is used to calculate DRG
reimbursement information.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67335,37984.918516</TimeChanged>
<TimeCreated>63729,46520</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_DIS_PX</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralDischargePx</Default>
</Parameter>

<Property name="Hmo">
<Type>Dict.HmoProfile</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="Hmo">
<Properties>Hmo</Properties>
<ReferencedClass>Dict.HmoProfile</ReferencedClass>
</ForeignKey>

<Property name="Id">
<Type>Registration.Patient</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<ForeignKey name="Id">
<Properties>Id</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Px">
<Description>
This column contains the discharge procedure.</Description>
<Type>Dict.ProcedureCode</Type>
</Property>

<ForeignKey name="Px">
<Properties>Px</Properties>
<ReferencedClass>Dict.ProcedureCode</ReferencedClass>
</ForeignKey>

<Property name="PxDt">
<Description>
This column contains the discharge procedure date.</Description>
<Type>%Date</Type>
</Property>

<Property name="Repet">
<Description>
This column is used to loop thru the repetitions.</Description>
<Type>%String</Type>
<SqlColumnNumber>5</SqlColumnNumber>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Rin">
<Type>%Numeric</Type>
<Required>1</Required>
<SqlColumnNumber>4</SqlColumnNumber>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Hmo,Id,Rin,Repet</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralDischargePx"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>AI:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET,UDDREPET,UDDREPET</PublicList>
<Implementation><![CDATA[
 D ..HmoSetObjectId($G(HMO))
 D ..IdSetObjectId($G(ID))
 D ..PxSetObjectId($G(AI(1300+UDDREPET)))
 S ..PxDt=$G(AI(1900+UDDREPET))
 S ..Rin=$G(MCARIN)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[AI:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>HMO,ID,MCARIN,UDDREPET</PublicList>
<Implementation><![CDATA[
 S HMO=""
 I ..Hmo S HMO=..Hmo.SummaryValidate("Hmo",.Error)
 S ID=""
 I ..Id,##class(%Dictionary.CompiledMethod).%OpenId("Registration.Patient||SummaryValidate") S ID=..Id.SummaryValidate("Id",.Error)
 E   I ..Id S ID=..Id.%Id()
 S MCARIN=..Rin
 S AI(1300+UDDREPET)=""
 I ..Px S AI(1300+UDDREPET)=..Px.SummaryValidate("Px",.Error)
 S AI(1900+UDDREPET)=..PxDt
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.ReferralDischargePx</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralDischargePxS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Id}</Expression>
<StartValue>100</StartValue>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>Piece</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3}+13)</DataAccess>
<Delimiter>"^"</Delimiter>
<Expression>{Repet}</Expression>
</Subscript>
<Data name="Px"/>
<Data name="PxDt">
<Node>+19</Node>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralDischargePxIcd9">
<Description>
This base table represents the discharge procedures entry in the referral and
claims file. The data is collected from Dict. 144. This table is a CHP custom
table. </Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,71350.817995</TimeChanged>
<TimeCreated>63729,46520</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_DIS_PX_ICD9</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralDischargePxIcd9</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>DischargePxIcd9s</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="PxCode">
<Description>
a code for the referral.</Description>
<Type>Dict.Icd9CmProcedure</Type>
</Property>

<ForeignKey name="PxCode">
<Properties>PxCode</Properties>
<ReferencedClass>Dict.Icd9CmProcedure</ReferencedClass>
</ForeignKey>

<Property name="Repet">
<Description>
a column to examine each PxCode for a referral.</Description>
<Type>%Integer</Type>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Repet</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralDischargePxIcd9"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="List">
<Description>
Get a comma delimited list of PX data.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer,Field:%String="Name"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 &SQL(SELECT LIST(PxCode) INTO :Return
      FROM   Referrals.ReferralDischargePxIcd9
      WHERE  Referral->Hmo = :Hmo AND
             Referral->Id  = :Id  AND
             Referral->Rin = :Rin)
 I ($G(Return)="")&&(Field="Id") Q Return
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>AI:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET</PublicList>
<Implementation><![CDATA[
 D ..PxCodeSetObjectId($G(AI(2800)))
 S ..Repet=$G(OCC)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[AI:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>OCC</PublicList>
<Implementation><![CDATA[
 S OCC=..Repet
 S AI(2800)=""
 I ..PxCode S AI(2800)=..PxCode.SummaryValidate("PxCode",.Error)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.ReferralDischargePxIcd9</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralDis4E2ES</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
<StartValue>100</StartValue>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>Piece</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3}+28)</DataAccess>
<Delimiter>"^"</Delimiter>
<Expression>{Repet}</Expression>
</Subscript>
<Data name="PxCode"/>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralDuplicate">
<Description>
This table contains a list of possible duplicate referrals.  Duplicates are 
added to this table using the Duplicate Referral Compile.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>67310,46474.149223</TimeChanged>
<TimeCreated>63729,46520</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_DUP</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralDuplicate</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>Duplicates</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Comp">
<Description>
a reference to the company based on the enrollment location</Description>
<Type>Dict.HmoCompany</Type>
<Parameter name="CAPTION" value="Company"/>
</Property>

<ForeignKey name="Comp">
<Properties>Comp</Properties>
<ReferencedClass>Dict.HmoCompany</ReferencedClass>
</ForeignKey>

<Property name="DupCin">
<Description>
a pointer to the contract internal number that was a duplicate</Description>
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Duplicate Cin"/>
</Property>

<Property name="DupRin">
<Description>
This column contains the internal referral number that is considered a 
duplicate inside of this member's referrals.</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="DUP Rin"/>
</Property>

<Property name="LastEditBy">
<Description>
This column contains a reference to the USERNAME that last edited the referral.</Description>
<Type>SecurityPlus.Usr</Type>
<Parameter name="CAPTION" value="Last Edit By"/>
</Property>

<ForeignKey name="LastEditBy">
<Properties>LastEditBy</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Loc">
<Description>
This column contains a reference to the enrollment location of the duplicate 
referral.</Description>
<Type>Dict.Location</Type>
<Parameter name="CAPTION" value="Location"/>
</Property>

<ForeignKey name="Loc">
<Properties>Loc</Properties>
<ReferencedClass>Dict.Location</ReferencedClass>
</ForeignKey>

<Property name="Plan">
<Description>
This column contains the plan from the duplicate referral.</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PlanDescr">
<Description>
This column contains the plan description from the duplicate referral.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Plan Description"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PlanType">
<Description><![CDATA[
This column contains a reference to the Plan Type dictionary for the duplicate 
referral.
<P>]]></Description>
<Type>Dict.HmoPlanRiderType</Type>
<Parameter name="CAPTION" value="Plan Type"/>
</Property>

<ForeignKey name="PlanType">
<Properties>PlanType</Properties>
<ReferencedClass>Dict.HmoPlanRiderType</ReferencedClass>
</ForeignKey>

<Property name="PlanTypeB">
<Description>
This column contains a reference to the Plan Type dictionary for the duplicate 
referral.</Description>
<Type>Dict.HmoPlanRiderType</Type>
<Parameter name="CAPTION" value="Plan Type B"/>
</Property>

<ForeignKey name="PlanTypeB">
<Properties>PlanTypeB</Properties>
<ReferencedClass>Dict.HmoPlanRiderType</ReferencedClass>
</ForeignKey>

<Property name="RefTargetDn">
<Description>
This column contains a reference to the referral target dictionary.</Description>
<Type>Dict.Dictionary</Type>
<Parameter name="CAPTION" value="Referral Target Dn"/>
</Property>

<ForeignKey name="RefTargetDn">
<Properties>RefTargetDn</Properties>
<ReferencedClass>Dict.Dictionary</ReferencedClass>
</ForeignKey>

<Property name="RefTargetId">
<Description>
This column contains the internal ID of the referral target.  Using the Referral 
Target DN you can join this data to the correct dictionary.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Referral Target ID"/>
</Property>

<Property name="RefType">
<Description>
This column contains a referrence to the Referral Type dictionary.</Description>
<Type>Dict.HmoReferralType</Type>
<Parameter name="CAPTION" value="Referral Type"/>
</Property>

<ForeignKey name="RefType">
<Properties>RefType</Properties>
<ReferencedClass>Dict.HmoReferralType</ReferencedClass>
</ForeignKey>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>DupRin</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralDuplicate"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="ByHmo">
<Description>
Provided an Hmo Id get the duplicate referral information.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT  T1.%Id,T1.Referral->Hmo,T1.Referral->Id,T1.Referral->Rin,
        T1.Referral->Id->PatNm As Member,
        T4.Num As MemberNumber,
        T1.Referral->RefNum, T1.Referral->Status->Mnemonic As Status,
        T1.Referral->RefType->Mnemonic As ReferralType,
        T1.Referral->RefTarget As ReferralTarget,
        T1.Referral->Descr As Description,
        T1.Referral->ValidFromDt,T1.Referral->ValidToDt,
        T1.Referral->TotEstLiab,T1.Referral->EstPendLiab,
        T1.Referral->TreatmentsAuthorized 
FROM                
        Referrals.ReferralDuplicate T1
        LEFT JOIN Referrals.Referral T2 ON (T1.Referral=T2.%Id)
        LEFT JOIN MCA_Enrollment.Contract T3 
              ON (T3.Hmo = T2.Hmo AND T3.Cin = T2.Cin)
        LEFT JOIN MCA_Enrollment.ContractMember T4 
              ON (T4.Contract = T3.%Id AND T4.Id=T2.Id)
WHERE   (T1.Referral->Hmo = :Hmo AND 
          DBMS.Tools_HmoPassSecurity(T1.Referral->Hmo,USER)=1)

ORDER BY T1.Referral->Id]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Id:%String,Hmo:%Integer,Id:%Integer,Rin:%Integer,Member:%String,MemberNumber:%String,RefNum:%Integer,Status:%String,ReferralType:%String,ReferralTarget:%String,Description:%String,ValidFromDt:%Date,ValidToDt:%Date,TotEstLiab:%String,EstPendLiab:%String,TreatmentsAuthorized:%Numeric"/>
</Query>

<Query name="SiblingByHmoIdRin">
<Description>
Provided a Hmo,Id,Rin get the detail about the siblings</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT          
        RefNum, Status->Mnemonic As Status,
        RefType->Mnemonic As ReferralType,
        RefTarget As ReferralTarget,
        Descr As Description,
        ValidFromDt,ValidToDt,
        TotEstLiab,EstPendLiab,TreatmentsAuthorized

FROM    Referrals.Referral
WHERE   Hmo=:Hmo AND  Id=:Id AND Rin=:Rin]]></SqlQuery>
<Parameter name="ROWSPEC" value="RefNum:%Integer,Status:%String,ReferralType:%String,ReferralTarget:%String,Description:%String,ValidFromDt:%Date,ValidToDt:%Date,TotEstLiab:%String,EstPendLiab:%String,TreatmentsAuthorized:%Numeric"/>
</Query>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM Referrals.ReferralDuplicate)
 Q $$$OK
]]></Implementation>
</Method>

<Method name="DeleteOneHmo">
<Description>
Provided an internal Hmo delete the data.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 K ^[$P(HMOTBL(Hmo),"^",1)]HMORFDUP(Hmo)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralDuplicateS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^["MHRHMO"]HMORFDUP</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORFDUP({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORFDUP({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORFDUP({L1},{L2},{L3})</DataAccess>
<Expression>{DupRin}</Expression>
</Subscript>
<Data name="Comp">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="DupCin">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="LastEditBy">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="Loc">
<Delimiter>"^"</Delimiter>
<Piece>9</Piece>
</Data>
<Data name="Plan">
<Delimiter>"^","*"</Delimiter>
<Piece>6,1</Piece>
</Data>
<Data name="PlanDescr">
<Delimiter>"^","*"</Delimiter>
<Piece>6,2</Piece>
</Data>
<Data name="PlanType">
<Delimiter>"^"</Delimiter>
<Piece>7</Piece>
</Data>
<Data name="PlanTypeB">
<Delimiter>"^"</Delimiter>
<Piece>8</Piece>
</Data>
<Data name="RefTargetDn">
<Delimiter>"^","*"</Delimiter>
<Piece>1,1</Piece>
</Data>
<Data name="RefTargetId">
<Delimiter>"^","*"</Delimiter>
<Piece>1,2</Piece>
</Data>
<Data name="RefType">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralDx">
<Description>
A collection of Diagnosis for a referral.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>67330,71788.74711</TimeChanged>
<TimeCreated>63729,46520</TimeCreated>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_DX</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralDx</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>Dxs</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Dx">
<Description>
a reference to a diagnosis</Description>
<Type>Dict.Icd9CmDiagnosis</Type>
</Property>

<ForeignKey name="Dx">
<Properties>Dx</Properties>
<ReferencedClass>Dict.Icd9CmDiagnosis</ReferencedClass>
</ForeignKey>

<Property name="FromDt">
<Description>
The from Dt.                  </Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="From DT"/>
</Property>

<Property name="Repet">
<Description>
This column is used to loop thru each diagnosis.</Description>
<Type>%String</Type>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ToDt">
<Description>
The To Dt.                  </Description>
<Type>%Date</Type>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Repet</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralDx"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>AI:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET,UDDREPET</PublicList>
<Implementation><![CDATA[
 D ..DxSetObjectId($P($P($G(AI(4301)),"|",UDDREPET),"*",1))
 S ..FromDt=$P($P($G(AI(4301)),"|",UDDREPET),"*",2)
 S ..Repet=$G(UDDREPET)
 S ..ToDt=$P($P($G(AI(4301)),"|",UDDREPET),"*",3)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[AI:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET</PublicList>
<Implementation><![CDATA[
 S UDDREPET=..Repet
 S FINT=""
 I ..Dx S FINT=..Dx.Id
 S %1=$P($G(AI(4301)),"|",UDDREPET),$P(%1,"*",1)=FINT,$P(AI(4301),"|",UDDREPET)=%1
 S FINT=""
 S FINT=..FromDt
 S %1=$P($G(AI(4301)),"|",UDDREPET),$P(%1,"*",2)=FINT,$P(AI(4301),"|",UDDREPET)=%1
 S FINT=""
 S FINT=..ToDt
 S %1=$P($G(AI(4301)),"|",UDDREPET),$P(%1,"*",3)=FINT,$P(AI(4301),"|",UDDREPET)=%1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I  Q -1
 Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.ReferralDx</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralDxS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^[$P(HMOTBL({L1}),"^",1)]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>Piece</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3}+43)</DataAccess>
<Delimiter>"^"</Delimiter>
<Expression>1</Expression>
</Subscript>
<Subscript name="5">
<AccessType>Piece</AccessType>
<DataAccess>$P($G(^["MHRHMO"]HMOREF({L1},{L2},{L3}+43)),"^",{L4})</DataAccess>
<Delimiter>"|"</Delimiter>
<Expression>{Repet}</Expression>
</Subscript>
<Data name="Dx">
<Delimiter>"*"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="FromDt">
<Delimiter>"*"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="ToDt">
<Delimiter>"*"</Delimiter>
<Piece>3</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralEDI">
<Description>
This contains header level information for referrals such as the referral
ordered date, ordering physician, referral type etc., and the entity the
referral was made to.</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>63774,75990.151085</TimeChanged>
<TimeCreated>63729,46549</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="SERIALDELIMITER">
<Default>^,,</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_L_REF_EDI</Default>
</Parameter>

<Property name="Edi278inPayrDepctr">
<Description>
278 inbound payor Dependent level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Depctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrPrvctr">
<Description>
278 inbound payor Provider level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Prvctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrReqctr">
<Description>
278 inbound payor Requester level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Reqctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrRun">
<Description>
278 inbound payor Run number.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Run"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrSlnctr">
<Description>
278 inbound payor Service Line level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Slnctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrSubctr">
<Description>
278 inbound payor Subscriber level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Subctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrTxstctr">
<Description>
278 inbound payor Transaction Set level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Txstctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edi278inPayrUmoctr">
<Description>
278 inbound payor UMO level counter.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi 278IN Payr Umoctr"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="EdiAction">
<Type>Dict.Edi278FollowupActionCodes</Type>
<Parameter name="CAPTION" value="EDI Action"/>
</Property>

<Property name="AttachmentTransCode">
<Description>
EDI Attachment Transmission Code.</Description>
<Type>Dict.EdiAttachmentTransmissionCodes</Type>
<Parameter name="CAPTION" value="Edi Attachment Trans Code"/>
</Property>

<Property name="AttachmentType">
<Description>
EDI Attachment Type.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi Attachment Type"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="AuthRejReason">
<Description>
This column contains the EDI Authorization Reject Reason.</Description>
<Type>Dict.Edi278RejectReasonCodes</Type>
<Parameter name="CAPTION" value="Edi Auth Rej Reason"/>
</Property>

<Property name="CertType">
<Description>
 </Description>
<Type>Dict.Edi278CertificationType</Type>
<Parameter name="CAPTION" value="EDI Certifcation Type"/>
</Property>

<Property name="EditRejReason">
<Description>
This column contains the EDI Edit Reject Reason.</Description>
<Type>Dict.Edi278RejectionReasonCodes</Type>
<Parameter name="CAPTION" value="Edi Edit Rej Reason"/>
</Property>

<Property name="HsdDeliveryPattern">
<Description>
EDI X12 HSD segment, Field 7.</Description>
<Type>Dict.EdiHealthCareServPatternOfDelivery</Type>
<Parameter name="CAPTION" value="Edi Hsd Delivery Pattern"/>
</Property>

<Property name="HsdPdCnt">
<Description>
EDI X12 HSD segment, Field 6.</Description>
<Type>DBMS.AccountingPeriod</Type>
<Parameter name="CAPTION" value="Edi Hsd Period Count"/>
</Property>

<Property name="HsdPdQual">
<Description>
EDI X12 HSD segment, Field 5.</Description>
<Type>DBMS.AccountingPeriod</Type>
<Parameter name="CAPTION" value="Edi Hsd Period Qualifier"/>
<Parameter name="VALUELIST" value="/Hour/Day/Years/Episode/Visit/Month/Week/"/>
</Property>

<Property name="HsdQuant">
<Description>
EDI X12 HSD segment, Field 2.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Edi Hsd Quantity"/>
</Property>

<Property name="HsdQuantQual">
<Description>
EDI X12 HSD segment, Field 1.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi Hsd Quantity Qualifier"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Days/Units/Hours/Month/Visits/"/>
</Property>

<Property name="HsdUnits">
<Description>
EDI X12 HSD segment, Field 3.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi Hsd Units"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Days/Months/Week/"/>
</Property>

<Property name="IncomingStat">
<Description>
 </Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="EDI Incoming Status"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="LevOfServ">
<Description>
 </Description>
<Type>Dict.Edi278LevelOfService</Type>
<Parameter name="CAPTION" value="EDI Level Of Service"/>
</Property>

<Property name="ProvType">
<Description>
EDI X12 Provider Type.</Description>
<Type>Dict.Edi278ProvType</Type>
<Parameter name="CAPTION" value="Edi Provider Type"/>
</Property>

<Property name="RefPrvTaxonomyCode">
<Description>
This field contains the EDI Taxonomy Code for the referring provider (Requestor)
.  This element was designed for use with referrals which are filed via EDI,
but can also be used for manual referral entry. The same column can be used in
FDL to send in outbound EDI Response files.</Description>
<Type>Dict.EdiProviderTaxonomyCodes</Type>
<Parameter name="CAPTION" value="Edi Ref Prv Taxonomy Code"/>
</Property>

<Property name="RejReason">
<Description>
This column contains the EDI Authorization Reject Reason.</Description>
<Type>Dict.Edi278RejectReasonCodes</Type>
<Parameter name="CAPTION" value="EDI Reject Reason"/>
</Property>

<Property name="Request">
<Description>
 </Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Edi Request"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="ReqCat">
<Description>
 </Description>
<Type>Dict.Edi278RequestCategoryCodes</Type>
<Parameter name="CAPTION" value="Edi Request Category"/>
</Property>

<Property name="ServType">
<Description>
 </Description>
<Type>Dict.Edi278ServiceTypeCode</Type>
<Parameter name="CAPTION" value="EDI Service Type"/>
</Property>

<Property name="SvcPrvTaxonomyCode">
<Description>
This field contains the EDI Taxonomy Code for the refer to (Service) provider.
This element was designed for use with referrals which are filed via EDI, but
can also be used for manual referral entry. The same column can be used in FDL
to send in outbound EDI Response files.</Description>
<Type>Dict.EdiProviderTaxonomyCodes</Type>
<Parameter name="CAPTION" value="Edi Svc Prv Taxonomy Code"/>
</Property>

<Property name="TradingPartner">
<Description>
EDI Trading Partner used for most recent EDI referral processing.</Description>
<Type>Dict.EdiTradingPartner</Type>
<Parameter name="CAPTION" value="Edi Trading Partner"/>
</Property>

<Property name="X12Status">
<Description>
 </Description>
<Type>Dict.Edi278HealthCareServiceReviewActionCodeResponses</Type>
<Parameter name="CAPTION" value="EDI X12 Status"/>
</Property>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1 
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 Q Id
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>SystemState</State>
<StreamLocation>^Referrals.ReferralEDIS</StreamLocation>
<Data name="SystemState">
<Subscript>"Referrals.ReferralEDI"</Subscript>
<Value name="1">
<Value>CertType</Value>
</Value>
<Value name="2">
<Value>ReqCat</Value>
</Value>
<Value name="3">
<Value>Request</Value>
</Value>
<Value name="4">
<Value>ServType</Value>
</Value>
<Value name="5">
<Value>LevOfServ</Value>
</Value>
<Value name="6">
<Value>RejReason</Value>
</Value>
<Value name="7">
<Value>X12Status</Value>
</Value>
<Value name="8">
<Value>EdiAction</Value>
</Value>
<Value name="9">
<Value>IncomingStat</Value>
</Value>
<Value name="10">
<Value>EditRejReason</Value>
</Value>
<Value name="12">
<Value>RefPrvTaxonomyCode</Value>
</Value>
<Value name="13">
<Value>SvcPrvTaxonomyCode</Value>
</Value>
<Value name="14">
<Value>TradingPartner</Value>
</Value>
<Value name="15">
<Value>ProvType</Value>
</Value>
<Value name="17">
<Value>AttachmentType</Value>
</Value>
<Value name="18">
<Value>AttachmentTransCode</Value>
</Value>
<Value name="11,1">
<Value>Edi278inPayrRun</Value>
</Value>
<Value name="11,2">
<Value>Edi278inPayrTxstctr</Value>
</Value>
<Value name="11,3">
<Value>Edi278inPayrUmoctr</Value>
</Value>
<Value name="11,4">
<Value>Edi278inPayrReqctr</Value>
</Value>
<Value name="11,5">
<Value>Edi278inPayrSubctr</Value>
</Value>
<Value name="11,6">
<Value>Edi278inPayrDepctr</Value>
</Value>
<Value name="11,7">
<Value>Edi278inPayrPrvctr</Value>
</Value>
<Value name="11,8">
<Value>Edi278inPayrSlnctr</Value>
</Value>
<Value name="16,1">
<Value>HsdQuantQual</Value>
</Value>
<Value name="16,2">
<Value>HsdQuant</Value>
</Value>
<Value name="16,3">
<Value>HsdUnits</Value>
</Value>
<Value name="16,5">
<Value>HsdPdQual</Value>
</Value>
<Value name="16,6">
<Value>HsdPdCnt</Value>
</Value>
<Value name="16,7">
<Value>HsdDeliveryPattern</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Referrals.ReferralEdiTxn">
<Description>
This tables contains detail about the EDI transactions for a referral.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,71973.697905</TimeChanged>
<TimeCreated>63729,46520</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_EDI</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralEdiTxn</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>EdiTxns</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="EDIAction">
<Description><![CDATA[
This column contains the action that was done for a single EDI transaction.
<P>]]></Description>
<Type>Dict.Edi278FollowupActionCodes</Type>
<Parameter name="CAPTION" value="Action"/>
</Property>

<ForeignKey name="EDIAction">
<Properties>EDIAction</Properties>
<ReferencedClass>Dict.Edi278FollowupActionCodes</ReferencedClass>
</ForeignKey>

<Property name="CertType">
<Type>Dict.Edi278CertificationType</Type>
<Parameter name="CAPTION" value="Cert Type"/>
</Property>

<ForeignKey name="CertType">
<Properties>CertType</Properties>
<ReferencedClass>Dict.Edi278CertificationType</ReferencedClass>
</ForeignKey>

<Property name="Dt">
<Type>%Date</Type>
<Parameter name="CAPTION" value="Date"/>
</Property>

<Property name="EdiBatch">
<Type>%Numeric</Type>
<Parameter name="CAPTION" value="EDI Batch"/>
</Property>

<Property name="EdiEditReason">
<Description>
This is the X12 rejection reason code corresponding to EDI edit conditions.</Description>
<Type>Dict.Edi278RejectionReasonCodes</Type>
<Parameter name="CAPTION" value="Edi Edit Reason"/>
</Property>

<ForeignKey name="EdiEditReason">
<Properties>EdiEditReason</Properties>
<ReferencedClass>Dict.Edi278RejectionReasonCodes</ReferencedClass>
</ForeignKey>

<Property name="IncomingStat">
<Type>%String</Type>
<Parameter name="CAPTION" value="Incoming Status"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="InOut">
<Description>
This column describes the incoming/outgoing state of the EDI transaction. 
This column will contain a value of 1 if this is Incoming or a value of 2 if
this transaction is Outgoing.</Description>
<Type>DBMS.MenuDataType</Type>
<Parameter name="CAPTION" value="Incoming Outgoing"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Incoming/Outgoing/"/>
<Parameter name="VALUELIST" value="/1/2/"/>
</Property>

<Property name="LevOfServ">
<Type>Dict.Edi278LevelOfService</Type>
<Parameter name="CAPTION" value="Level Of Service"/>
</Property>

<ForeignKey name="LevOfServ">
<Properties>LevOfServ</Properties>
<ReferencedClass>Dict.Edi278LevelOfService</ReferencedClass>
</ForeignKey>

<Property name="RefStatusReq">
<Description>
Referral status on the request.</Description>
<Type>Dict.HmoReferralStatusFlag</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Status"/>
</Property>

<ForeignKey name="RefStatusReq">
<Properties>RefStatusReq</Properties>
<ReferencedClass>Dict.HmoReferralStatusFlag</ReferencedClass>
</ForeignKey>

<Property name="RefStatusResp">
<Description>
Referral status on the response.</Description>
<Type>Dict.HmoReferralStatusFlag</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Status"/>
</Property>

<ForeignKey name="RefStatusResp">
<Properties>RefStatusResp</Properties>
<ReferencedClass>Dict.HmoReferralStatusFlag</ReferencedClass>
</ForeignKey>

<Property name="RejReason">
<Type>Dict.Edi278RejectReasonCodes</Type>
<Parameter name="CAPTION" value="Reject Reason"/>
</Property>

<ForeignKey name="RejReason">
<Properties>RejReason</Properties>
<ReferencedClass>Dict.Edi278RejectReasonCodes</ReferencedClass>
</ForeignKey>

<Property name="ReqCat">
<Type>Dict.Edi278RequestCategoryCodes</Type>
<Parameter name="CAPTION" value="Request Category"/>
</Property>

<ForeignKey name="ReqCat">
<Properties>ReqCat</Properties>
<ReferencedClass>Dict.Edi278RequestCategoryCodes</ReferencedClass>
</ForeignKey>

<Property name="SecondSurgOpinion">
<Description>
Second Surgical Opinion indicator.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Second Surg Opinion"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/Y/N/"/>
</Property>

<Property name="ServType">
<Type>Dict.Edi278ServiceTypeCode</Type>
<Parameter name="CAPTION" value="Service Type"/>
</Property>

<ForeignKey name="ServType">
<Properties>ServType</Properties>
<ReferencedClass>Dict.Edi278ServiceTypeCode</ReferencedClass>
</ForeignKey>

<Property name="Tm">
<Type>%Time</Type>
<Parameter name="CAPTION" value="Time"/>
<Parameter name="FORMAT" value="4"/>
</Property>

<Property name="TradingPartner">
<Type>Dict.EdiTradingPartner</Type>
<Parameter name="CAPTION" value="Trading Partner"/>
</Property>

<ForeignKey name="TradingPartner">
<Properties>TradingPartner</Properties>
<ReferencedClass>Dict.EdiTradingPartner</ReferencedClass>
</ForeignKey>

<Property name="TreatmentsAuth">
<Description>
Number of treatments authorized for this transaction.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Treatments Authorized"/>
</Property>

<Property name="TreatmentsRequested">
<Description>
Number of treatments requested for this transaction.</Description>
<Type>%Integer</Type>
<Parameter name="CAPTION" value="Treatments Requested"/>
</Property>

<Property name="Tx">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="TxType">
<Description>
This column contains information about the transaction type.  This will contain
a value of 1 if this transaction is a Request or a value of 2 if this
transaction is a Response.</Description>
<Type>DBMS.MenuDataType</Type>
<Parameter name="CAPTION" value="Tx Type"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Request/Response/"/>
<Parameter name="VALUELIST" value="/1/2/"/>
</Property>

<Property name="ValidFromDtReq">
<Description>
Valid From Date for the request.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Valid From DT REQ"/>
</Property>

<Property name="ValidFromDtResp">
<Description>
Valid From Date for the response.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Valid From DT Resp"/>
</Property>

<Property name="ValidToDtReq">
<Description>
Valid To Date for the request.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Valid To DT REQ"/>
</Property>

<Property name="ValidToDtResp">
<Description>
Valid To Date for the response.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Valid To DT Resp"/>
</Property>

<Property name="X12Stat">
<Type>Dict.Edi278HealthCareServiceReviewActionCodeResponses</Type>
<Parameter name="CAPTION" value="X12 Status"/>
</Property>

<ForeignKey name="X12Stat">
<Properties>X12Stat</Properties>
<ReferencedClass>Dict.Edi278HealthCareServiceReviewActionCodeResponses</ReferencedClass>
</ForeignKey>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Tx</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralEdiTxn"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="ByHmoIdRin">
<Description>
Provided an internal Hmo, Id, and Rin get the EDI history.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT   T2.%Id As Rowid, T2.Tx, T2.Dt, T2.Tm, 
         %EXTERNAL(T2.TxType) As TxType,
         %EXTERNAL(T2.InOut) As InOut,
         T2.CertType->Reason As CertType,
         T2.ReqCat->Reason As RequestCategory,    
         T2.EdiBatch, T2.X12Stat->Reason As X12Status


FROM     Referrals.Referral T1
          JOIN Referrals.ReferralEdiTxn T2 ON (T2.Referral=T1.%Id)

WHERE    T1.Hmo=:Hmo AND T1.Id=:Id AND T1.Rin=:Rin]]></SqlQuery>
<Parameter name="ROWSPEC" value="Rowid:%String,Tx:%Integer,Dt:%Date,Tm:%Time,TxType:%String,InOut:%String,CertType:%String,RequestCategory:%String,EdiBatch:%Numeric,X12Status:%String"/>
</Query>

<Method name="%KillExtent">
<Description>
</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 &SQL(DELETE %NOTRIGGER FROM Referrals.ReferralEdiTxn)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>HMOREF:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 D ..CertTypeSetObjectId($P($G(HMOREF("EDI",0)),"^",7))
 S ..Dt=$P($P($G(HMOREF("EDI",0)),"^",1),",",1)
 D ..EDIActionSetObjectId($P($G(HMOREF("EDI",0)),"^",11))
 S ..EdiBatch=$P($G(HMOREF("EDI",0)),"^",12)
 D ..EdiEditReasonSetObjectId($P($G(HMOREF("EDI",0)),"^",22))
 S ..InOut=$P($G(HMOREF("EDI",0)),"^",6)
 S ..IncomingStat=$P($G(HMOREF("EDI",0)),"^",3)
 D ..LevOfServSetObjectId($P($G(HMOREF("EDI",0)),"^",13))
 D ..RefStatusReqSetObjectId($P($G(HMOREF("EDI",0)),"^",18))
 D ..RefStatusRespSetObjectId($P($G(HMOREF("EDI",0)),"^",19))
 D ..RejReasonSetObjectId($P($G(HMOREF("EDI",0)),"^",9))
 D ..ReqCatSetObjectId($P($G(HMOREF("EDI",0)),"^",4))
 S ..SecondSurgOpinion=$P($G(HMOREF("EDI",0)),"^",23)
 D ..ServTypeSetObjectId($P($G(HMOREF("EDI",0)),"^",8))
 S ..Tm=$P($P($G(HMOREF("EDI",0)),"^",1),",",2)
 D ..TradingPartnerSetObjectId($P($G(HMOREF("EDI",0)),"^",2))
 S ..TreatmentsAuth=$P($G(HMOREF("EDI",0)),"^",21)
 S ..TreatmentsRequested=$P($G(HMOREF("EDI",0)),"^",20)
 S ..TxType=$P($G(HMOREF("EDI",0)),"^",5)
 S ..ValidFromDtReq=$P($G(HMOREF("EDI",0)),"^",14)
 S ..ValidFromDtResp=$P($G(HMOREF("EDI",0)),"^",16)
 S ..ValidToDtReq=$P($G(HMOREF("EDI",0)),"^",15)
 S ..ValidToDtResp=$P($G(HMOREF("EDI",0)),"^",17)
 D ..X12StatSetObjectId($P($G(HMOREF("EDI",0)),"^",10))
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[HMOREF:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 S $P(HMOREF("EDI",0),"^",7)=""
 I ..CertType S $P(HMOREF("EDI",0),"^",7)=..CertType.SummaryValidate("CertType",.Error)
 S FINT=""
 S FINT=..Dt
 S %1=$P($G(HMOREF("EDI",0)),"^",1),$P(%1,",",1)=FINT,$P(HMOREF("EDI",0),"^",1)=%1
 S $P(HMOREF("EDI",0),"^",11)=""
 I ..EDIAction S $P(HMOREF("EDI",0),"^",11)=..EDIAction.SummaryValidate("EDIAction",.Error)
 S $P(HMOREF("EDI",0),"^",12)=..EdiBatch
 S $P(HMOREF("EDI",0),"^",22)=""
 I ..EdiEditReason S $P(HMOREF("EDI",0),"^",22)=..EdiEditReason.SummaryValidate("EdiEditReason",.Error)
 S $P(HMOREF("EDI",0),"^",6)=..InOut
 S $P(HMOREF("EDI",0),"^",3)=..IncomingStat
 S $P(HMOREF("EDI",0),"^",13)=""
 I ..LevOfServ S $P(HMOREF("EDI",0),"^",13)=..LevOfServ.SummaryValidate("LevOfServ",.Error)
 S $P(HMOREF("EDI",0),"^",18)=""
 I ..RefStatusReq S $P(HMOREF("EDI",0),"^",18)=..RefStatusReq.SummaryValidate("RefStatusReq",.Error)
 S $P(HMOREF("EDI",0),"^",19)=""
 I ..RefStatusResp S $P(HMOREF("EDI",0),"^",19)=..RefStatusResp.SummaryValidate("RefStatusResp",.Error)
 S $P(HMOREF("EDI",0),"^",9)=""
 I ..RejReason S $P(HMOREF("EDI",0),"^",9)=..RejReason.SummaryValidate("RejReason",.Error)
 S $P(HMOREF("EDI",0),"^",4)=""
 I ..ReqCat S $P(HMOREF("EDI",0),"^",4)=..ReqCat.SummaryValidate("ReqCat",.Error)
 S $P(HMOREF("EDI",0),"^",23)=..SecondSurgOpinion
 S $P(HMOREF("EDI",0),"^",8)=""
 I ..ServType S $P(HMOREF("EDI",0),"^",8)=..ServType.SummaryValidate("ServType",.Error)
 S FINT=""
 S FINT=..Tm
 S %1=$P($G(HMOREF("EDI",0)),"^",1),$P(%1,",",2)=FINT,$P(HMOREF("EDI",0),"^",1)=%1
 S $P(HMOREF("EDI",0),"^",2)=""
 I ..TradingPartner S $P(HMOREF("EDI",0),"^",2)=..TradingPartner.SummaryValidate("TradingPartner",.Error)
 S $P(HMOREF("EDI",0),"^",21)=..TreatmentsAuth
 S $P(HMOREF("EDI",0),"^",20)=..TreatmentsRequested
 S $P(HMOREF("EDI",0),"^",5)=..TxType
 S $P(HMOREF("EDI",0),"^",14)=..ValidFromDtReq
 S $P(HMOREF("EDI",0),"^",16)=..ValidFromDtResp
 S $P(HMOREF("EDI",0),"^",15)=..ValidToDtReq
 S $P(HMOREF("EDI",0),"^",17)=..ValidToDtResp
 S $P(HMOREF("EDI",0),"^",10)=""
 I ..X12Stat S $P(HMOREF("EDI",0),"^",10)=..X12Stat.SummaryValidate("X12Stat",.Error)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..InOut["^") Q -1
 I (..IncomingStat["^") Q -1
 I (..SecondSurgOpinion["^") Q -1
 I (..TxType["^") Q -1
 Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.ReferralEdiTxn</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralEdiTxnS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3})</DataAccess>
<Expression>"EDI"</Expression>
</Subscript>
<Subscript name="5">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3},{L4})</DataAccess>
<Expression>{Tx}</Expression>
<StartValue>1</StartValue>
</Subscript>
<Subscript name="6">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3},{L4},{L5})</DataAccess>
<Expression>0</Expression>
</Subscript>
<Data name="CertType">
<Delimiter>"^"</Delimiter>
<Piece>7</Piece>
</Data>
<Data name="Dt">
<Delimiter>"^",","</Delimiter>
<Piece>1,1</Piece>
</Data>
<Data name="EDIAction">
<Delimiter>"^"</Delimiter>
<Piece>11</Piece>
</Data>
<Data name="EdiBatch">
<Delimiter>"^"</Delimiter>
<Piece>12</Piece>
</Data>
<Data name="EdiEditReason">
<Delimiter>"^"</Delimiter>
<Piece>22</Piece>
</Data>
<Data name="InOut">
<Delimiter>"^"</Delimiter>
<Piece>6</Piece>
</Data>
<Data name="IncomingStat">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="LevOfServ">
<Delimiter>"^"</Delimiter>
<Piece>13</Piece>
</Data>
<Data name="RefStatusReq">
<Delimiter>"^"</Delimiter>
<Piece>18</Piece>
</Data>
<Data name="RefStatusResp">
<Delimiter>"^"</Delimiter>
<Piece>19</Piece>
</Data>
<Data name="RejReason">
<Delimiter>"^"</Delimiter>
<Piece>9</Piece>
</Data>
<Data name="ReqCat">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="SecondSurgOpinion">
<Delimiter>"^"</Delimiter>
<Piece>23</Piece>
</Data>
<Data name="ServType">
<Delimiter>"^"</Delimiter>
<Piece>8</Piece>
</Data>
<Data name="Tm">
<Delimiter>"^",","</Delimiter>
<Piece>1,2</Piece>
</Data>
<Data name="TradingPartner">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="TreatmentsAuth">
<Delimiter>"^"</Delimiter>
<Piece>21</Piece>
</Data>
<Data name="TreatmentsRequested">
<Delimiter>"^"</Delimiter>
<Piece>20</Piece>
</Data>
<Data name="TxType">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="ValidFromDtReq">
<Delimiter>"^"</Delimiter>
<Piece>14</Piece>
</Data>
<Data name="ValidFromDtResp">
<Delimiter>"^"</Delimiter>
<Piece>16</Piece>
</Data>
<Data name="ValidToDtReq">
<Delimiter>"^"</Delimiter>
<Piece>15</Piece>
</Data>
<Data name="ValidToDtResp">
<Delimiter>"^"</Delimiter>
<Piece>17</Piece>
</Data>
<Data name="X12Stat">
<Delimiter>"^"</Delimiter>
<Piece>10</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralInpatientDt">
<Description>
This tables contains data for RW and SG the represents edited inpatient days
for inpatient referrals.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,72155.207155</TimeChanged>
<TimeCreated>63729,46521</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_INP_DATES</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralInpatientDt</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>InpatientDts</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="DayType">
<Description>
The type of inpatient day</Description>
<Type>Dict.HmoInpatientDayType</Type>
</Property>

<ForeignKey name="DayType">
<Properties>DayType</Properties>
<ReferencedClass>Dict.HmoInpatientDayType</ReferencedClass>
</ForeignKey>

<Property name="Txn">
<Description>
A unique transaction number</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="Date Num"/>
</Property>

<Property name="EditReason">
<Type>Dict.HmoInpatientEditReason</Type>
</Property>

<ForeignKey name="EditReason">
<Properties>EditReason</Properties>
<ReferencedClass>Dict.HmoInpatientEditReason</ReferencedClass>
</ForeignKey>

<Property name="Dt">
<Description><![CDATA[
The inpatient date
<P>]]></Description>
<Type>%Date</Type>
<Required>1</Required>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Txn</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralInpatientDt"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>INPDATES:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET,UDDREPET,UDDREPET</PublicList>
<Implementation><![CDATA[
 D ..DayTypeSetObjectId($P($G(INPDATES(+UDDREPET)),"^",2))
 S ..Dt=$P($G(INPDATES(+UDDREPET)),"^",1)
 D ..EditReasonSetObjectId($P($G(INPDATES(+UDDREPET)),"^",3))
 S ..Txn=$G(DATNUM)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[INPDATES:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>DATNUM,UDDREPET</PublicList>
<Implementation><![CDATA[
 S DATNUM=..Txn
 S $P(INPDATES(+UDDREPET),"^",2)=""
 I ..DayType S $P(INPDATES(+UDDREPET),"^",2)=..DayType.SummaryValidate("DayType",.Error)
 S $P(INPDATES(+UDDREPET),"^",1)=..Dt
 S $P(INPDATES(+UDDREPET),"^",3)=""
 I ..EditReason S $P(INPDATES(+UDDREPET),"^",3)=..EditReason.SummaryValidate("EditReason",.Error)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.ReferralInpatientDt</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralInpatientDtS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3})</DataAccess>
<Expression>"INPDATES"</Expression>
</Subscript>
<Subscript name="5">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3},{L4})</DataAccess>
<Expression>{Txn}</Expression>
</Subscript>
<Data name="DayType">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="Dt">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="EditReason">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralLine">
<Description>

The is the referral line table.  For clients who do referral liability

estimation this table contains the procedure codes and units/days necessary to

do this estimation.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67310,45228.171834</TimeChanged>
<TimeCreated>61464,62954.874495</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Because of the strange storage map for this table, this class is not generated from dbms but rather written

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// by hand.

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Parameter DBMSTable = "MCA_B_REF_LINE";

]]></Content>
</UDLText>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>Lines</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="CovCatOver">
<Type>Dict.HmoCoverageCategory</Type>
<Final>1</Final>
</Property>

<ForeignKey name="CovCatOver">
<Properties>CovCatOver</Properties>
<ReferencedClass>Dict.HmoCoverageCategory</ReferencedClass>
</ForeignKey>

<Property name="Days">
<Type>%Integer</Type>
<Final>1</Final>
</Property>

<Property name="EstLiab">
<Type>DBMS.Currency</Type>
<Final>1</Final>
</Property>

<Property name="Freq">
<Type>%String</Type>
<Final>1</Final>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Line">
<Description>

The line number</Description>
<Type>%Integer</Type>
<Final>1</Final>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="ProcCode">
<Description>

a reference to the procedure code the referral</Description>
<Type>Dict.ProcedureCode</Type>
<Final>1</Final>
<Required>1</Required>
<ReadOnly>1</ReadOnly>
</Property>

<ForeignKey name="ProcCode">
<Properties>ProcCode</Properties>
<ReferencedClass>Dict.ProcedureCode</ReferencedClass>
</ForeignKey>

<Property name="ServOrd">
<Type>Dict.ProcedureCode</Type>
<Final>1</Final>
</Property>

<ForeignKey name="ServOrd">
<Properties>ServOrd</Properties>
<ReferencedClass>Dict.ProcedureCode</ReferencedClass>
</ForeignKey>

<Property name="Units">
<Description>

the number of authorized units</Description>
<Type>%Numeric</Type>
<ReadOnly>1</ReadOnly>
</Property>

<Property name="UnitType">
<Description>

the type of units</Description>
<Type>%String</Type>
<Final>1</Final>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/HOURS/VISITS/MINS/DAYS/OTHER/TESTS/UNITS/ONE WAY TRIP/"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/1/2/3/4/5/6/7/8/"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Line</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

 Set class="Referrals.ReferralLine"

 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL

 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()



 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL

 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*

Method LocalToObject(AI As %String) [ ProcedureBlock = 1, PublicList = UDDREPET ]

{

 D ..CovCatOverSetObjectId($G(AI(3800+UDDREPET)))

 S ..Days=$G(AI(1400+UDDREPET))

 S ..EstLiab=$G(AI(1500+UDDREPET))

 S ..Freq=$G(AI(900+UDDREPET))

 S ..Line=$G(MCAREFLN)

 D ..ProcCodeSetObjectId($G(AI(600+UDDREPET)))

 D ..ServOrdSetObjectId($G(AI(1100+UDDREPET)))

 S ..UnitType=$G(AI(800+UDDREPET))

 S ..Units=$G(AI(700+UDDREPET))

}



Method ObjectToLocal(AI As %String, ByRef RowInfo As %String, Error As %String) [ ProcedureBlock = 1, PublicList = (MCAREFLN, UDDREPET) ]

{

 S MCAREFLN=..Line

 S AI(3800+UDDREPET)=""

 I ..CovCatOver S AI(3800+UDDREPET)=..CovCatOver.SummaryValidate("CovCatOver",.Error)

 S AI(1400+UDDREPET)=..Days

 S AI(1500+UDDREPET)=..EstLiab

 S AI(900+UDDREPET)=..Freq

 S AI(1100+UDDREPET)=""

 I ..ServOrd S AI(1100+UDDREPET)=..ServOrd.SummaryValidate("ServOrd",.Error)

 S AI(800+UDDREPET)=..UnitType

}



Method DelimiterCheck() As %String [ ProcedureBlock = 1 ]

{

 I (..Freq["^") Q -1

 I (..UnitType["^") Q -1

 Q 1

}



ClassMethod OpenIdLocal(Id, Concurrency = 0, ByRef Array As %String, ByRef RowInfo As %String) [ ProcedureBlock = 1 ]

{

 

 s oRef=..%OpenId(Id,Concurrency)

 D oRef.ObjectToLocal(.Array,.RowInfo)

 Q oRef

}

*/
]]></Content>
</UDLText>

<Method name="GetDisplayField">
<Description>

Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL

 Q Id
]]></Implementation>
</Method>

<Query name="ByHmoIdRin">
<Description>

Provided an Hmo Id, a member Id, and a Rin(Referral Internal Number) get the liability lines for the 

referral.</Description>
<Type>%SQLQuery</Type>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT Line,Days,EstLiab,Days,Units,UnitType,Freq,

       ProcCode->Code As PxCode, ProcCode->Name As PxName



FROM   Referrals.ReferralLine

WHERE  Referral->Hmo = :Hmo AND Referral->Id=:Id AND Referral->Rin=:Rin]]></SqlQuery>
</Query>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralLineS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^["MHRHMO"]HMOREF</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>Sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>Sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>Piece</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3}+6)</DataAccess>
<Delimiter>"^"</Delimiter>
<Expression>{Line}</Expression>
<LoopInitValue>0</LoopInitValue>
<StopValue>99</StopValue>
</Subscript>
<Data name="CovCatOver">
<RetrievalCode> s {*}=$p($g(^["MHRHMO"]HMOREF({L1},{L2},{L3}+38)),"^",{L4})</RetrievalCode>
</Data>
<Data name="Days">
<RetrievalCode> s {*}=$p($g(^["MHRHMO"]HMOREF({L1},{L2},{L3}+14)),"^",{L4})</RetrievalCode>
</Data>
<Data name="EstLiab">
<RetrievalCode> s {*}=$p($g(^["MHRHMO"]HMOREF({L1},{L2},{L3}+15)),"^",{L4})</RetrievalCode>
</Data>
<Data name="Freq">
<RetrievalCode> s {*}=$p($g(^["MHRHMO"]HMOREF({L1},{L2},{L3}+9)),"^",{L4})</RetrievalCode>
</Data>
<Data name="ProcCode">
<RetrievalCode> s {*}=$p($g(^["MHRHMO"]HMOREF({L1},{L2},{L3}+6)),"^",{L4})</RetrievalCode>
</Data>
<Data name="ServOrd">
<RetrievalCode> s {*}=$p($g(^["MHRHMO"]HMOREF({L1},{L2},{L3}+11)),"^",{L4})</RetrievalCode>
</Data>
<Data name="UnitType">
<RetrievalCode> s {*}=$p($g(^["MHRHMO"]HMOREF({L1},{L2},{L3}+8)),"^",{L4})</RetrievalCode>
</Data>
<Data name="Units">
<RetrievalCode> s {*}=$p($g(^["MHRHMO"]HMOREF({L1},{L2},{L3}+7)),"^",{L4})</RetrievalCode>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralLinkedCase">
<Description>
This table holds a list of all cases associated with each referral.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,72352.149593</TimeChanged>
<TimeCreated>63729,46519</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_CASE</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralLinkedCase</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>LinkedCases</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="CaseNum">
<Description>
a reference to the Case that is linked to the Referral</Description>
<Type>CaseMgmt.Header</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="Case #"/>
</Property>

<ForeignKey name="CaseNum">
<Properties>CaseNum</Properties>
<ReferencedClass>CaseMgmt.Header</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>CaseNum</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralLinkedCase"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM Referrals.ReferralLinkedCase)
 Q $$$OK
]]></Implementation>
</Method>

<Method name="DeleteCaseCheck">
<Description>
Can a CaseNum be deleted as there are no referrals linked to the case</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>CaseNum:%Integer,MemberId:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(SELECT %ID from Referrals.ReferralLinkedCase
      WHERE CaseNum=:CaseNum and Referral->Id=:MemberId)  
 I SQLCODE=0 Q 0
 Q $$$OK
]]></Implementation>
</Method>

<Method name="List">
<Description>
provided an Hmo, Id, and Rin get a comma delimited list of Cases the referral
is linked to</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(SELECT LIST(CaseNum) INTO :Return
      FROM   Referrals.ReferralLinkedCase
      WHERE  Referral->Hmo=:Hmo AND Referral->Id=:Id AND
             Referral->Rin=:Rin)
 Q $G(Return)
]]></Implementation>
</Method>

<Method name="HasCaseByRefStatus">
<Description>
Provided a Referral Id and a comma delimited list of status type codes,
determine if there are any referrals that meet the criteria.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ReferralId:%String,StatusType:%String="O,P"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Boolean</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(SELECT %Id INTO :Return
      FROM   Referrals.ReferralLinkedCase
      WHERE  Referral=:Referral AND CaseNum->HmoNum=Referral->Hmo AND 
             CaseNum->McaStatus->Type %INLIST $LISTFROMSTRING(:StatusType,','))
 I %ROWCOUNT,Return'="" Q 1
 Q 0
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralLinkedCaseS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3})</DataAccess>
<Expression>"CASE"</Expression>
</Subscript>
<Subscript name="5">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3},{L4})</DataAccess>
<Expression>{CaseNum}</Expression>
</Subscript>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralLinkedClm">
<Description>
This base table will retrieve the part of the referral master file that serves
as a link from the referral back to each claim that references it.  This should
not be used in a query.  (It is only an index)</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,82293.126199</TimeChanged>
<TimeCreated>63729,46519</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_CLAIMS</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralLinkedClm</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>LinkedClms</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Claim">
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Claim</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralLinkedClm"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM Referrals.ReferralLinkedClm)
 Q $$$OK
]]></Implementation>
</Method>

<Method name="Rebuild">
<Description>
Rebuild the table by scanning the claims table</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec/>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(INSERT INTO Referrals.ReferralLinkedClm
      (Referral,Claim)
      SELECT C1.HMO || '||' || C1.Id || '||' || C1.Rin,  C1.Number
      FROM MCA_Claim.Claim C1
      WHERE C1. Rin IS NOT NULL AND 
            C1.Status <> 4
            AND EXISTS (SELECT * FROM Referrals.Referral R1
                        WHERE R1.HMO = C1.HMO AND R1.ID = C1.ID AND
                              R1.Rin = C1.Rin)
      )
]]></Implementation>
</Method>

<Method name="List">
<Description>
provided an Hmo, Id, and Rin get a comma delimited list of claims the
referral is linked to</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(SELECT LIST(Claim) INTO :Return
      FROM   Referrals.ReferralLinkedClm   
      WHERE  Referral->Hmo=:Hmo AND Referral->Id=:Id AND
             Referral->Rin=:Rin)
 Q $G(Return)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralLinkedClmS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3})</DataAccess>
<Expression>"CLAIMS"</Expression>
</Subscript>
<Subscript name="5">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3},{L4})</DataAccess>
<Expression>{Claim}</Expression>
</Subscript>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralLinkedInv">
<Description>
This table describes the link from the MCA referral to the BAR invoices which
have been linked to the referral via BAR charge entry.  This should not be used
in a query. </Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,82629.980122</TimeChanged>
<TimeCreated>63729,46519</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_BAR</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralLinkedInv</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>LinkedInvs</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Iin">
<Description>
Internal invoice number for a BAR invoice which is linked to this referral. 
Used to join the invoice and referral tables for report writer purposes.</Description>
<Type>%Integer</Type>
</Property>

<Property name="Invoice">
<Type>BAR.Invoice</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="Invoice">
<Properties>Invoice</Properties>
<ReferencedClass>BAR.Invoice</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Gid">
<Description>
This field is the guarantor in BAR in which the associated invoice is filed.</Description>
<Type>Registration.Patient</Type>
</Property>

<ForeignKey name="Gid">
<Properties>Gid</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Grp">
<Description>
This field is the Group in BAR in which the associated invoice is filed.</Description>
<Type>Dict.GroupProfile</Type>
<Parameter name="CAPTION" value="GROUP"/>
</Property>

<ForeignKey name="Grp">
<Properties>Grp</Properties>
<ReferencedClass>Dict.GroupProfile</ReferencedClass>
</ForeignKey>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Invoice</Properties>
<Unique>1</Unique>
</Index>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralLinkedInv"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,BARTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM Referrals.ReferralLinkedInv)
 Q $$$OK
]]></Implementation>
</Method>

<Method name="List">
<Description>
provided an Hmo, Id, and Rin get a comma delimited string of invoice numbers</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,BARTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(SELECT LIST(Invoice) INTO :Return
      FROM   Referrals.ReferralLinkedInv 
      WHERE  Referral->Hmo=:Hmo AND Referral->Id=:Id AND
             Referral->Rin=:Rin)
 Q $G(Return)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,SECID,SECCAT,BARTBL,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(BARTBL)<10 D GETBAR^UDDBAR   ;Get extended syntax for BAR_A_TBL
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralLinkedInvS</StreamLocation>
<ExtentSize>2376</ExtentSize>
<Property name="Gid">
<Selectivity>0.1878%</Selectivity>
</Property>
<Property name="Grp">
<Selectivity>14.2857%</Selectivity>
</Property>
<Property name="Iin">
<Selectivity>3.3088%</Selectivity>
</Property>
<Property name="Invoice">
<Selectivity>1</Selectivity>
</Property>
<Property name="Referral">
<Selectivity>0.1465%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
<StartValue>100</StartValue>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3})</DataAccess>
<Expression>"BAR"</Expression>
</Subscript>
<Subscript name="5">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3},{L4})</DataAccess>
<Expression>{Invoice}</Expression>
</Subscript>
<Data name="Gid">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Grp">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="Iin">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralPhoneList">
<Abstract>1</Abstract>
<TimeChanged>61752,69332.031165</TimeChanged>
<TimeCreated>61752,58105.537873</TimeCreated>

<Query name="List">
<Description>

Provided an Internal Hmo, Id, Rin(Referral Internal Id) get a list of the 

contacts associated with the referral</Description>
<Type>%SQLQuery</Type>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer</FormalSpec>
<SqlQuery><![CDATA[

SELECT  'Member',Id->PatNm As Name,Id->StreetAddrL1,Id->StreetAddrL2,Id->CtySt,Id->Zip,Id->Tel

FROM    Referrals.Referral

WHERE   Referrals.Referral.Hmo=:Hmo AND Referrals.Referral.Id=:Id AND Referrals.Referral.Rin=:Rin



UNION  



SELECT  'Subscriber',Sbs->PatNm,Sbs->StreetAddrL1,Sbs->StreetAddrL2,Sbs->CtySt,Sbs->Zip,Sbs->Tel

FROM    Referrals.Referral JOIN MCA_Enrollment.Contract 

         ON (MCA_Enrollment.Contract.Hmo = Referrals.Referral.Hmo AND

             MCA_Enrollment.Contract.Cin = Referrals.Referral.Cin)

WHERE   Referrals.Referral.Hmo=:Hmo AND Referrals.Referral.Id=:Id AND Referrals.Referral.Rin=:Rin



UNION   



SELECT  'Guarantor',Id->GuarId->PatNm,Id->GuarId->StreetAddrL1,Id->GuarId->StreetAddrL2,Id->GuarId->CtySt,Id->GuarId->Zip,Id->GuarId->Tel

FROM    Referrals.Referral

WHERE   Referrals.Referral.Hmo=:Hmo AND Referrals.Referral.Id=:Id AND Referrals.Referral.Rin=:Rin AND Id->GuarId IS NOT NULL



UNION



SELECT 'PCP',Pcp->Name,

        Pcp->FirstLineStreetAddress, Pcp->SecondLineStreetAddress,

        $PIECE(Pcp->CitystateZip,' ',1),$PIECE(Pcp->CitystateZip,' ',2),Pcp->Telephone

FROM    Referrals.Referral JOIN Registration.PatientClinicalTxn ON

        (Registration.PatientClinicalTxn.%ID =

        MCA_Enrollment.Join_RegistrationDate(Referrals.Referral.Hmo,Referrals.Referral.Cin,Referrals.Referral.Id,Referrals.Referral.ValidFromDt))





WHERE   Referrals.Referral.Hmo=:Hmo AND Referrals.Referral.Id=:Id AND Referrals.Referral.Rin=:Rin





UNION



SELECT 'MedicalPractice',MedPrac->Name,

        MedPrac->FirstLineStreetAddress, MedPrac->SecondLineStreetAddress,

        $PIECE(MedPrac->CitystateZip,' ',1),$PIECE(MedPrac->CitystateZip,' ',2),MedPrac->Telephone

FROM    Referrals.Referral JOIN Registration.PatientClinicalTxn ON

        (Registration.PatientClinicalTxn.%ID =

        MCA_Enrollment.Join_RegistrationDate(Referrals.Referral.Hmo,Referrals.Referral.Cin,Referrals.Referral.Id,Referrals.Referral.ValidFromDt))





WHERE   Referrals.Referral.Hmo=:Hmo AND Referrals.Referral.Id=:Id AND Referrals.Referral.Rin=:Rin





UNION



SELECT 'Referring Provider',RefProv->Name,

        RefProv->FirstLineStreetAddress, RefProv->SecondLineStreetAddress,

        $PIECE(RefProv->CitystateZip,' ',1),$PIECE(RefProv->CitystateZip,' ',2),RefProv->Telephone

FROM    Referrals.Referral





WHERE   Referrals.Referral.Hmo=:Hmo AND Referrals.Referral.Id=:Id AND Referrals.Referral.Rin=:Rin AND RefProv IS NOT NULL



UNION



SELECT 'Referring To Provider',ReferToProv->Name,

        ReferToProv->FirstLineStreetAddress, ReferToProv->SecondLineStreetAddress,

        $PIECE(ReferToProv->CitystateZip,' ',1),$PIECE(ReferToProv->CitystateZip,' ',2),ReferToProv->Telephone

FROM    Referrals.Referral





WHERE   Referrals.Referral.Hmo=:Hmo AND Referrals.Referral.Id=:Id AND Referrals.Referral.Rin=:Rin AND ReferToProv IS NOT NULL





UNION 





SELECT 'Claim Vendors',Vendor->Name,

        Vendor->ClinicalAddressLine1, Vendor->ClinicalAddressLine2,

        $PIECE(Vendor->ClinicalCitystZip,' ',1),$PIECE(Vendor->ClinicalCitystZip,' ',2),Vendor->ClinicalPhoneNumber

FROM    Referrals.Referral 

		JOIN Referrals.ReferralLinkedClm ON 

        	(Referrals.ReferralLinkedClm.Referral = Referrals.Referral.%Id)

        JOIN MCA_Claim.Claim ON 

             (MCA_Claim.Claim.Hmo = Referrals.Referral.Hmo AND

              MCA_Claim.Claim.Id  = Referrals.Referral.Id AND

              MCA_Claim.Claim.Number = Referrals.ReferralLinkedClm.Claim)

WHERE   Referrals.Referral.Hmo=:Hmo AND Referrals.Referral.Id=:Id AND Referrals.Referral.Rin=:Rin



UNION 



SELECT 'Refer To Vendor',ReferToVnd->Name,

        ReferToVnd->ClinicalAddressLine1, ReferToVnd->ClinicalAddressLine2,

        $PIECE(ReferToVnd->ClinicalCitystZip,' ',1),$PIECE(ReferToVnd->ClinicalCitystZip,' ',2),ReferToVnd->ClinicalPhoneNumber

FROM    Referrals.Referral





WHERE   Referrals.Referral.Hmo=:Hmo AND Referrals.Referral.Id=:Id AND Referrals.Referral.Rin=:Rin AND ReferToVnd IS NOT NULL





UNION 



SELECT 'User',COALESCE(CreatedBy->FullName,CreatedBy),

        Null, Null,Null,Null,CreatedBy->Telephone

FROM    Referrals.Referral





WHERE   Referrals.Referral.Hmo=:Hmo AND Referrals.Referral.Id=:Id AND Referrals.Referral.Rin=:Rin





UNION 



SELECT 'User',COALESCE(LastEditBy->FullName,LastEditBy),

        Null, Null,Null,Null,LastEditBy->Telephone

FROM    Referrals.Referral





WHERE   Referrals.Referral.Hmo=:Hmo AND Referrals.Referral.Id=:Id AND Referrals.Referral.Rin=:Rin





UNION



SELECT 'User',COALESCE(Referrals.ReferralStatusHistory.Ini->FullName,Referrals.ReferralStatusHistory.Ini),

        Null, Null,Null,Null,Referrals.ReferralStatusHistory.Ini->Telephone

FROM    Referrals.Referral JOIN 

        Referrals.ReferralStatusHistory ON 

         (Referrals.ReferralStatusHistory.Referral=Referrals.Referral.%Id)





WHERE   Referrals.Referral.Hmo=:Hmo AND Referrals.Referral.Id=:Id AND Referrals.Referral.Rin=:Rin









ORDER BY 2]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>
</Class>


<Class name="Referrals.ReferralRequest">
<Description>
Referral request object used to store referral requests from the EMR product.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63729,47194.798626</TimeChanged>
<TimeCreated>63729,46518</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REFERRAL_REQUEST</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralRequest</Default>
</Parameter>

<Parameter name="XMLSUMMARY">
<Default>Id,Patient,Referral</Default>
</Parameter>

<Property name="Audits">
<Type>Referrals.ReferralRequestAudit</Type>
<Cardinality>many</Cardinality>
<Inverse>ReferralRequest</Inverse>
<Relationship>1</Relationship>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="ClinRequest">
<Description>
Clinical Request linked to this referral request.</Description>
<Type>CON.ClinRequest</Type>
<Parameter name="CAPTION" value="Clinical Request"/>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<ForeignKey name="ClinRequest">
<Properties>ClinRequest</Properties>
<ReferencedClass>CON.ClinRequest</ReferencedClass>
</ForeignKey>

<Property name="Id">
<Description>
a unique rowid</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<Transient>1</Transient>
</Property>

<Method name="IdGet">
<Description>
 This method is used as interface when using Cache Objects for the Id properties</Description>
<Internal>1</Internal>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..%Id()
]]></Implementation>
</Method>

<Property name="InternalExternal">
<Description>
Internal or External referral</Description>
<Type>DBMS.MenuDataType</Type>
<Parameter name="CAPTION" value="Internal External"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Internal/External/"/>
<Parameter name="VALUELIST" value="/Internal/External/"/>
</Property>

<Property name="OutgoingIncoming">
<Description>
1-Outgoing, 2 -Incoming</Description>
<Type>DBMS.MenuDataType</Type>
<Parameter name="CAPTION" value="Outgoing Incoming"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="DISPLAYLIST" value="/Outgoing/Incoming/"/>
<Parameter name="VALUELIST" value="/Outgoing/Incoming/"/>
</Property>

<Property name="Patient">
<Description>
Patient reference</Description>
<Type>Registration.Patient</Type>
</Property>

<ForeignKey name="Patient">
<Properties>Patient</Properties>
<ReferencedClass>Registration.Patient</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Referral">
<Description>
Referral linked to referral request.</Description>
<Type>Referrals.Referral</Type>
</Property>

<Property name="ReferralType">
<Description>
Referral type for referral request.</Description>
<Type>Dict.HmoReferralType</Type>
<Parameter name="CAPTION" value="Referral Type"/>
</Property>

<ForeignKey name="ReferralType">
<Properties>ReferralType</Properties>
<ReferencedClass>Dict.HmoReferralType</ReferencedClass>
</ForeignKey>

<Property name="ReferringToProv">
<Description>
Free text referral provider target for referral request.</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RowInfo">
<Description>
a reference to the rowinfo data</Description>
<Type>DBMS.DataInfo</Type>
<Parameter name="CAPTION" value="Rowinfo"/>
</Property>

<ForeignKey name="RowInfoCreUsername">
<Properties>RowInfo.CreUsername</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<ForeignKey name="RowInfoDeactUsername">
<Properties>RowInfo.DeactUsername</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<ForeignKey name="RowInfoDeleteBy">
<Properties>RowInfo.DeleteBy</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<ForeignKey name="RowInfoOrg">
<Properties>RowInfo.Org</Properties>
<ReferencedClass>Dict.Organization</ReferencedClass>
</ForeignKey>

<ForeignKey name="RowInfoUpdUsername">
<Properties>RowInfo.UpdUsername</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="ValidFromDate">
<Description>
Valid starting date for referral requested.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Valid From Date"/>
</Property>

<Property name="ValidToDate">
<Description>
Valid end date for referral being requested.</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Valid To Date"/>
</Property>

<Index name="ZClinRequest">
<Type>bitmap</Type>
<Properties>ClinRequest</Properties>
</Index>

<Index name="ZPatient">
<Type>index</Type>
<Properties>Patient</Properties>
</Index>

<Index name="ZReferral">
<Type>bitmap</Type>
<Properties>Referral</Properties>
</Index>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXMLX 
]]></Content>
</UDLText>

<Method name="ClinRequestExists">
<Description>
Does the value exist in a ClinRequest index</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Value,Id</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 S Value=$$Collate^UDDUIX1(Value,0) I $G(Id)="" S FOUND=0,pidchunk="" s pidchunk=$o(^Referral.ReferralRequestI("MCA_B_REFERRAL_REQUEST.CLINICAL_REQUEST",Value,pidchunk),1,row) Q:(pidchunk="")||(FOUND) FOUND  S FOUND=$BITFIND(row,1)
 I $G(Id)="" Q FOUND
 s pidchunk=Id\64000+1,pidoffset=Id#64000+1 Q $BIT(^Referral.ReferralRequestI("MCA_B_REFERRAL_REQUEST.CLINICAL_REQUEST",Value,pidchunk),pidoffset)
  
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXMLX 
]]></Content>
</UDLText>

<Method name="ReferralExists">
<Description>
Does the value exist in a Referral index</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Value,Id</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 S Value=$$Collate^UDDUIX1(Value,0) I $G(Id)="" S FOUND=0,pidchunk="" s pidchunk=$o(^Referral.ReferralRequestI("MCA_B_REFERRAL_REQUEST.REFERRAL",Value,pidchunk),1,row) Q:(pidchunk="")||(FOUND) FOUND  S FOUND=$BITFIND(row,1)
 I $G(Id)="" Q FOUND
 s pidchunk=Id\64000+1,pidoffset=Id#64000+1 Q $BIT(^Referral.ReferralRequestI("MCA_B_REFERRAL_REQUEST.REFERRAL",Value,pidchunk),pidoffset)
  
]]></Implementation>
</Method>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralRequest"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
 Checks to see if the object identified by the ID <var>id</var> exists in the extent.<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.  ]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Quit $D(^Referrals.RefRequestD($P(id,"||",1))) 
]]></Implementation>
</Method>

<Query name="ByPatient">
<Description>
Provided a Patient get the Referral Requests on file in descending order.</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Patient:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT   Id,Referral As ReferralId,        
         ReferralType->Name As ReferralType,
         InternalExternal,OutgoingIncoming,ValidFromDate,ValidToDate,
         ReferringToProv,ClinRequest

FROM     Referrals.ReferralRequest
WHERE    Patient=:Patient
ORDER BY Id DESC]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Id:%Integer,ReferralId:%String,ReferralType:%String,InternalExternal:%String,OutgoingIncoming:%String,ValidFromDate:%Date,ValidToDate:%Date,ReferringToProv:%String,ClinRequest:%Integer"/>
</Query>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDTABM 
]]></Content>
</UDLText>

<Method name="GetVersion">
<ClassMethod>1</ClassMethod>
<FormalSpec>Rowid:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
 #SQLCompile Mode=Deferred

 &SQL(SELECT RowInfo_VerNum INTO :Return FROM ReferralRequest WHERE %ID=:Rowid)
 Q $G(Return) 
]]></Implementation>
</Method>

<Method name="OptimisticLockCheck">
<FormalSpec>Id:%String,ErrMsg:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
 if ('Id) {
	//This is a new entry, default version number to 1
	set ..RowInfo.VerNum = 1
	quit 1
	}

 S DbVersion=..GetVersion(Id)
 if ('$Data(DbVersion))||(..RowInfo.VerNum '= +DbVersion) 	{
	set ErrMsg = "This entry has been updated by another user."
	quit -1
	}

	//Bump up the Version number on the persistent object
	set ..RowInfo.VerNum = ..RowInfo.VerNum + 1
	quit 1 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXMLT 
]]></Content>
</UDLText>

<Method name="PopulateSummary">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>RowId:%String</FormalSpec>
<ReturnType>Referrals.DT.ReferralRequest</ReturnType>
<Implementation><![CDATA[
  
 I RowId="" q ""
 S oObj=##class(Referrals.DT.ReferralRequest).%New()
 #SQLCompile Mode=Deferred
 &SQL(SELECT Id,Patient,Referral INTO :Id,:Patient,:Referral FROM Referrals.ReferralRequest WHERE %Id=:RowId)
 S oObj.Id=Id
 S oObj.Patient=Patient
 S oObj.Referral=Referral
 Q oObj
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>ReferralsRefRequestD:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 D ..ClinRequestSetObjectId($P($G(ReferralsRefRequestD(0)),"^",2))
 S ..InternalExternal=$P($G(ReferralsRefRequestD(0)),"^",5)
 S ..OutgoingIncoming=$P($G(ReferralsRefRequestD(0)),"^",6)
 D ..PatientSetObjectId($P($G(ReferralsRefRequestD(0)),"^",1))
 D ..ReferralSetObjectId($P($G(ReferralsRefRequestD(0)),"^",3))
 D ..ReferralTypeSetObjectId($P($G(ReferralsRefRequestD(0)),"^",4))
 S ..ReferringToProv=$P($G(ReferralsRefRequestD(0)),"^",9)
 D ..RowInfo.LocalToObject($P($G(ReferralsRefRequestD(1)),"^",1))
 S ..ValidFromDate=$P($G(ReferralsRefRequestD(0)),"^",7)
 S ..ValidToDate=$P($G(ReferralsRefRequestD(0)),"^",8) 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[ReferralsRefRequestD:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>MCAReferralRequestId</PublicList>
<Implementation><![CDATA[
 S MCAReferralRequestId=..Id
 S $P(ReferralsRefRequestD(0),"^",2)=""
 I ..ClinRequest,##class(%Dictionary.CompiledMethod).%OpenId("CON.ClinRequest||SummaryValidate") S $P(ReferralsRefRequestD(0),"^",2)=..ClinRequest.SummaryValidate("ClinRequest",.Error)
 E   I ..ClinRequest S $P(ReferralsRefRequestD(0),"^",2)=..ClinRequest.%Id()
 S $P(ReferralsRefRequestD(0),"^",5)=..InternalExternal
 S $P(ReferralsRefRequestD(0),"^",6)=..OutgoingIncoming
 S $P(ReferralsRefRequestD(0),"^",1)=""
 I ..Patient,##class(%Dictionary.CompiledMethod).%OpenId("Registration.Patient||SummaryValidate") S $P(ReferralsRefRequestD(0),"^",1)=..Patient.SummaryValidate("Patient",.Error)
 E   I ..Patient S $P(ReferralsRefRequestD(0),"^",1)=..Patient.%Id()
 S $P(ReferralsRefRequestD(0),"^",3)=""
 I ..Referral,##class(%Dictionary.CompiledMethod).%OpenId("Referrals.Referral||SummaryValidate") S $P(ReferralsRefRequestD(0),"^",3)=..Referral.SummaryValidate("Referral",.Error)
 E   I ..Referral S $P(ReferralsRefRequestD(0),"^",3)=..Referral.%Id()
 S $P(ReferralsRefRequestD(0),"^",4)=""
 I ..ReferralType S $P(ReferralsRefRequestD(0),"^",4)=..ReferralType.SummaryValidate("ReferralType",.Error)
 S $P(ReferralsRefRequestD(0),"^",9)=..ReferringToProv
 K X D ..RowInfo.ObjectToLocal(.X)
 S RowInfo=X,FINT=X
 S $P(ReferralsRefRequestD(1),"^",1)=X
 S $P(ReferralsRefRequestD(0),"^",7)=..ValidFromDate
 S $P(ReferralsRefRequestD(0),"^",8)=..ValidToDate 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML6 
]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I (..InternalExternal["^") Q -1
 I (..OutgoingIncoming["^") Q -1
 I (..ReferringToProv["^") Q -1
 Q 1 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.ReferralRequest</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="SaveLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec>Array,oRef=""</FormalSpec>
<PublicList>SECID</PublicList>
<Implementation><![CDATA[
 
	I oRef="" s oRef=..%New()
	D oRef.LocalToObject(.Array)

	d oRef.SetSaveData()
	//File main object
	set x = oRef.%Save(0),Status=1
	if ($$$ISERR(x)) set Status = "-1^"_##Class(DBMS.Tools).DecomposeError(x)

	//Return status to caller
	quit Status 
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[ //Generated by: UDDCXML0 
]]></Content>
</UDLText>

<Method name="SetSaveData">
<PublicList>SECID</PublicList>
<Implementation><![CDATA[
 

	//When editing the row set the update information
	I ..%Id()'="" {   
			set ..RowInfo.UpdDt = +$h
			set ..RowInfo.UpdTm = $piece($h,",",2)
			Do ..RowInfo.UpdUsernameSetObjectId($piece(SECID,"^",1))
		 	set ..RowInfo.VerNum = ..RowInfo.VerNum + 1
		}

	//When this is a new row
	I '..%Id() {
		    set ..RowInfo.CreDt = +$h
			set ..RowInfo.CreTm = $piece($h,",",2)
			Do ..RowInfo.CreUsernameSetObjectId($piece(SECID,"^",1))
			set ..RowInfo.VerNum = 1
		 	}

	quit 
]]></Implementation>
</Method>

<Trigger name="Audit">
<Code><![CDATA[
 N OK S OK=0
 I {ClinRequest*C}||{InternalExternal*C}||{OutgoingIncoming*C}||{Patient*C}||{Referral*C}||{ReferralType*C}||{ReferringToProv*C}||{RowInfo_DeactDt*C}||{RowInfo_DeactUsername*C}||{RowInfo_DeleteBy*C}||{RowInfo_DeleteDt*C}||{RowInfo_Org*C}||{ValidFromDate*C}||{ValidToDate*C} S OK=1
 I %oper="INSERT" S OK=1
 I 'OK Q   ;No audited fields changed
 N Dt,Tm,Ini,ReferralRequest,TXN,Old,New,Property s Dt=+$h,Tm=$p($h,",",2),Ini=$S($G(SECID)'="":$P(SECID,"^",1),1:$$GetSQLUser^UDDCACHE()),ReferralRequest={Id},TXN=0
 &sql(INSERT %NOLOCK INTO Referrals.ReferralRequestAudit (Event_Dt,Event_Tm,Event_Ini,ReferralRequest) VALUES (:Dt,:Tm,:Ini,:ReferralRequest))
 I SQLCODE S %ok=0,%msg="Error filing audit trail." Q
 N ReferralRequestAudit S ReferralRequestAudit=%ROWID
 I ..PostAudit({ClinRequest*O},{ClinRequest*N},"ClinRequest",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q 
 I ..PostAudit({InternalExternal*O},{InternalExternal*N},"InternalExternal",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q 
 I ..PostAudit({OutgoingIncoming*O},{OutgoingIncoming*N},"OutgoingIncoming",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q 
 I ..PostAudit({Patient*O},{Patient*N},"Patient",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q 
 I ..PostAudit({Referral*O},{Referral*N},"Referral",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q 
 I ..PostAudit({ReferralType*O},{ReferralType*N},"ReferralType",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q 
 I ..PostAudit({ReferringToProv*O},{ReferringToProv*N},"ReferringToProv",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q 
 I ..PostAudit({ValidFromDate*O},{ValidFromDate*N},"ValidFromDate",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q 
 I ..PostAudit({ValidToDate*O},{ValidToDate*N},"ValidToDate",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q 
 I ..PostAudit({RowInfo_DeactDt*O},{RowInfo_DeactDt*N},"RowInfo_DeactDt",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q
 I ..PostAudit({RowInfo_DeactUsername*O},{RowInfo_DeactUsername*N},"RowInfo_DeactUsername",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q
 I ..PostAudit({RowInfo_DeleteBy*O},{RowInfo_DeleteBy*N},"RowInfo_DeleteBy",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q
 I ..PostAudit({RowInfo_DeleteDt*O},{RowInfo_DeleteDt*N},"RowInfo_DeleteDt",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q
 I ..PostAudit({RowInfo_Org*O},{RowInfo_Org*N},"RowInfo_Org",ReferralRequestAudit,.TXN) S %ok=0,%msg="An error occured during the filing of an audit transaction." Q
 Q]]></Code>
<Event>INSERT/UPDATE</Event>
<Time>AFTER</Time>
</Trigger>

<Method name="PostAudit">
<Description>
[Previously private]</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Old:%String="",New:%String="",Property:%String,InverseProp:%String,&TXN:%Integer]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 I %oper="INSERT" S Old=""
 I Old=New Q 0
 S TXN=TXN+1
 &SQL(INSERT %NOLOCK INTO Referrals.ReferralRequestAuditTxn (Data_OldVal,Data_NewVal,Data_Property,Txn,ReferralRequestAudit) VALUES (:Old,:New,:Property,:TXN,:InverseProp))
 Q SQLCODE
]]></Implementation>
</Method>

<Trigger name="DeleteAudit">
<Code><![CDATA[
 &SQL(DELETE %NOTRIGGER FROM Referrals.ReferralRequestAudit 
      WHERE ReferralRequest = :%ROWID)]]></Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDelete">
<Description>
[Previously private]</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s Rowid=$$$oidPrimary(oid)
  &SQL(DELETE FROM Referrals.ReferralRequestAudit WHERE ReferralRequest = :Rowid)
  Q $$$OK  
]]></Implementation>
</Method>

<Method name="%OnConstructClone">
<Description>
Do not allow cloning of audits</Description>
<Internal>1</Internal>
<FormalSpec><![CDATA[object:%RegisteredObject,deep:%Boolean=0,&cloned:%String]]></FormalSpec>
<Private>1</Private>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 s object.Audits=""
 Q $$$OK
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<SqlIdExpression>$I(^ReferralsRefRequestD(0))</SqlIdExpression>
<StreamLocation>^Referrals.ReferralRequestS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^Referrals.RefRequestD</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Id}</Expression>
</Subscript>
<Subscript name="2">
<Expression>0</Expression>
</Subscript>
<Data name="ClinRequest">
<Delimiter>"^"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="InternalExternal">
<Delimiter>"^"</Delimiter>
<Piece>5</Piece>
</Data>
<Data name="OutgoingIncoming">
<Delimiter>"^"</Delimiter>
<Piece>6</Piece>
</Data>
<Data name="Patient">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Referral">
<Delimiter>"^"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="ReferralType">
<Delimiter>"^"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="ReferringToProv">
<Delimiter>"^"</Delimiter>
<Piece>9</Piece>
</Data>
<Data name="RowInfo">
<Delimiter>"^"</Delimiter>
<Node>+1</Node>
<Piece>1</Piece>
</Data>
<Data name="ValidFromDate">
<Delimiter>"^"</Delimiter>
<Piece>7</Piece>
</Data>
<Data name="ValidToDate">
<Delimiter>"^"</Delimiter>
<Piece>8</Piece>
</Data>
</SQLMap>
<SQLMap name="Extent">
<Type>bitmapextent</Type>
<Global>^Referral.ReferralRequestI</Global>
<Subscript name="1">
<Expression>"$bitmap"</Expression>
</Subscript>
<RowIdSpec name="1">
<Expression>id1</Expression>
<Field>Id</Field>
</RowIdSpec>
</SQLMap>
<SQLMap name="ZClinRequest">
<Type>bitmap</Type>
<Global>^Referral.ReferralRequestI</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"MCA_B_REFERRAL_REQUEST.CLINICAL_REQUEST"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{ClinRequest}</Expression>
</Subscript>
<RowIdSpec name="1">
<Expression>id1</Expression>
<Field>Id</Field>
</RowIdSpec>
</SQLMap>
<SQLMap name="ZPatient">
<Type>index</Type>
<Global>^Referral.ReferralRequestI</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"MCA_B_REFERRAL_REQUEST.PATIENT"</Expression>
</Subscript>
<Subscript name="2">
<Expression>$$SQLUPPER({Patient})</Expression>
</Subscript>
<Subscript name="3">
<Expression>{Id}</Expression>
</Subscript>
</SQLMap>
<SQLMap name="ZReferral">
<Type>bitmap</Type>
<Global>^Referral.ReferralRequestI</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>"MCA_B_REFERRAL_REQUEST.REFERRAL"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{Referral}</Expression>
</Subscript>
<RowIdSpec name="1">
<Expression>id1</Expression>
<Field>Id</Field>
</RowIdSpec>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralRequestAudit">
<Description>
This table is used to create a virtual table for auditing. This table is not be queried in Cache.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67330,83031.321022</TimeChanged>
<TimeCreated>63729,46518</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Property name="Txns">
<Type>Referrals.ReferralRequestAuditTxn</Type>
<Cardinality>children</Cardinality>
<Inverse>ReferralRequestAudit</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Id">
<Description>
This column contains a unique identifier for the row</Description>
<Type>%Integer</Type>
<Final>1</Final>
<Calculated>1</Calculated>
<Transient>1</Transient>
</Property>

<Method name="IdGet">
<Internal>1</Internal>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..%Id()
]]></Implementation>
</Method>

<Method name="%AcquireLock">
<CodeMode>expression</CodeMode>
<FormalSpec>locktype:%String=""</FormalSpec>
<Private>1</Private>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[1
]]></Implementation>
</Method>

<Method name="%KillExtent">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,SECID,SECCAT,SYE,SYPSC,SYPSCA,SYR,SYSR,UCE,UCPSC,UCPSCA,UCR,UCSR</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If '$D(SYE) D ^UDDREG  ;Get extended syntax for REG_A_TBL
 K ^Referrals.ReferralRequestA   ;Delete the data file
 K ^Referrals.ReferralRequestAI   ;Delete the index
]]></Implementation>
</Method>

<ForeignKey name="Ini">
<Properties>Event.Ini</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
</ForeignKey>

<Property name="ReferralRequest">
<Description>
a reference to the parent row</Description>
<Type>Referrals.ReferralRequest</Type>
<Final>1</Final>
<Cardinality>one</Cardinality>
<Inverse>Audits</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
</Property>

<Property name="Event">
<Description>
A reference to the event</Description>
<Type>DBMS.Event</Type>
<Final>1</Final>
<Required>1</Required>
</Property>

<Index name="Dt">
<Type>bitmap</Type>
<Properties>Event.Dt</Properties>
</Index>

<Index name="Ini">
<Type>bitmap</Type>
<Properties>Event.Ini</Properties>
</Index>

<Index name="ReferralRequest">
<Properties>ReferralRequest</Properties>
</Index>

<Query name="ReverseDtAllFields">
<Type>%SQLQuery</Type>
<FormalSpec>Entry:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT
       ReferralRequestAudit->Event_Dt As Dt,
       ReferralRequestAudit->Event_Tm as Tm,
       ReferralRequestAudit->Event_Ini as Ini,
       DBMS.AuditTxn_Caption('Referrals.ReferralRequest',Data_Property) as Property,
       DBMS.AuditTxn_ClassLogicalToDisplay('Referrals.ReferralRequest',Data_Property,Data_OldVal) as OldVal,
       DBMS.AuditTxn_ClassLogicalToDisplay('Referrals.ReferralRequest',Data_Property,Data_NewVal) as NewVal,
       %ID
FROM Referrals.ReferralRequestAuditTxn
WHERE ReferralRequestAudit->ReferralRequest = :Entry
ORDER By ReferralRequestAudit->ID DESC]]></SqlQuery>
<Parameter name="CONTAINID" value="7"/>
<Parameter name="ROWSPEC" value="Dt:%Date,Tm:%Time,Ini:%String,Property:%String,OldVal:%String,NewVal:%String,Id:%String"/>
</Query>

<Query name="FieldHistory">
<Type>%SQLQuery</Type>
<FormalSpec>Entry:%String,Property:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT
       ReferralRequestAudit->Event_Dt As Dt,
       ReferralRequestAudit->Event_Tm as Tm,
       ReferralRequestAudit->Event_Ini as Ini,
       DBMS.AuditTxn_ClassLogicalToDisplay('Referrals.ReferralRequest',Data_Property,Data_OldVal) as OldVal,
       DBMS.AuditTxn_ClassLogicalToDisplay('Referrals.ReferralRequest',Data_Property,Data_NewVal) as NewVal
FROM Referrals.ReferralRequestAuditTxn
WHERE ReferralRequestAudit->ReferralRequest = :Entry and Data_Property = :Property
ORDER By ReferralRequestAudit->ID DESC]]></SqlQuery>
<Parameter name="ROWSPEC" value="Dt:%Date,Tm:%Time,Ini:%String,OldVal:%String,NewVal:%String"/>
</Query>

<Query name="DistinctEvents">
<Description>
Provided a ReferralRequest get a distinct list of events</Description>
<Type>%SQLQuery</Type>
<FormalSpec>ReferralRequest:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery> SELECT   Id, Event_EditDt As Dt, Event_EditTm As Tm, Event_Ini As Ini
 FROM     Referrals.ReferralRequestAudit
 WHERE    ReferralRequest = :ReferralRequest
 ORDER BY Dt DESC, Tm DESC, Id DESC</SqlQuery>
<Parameter name="ROWSPEC" value="Id:%Integer, Dt:%Date, Tm:%Time, Ini:%String"/>
</Query>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<SqlIdExpression>$I(^Referrals.ReferralRequestA(0))</SqlIdExpression>
<StreamLocation>^Referrals.ReferralReqB69CS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^Referrals.ReferralRequestA</Global>
<Subscript name="1">
<Expression>{Id}</Expression>
</Subscript>
<Subscript name="2">
<Expression>0</Expression>
</Subscript>
<Data name="Event">
<Piece>1</Piece>
</Data>
<Data name="ReferralRequest">
<Piece>2</Piece>
</Data>
</SQLMap>
<SQLMap name="Dt">
<Type>bitmap</Type>
<Global>^Referrals.ReferralRequestAI</Global>
<Subscript name="1">
<Expression>"DT"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{Event_Dt}</Expression>
</Subscript>
<RowIdSpec name="1">
<Expression>id1</Expression>
<Field>Id</Field>
</RowIdSpec>
</SQLMap>
<SQLMap name="Extent">
<Type>bitmapextent</Type>
<Global>^Referrals.ReferralRequestAI</Global>
<Subscript name="1">
<Expression>"$bitmap"</Expression>
</Subscript>
<RowIdSpec name="1">
<Expression>id1</Expression>
<Field>Id</Field>
</RowIdSpec>
</SQLMap>
<SQLMap name="Ini">
<Type>bitmap</Type>
<Global>^Referrals.ReferralRequestAI</Global>
<Subscript name="1">
<Expression>"INI"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{Event_Ini}</Expression>
</Subscript>
<RowIdSpec name="1">
<Expression>id1</Expression>
<Field>Id</Field>
</RowIdSpec>
</SQLMap>
<SQLMap name="ReferralRequest">
<Type>index</Type>
<Global>^Referrals.ReferralRequestAI</Global>
<Subscript name="1">
<Expression>"PARENT"</Expression>
</Subscript>
<Subscript name="2">
<Expression>{ReferralRequest}</Expression>
</Subscript>
<Subscript name="3">
<Expression>{Id}</Expression>
</Subscript>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralRequestAuditTxn">
<Description>
This table is used to create a virtual table for auditing. This table is not to be queried in Cache</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63729,47327.43291</TimeChanged>
<TimeCreated>63729,46518</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Property name="ReferralRequestAudit">
<Type>Referrals.ReferralRequestAudit</Type>
<Cardinality>parent</Cardinality>
<Inverse>Txns</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Data">
<Type>DBMS.AuditTxn</Type>
<Final>1</Final>
</Property>

<Property name="Txn">
<Description>
A unique placeholder for each element that has been changed</Description>
<Type>%Integer</Type>
<Final>1</Final>
<Required>1</Required>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<Properties>Txn</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralReq7254S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>^Referrals.ReferralRequestA</Global>
<Subscript name="1">
<Expression>{Referrals.ReferralRequestAudit.Id}</Expression>
</Subscript>
<Subscript name="2">
<Expression>0</Expression>
</Subscript>
<Subscript name="3">
<Expression>"TXN"</Expression>
</Subscript>
<Subscript name="4">
<Expression>{Txn}</Expression>
</Subscript>
<Data name="Data">
<Piece>1</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralStatusHistory">
<Description>
This base table represents all changes to a referral's status in reverse
chronological order stored in the referral status history entry of the referral
master file.  Example of info. store are status, initials of operator and date
the status was assigned.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67333,40819.653188</TimeChanged>
<TimeCreated>63729,46521</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_STATUS</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralStatusHistory</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>StatusHistorys</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Dt">
<Type>%Date</Type>
</Property>

<Property name="Ini">
<Type>SecurityPlus.Usr</Type>
</Property>

<ForeignKey name="Ini">
<Properties>Ini</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="JoinVar">
<Description>
This is an internal column.</Description>
<Type>%Integer</Type>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="CAPTION" value="Join"/>
</Property>

<Property name="Status">
<Type>Dict.HmoReferralStatusFlag</Type>
</Property>

<ForeignKey name="Status">
<Properties>Status</Properties>
<ReferencedClass>Dict.HmoReferralStatusFlag</ReferencedClass>
</ForeignKey>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>JoinVar</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralStatusHistory"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="ByHmoIdRin">
<Description>
</Description>
<Type>DBMS.SQLQuery</Type>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[SELECT  Dt,Status->Name As Status,Ini,Ini->FullName,Ini->Telephone             
FROM    Referrals.ReferralStatusHistory
WHERE   Referral->Hmo = :Hmo AND
        Referral->Id  = :Id  AND
        Referral->Rin = :Rin]]></SqlQuery>
<Parameter name="ROWSPEC" value="Dt:%Date,Status:%String,Ini:%String,FullName:%String,Telephone:%String"/>
</Query>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralStaB914S</StreamLocation>
<ExtentSize>5806</ExtentSize>
<Property name="Dt">
<Selectivity>0.9266%</Selectivity>
</Property>
<Property name="Ini">
<Selectivity>2.0214%</Selectivity>
</Property>
<Property name="JoinVar">
<Selectivity>49.9998%</Selectivity>
</Property>
<Property name="Referral">
<Selectivity>1</Selectivity>
</Property>
<Property name="Status">
<Selectivity>25.0000%</Selectivity>
</Property>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
<StartValue>100</StartValue>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>Piece</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3}+2)</DataAccess>
<Delimiter>"/"</Delimiter>
<Expression>{JoinVar}</Expression>
</Subscript>
<Data name="Dt">
<Delimiter>"*"</Delimiter>
<Piece>3</Piece>
</Data>
<Data name="Ini">
<Delimiter>"*"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="Status">
<Delimiter>"*"</Delimiter>
<Piece>1</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralView">
<ClassType>view</ClassType>
<CompileAfter>Referrals.Referral</CompileAfter>
<DdlAllowed>1</DdlAllowed>
<Owner>SuperUser</Owner>
<ProcedureBlock>0</ProcedureBlock>
<SqlTableName>ReferralView</SqlTableName>
<TimeChanged>67413,54973.498371</TimeChanged>
<TimeCreated>67413,54973.491647</TimeCreated>
<ViewQuery> SELECT 
 	Id1, Hmo, Id, Rin, AccDt, AccX12CauseCode, AccidentCntry, AccidentSt, ActAdmDt, AttPhyDict471, CustomerDate2, CustomerDate3, CustomerDate4, CustomerDate5, CustomerFreeText1, CustomerFreeText2, CustomerFreeText3, CustomerFreeText4, CustomerFreeText5, CustomerFreeText6, CustomerYesNo1, CustomerYesNo2, CustomerYesNo3, DailyOxyUseRate, DateOfInjury, DayOfWeekSat1st, DayOfWeekSun1st, Descr, DischDtHome, DischDx, DischDxFromDt1, DischDxFromDt2, DischDxFromDt3, DischDxToDt1, DischDxToDt2, DischDxToDt3, DtOrd, Dx, Dx1FromDt, Dx1ToDt, Dx2, Dx2FromDt, Dx2ToDt, Edi278inPayrDepctr, Edi278inPayrPrvctr, Edi278inPayrReqctr, Edi278inPayrRun, Edi278inPayrSlnctr, Edi278inPayrSubctr, Edi278inPayrTxstctr, Edi278inPayrUmoctr, EdiAction, EdiAttachmentTransCode, EdiAttachmentType, EdiAuthRejReason, EdiCertType, EdiEditRejReason, EdiHsdDeliveryPattern, EdiHsdPdCnt, EdiHsdPdQual, EdiHsdQuant, EdiHsdQuantQual, EdiHsdUnits, EdiIncomingStat, EdiLevOfServ, EdiProvType, EdiRefPrvTaxonomyCode, EdiRejReason, EdiReq, EdiReqCat, EdiServType, EdiSvcPrvTaxonomyCode, EdiTradingPartner, EdiX12Status, EquipNm, EquipReasonDesc, EstDob, EstPendLiab, ExpAdmDt, ExpDischDt, ExpLos, ExpSurgDt, Extnum, FirstEncDt, FollowUpToIp, GlCredit, GlDebit, HhCertTypeCode, HhMedCovInd, HhNsfInd, HhPhyContDt, HhPhyOrdDt, HhPrognosisCode, HhStartDt, InOutArea, InOutArea2, IncomingOutgoing, InpOut, InsApprBy, InsApprDt, IntExt, LastEditBy, LastEditDt, LastMensPd, LastVisitDt, LevelOfCare, Loc, MaxAmt, MaxDays, MeasurementCode, MedApprBy, MedApprDt, MedCovIndicator, MonthlyTreatmentCnt, NatureCondCode, NewBorn, NsgHomeResStatusCode, OnsetCurSymp, OpenFsc, Operated, OrigRefNum, OutOfNetwork, OxyDeliverySysCode, OxyEquipTypeCode, OxyEquipTypeCode2, OxySaturationQty, OxyTestCondCode, OxyTestFindCode, OxyUseHourRate, OxygenFlowRate, PatCondDesc1, PatCondDesc2, PatEventTrackingNum, PatPrognosisCode, PayType, PcpOfRefPatient, PhyContDt, PortOxyFlowRate, PreCertNum, PreConvRefNum, Precert, PrecertDt, PriApp, PriEditBy, PriEditDt, PrognosisCode, PrvCertId, ReasForRefFrtxt, ReasStatis, Reason, ReasonForRef2, RefCondCat, RefCondCode, RefCont, RefFromEmerg, RefNum, RefPhyD123, RefPhyFreetext, RefPhyFreetextAddr1, RefPhyFreetextAddr2, RefPhyFreetextCty, RefPhyFreetextId, RefPhyFreetextSt, RefPhyFreetextTel, RefPhyFreetextZip, RefProv, RefTarget, RefType, ReferToBa, ReferToDiv, ReferToFreetext, ReferToFreetextId, ReferToLoc, ReferToPhy, ReferToProv, ReferToVnd, ReferralRequest, RegMicu, RentPur, ReplacementMem, ReplacementRefNum, ReplacementType, ResTherOrderText, RevDt, RiskFactor, RiskFund, RmsType, RoomNum, RoundPhy, SameDayAdm, ServDtFrom, ServDtTo, Service, SmTrtmtCnt, SmTrtmtSeriesNum, SnfIndicator, SourceType, Spec, SrvTraceNum, Statis, Status, SubluxationLevelCode, SubluxationLevelCodeTo, TargetType, TimeOfAdmit, TimeOfDay, TimeOfVis, TotEstLiab, TransDist, TransFrom, TransFromFrtxt, TransFromOthHos, TransTo, TransToFrtxt, TransWeight, TreatmentPdCount, TreatmentsAuthorized, TypeOfAdm, TypeOfHhc, TypeOfHomeHealth, TypeOfTherapy, UrReviewer, Urgency, ValidFromDt, ValidThru, ValidToDt, VndAddr, VndTel, VndrCat, XrayAvailability, Adjudication_AppAmt, Adjudication_AppDays, Adjudication_AppTreatments, Adjudication_AppUnits, Adjudication_BilledAmt, Adjudication_CopayAmt, Adjudication_DedAmt, Adjudication_OthAmt, Adjudication_RejAmt, Adjudication_WithholdAmt, DrgSerial_AlcDays, DrgSerial_BillArea, DrgSerial_BillAreaReferFrom, DrgSerial_Birthweight, DrgSerial_CovChg, DrgSerial_DischDisp, DrgSerial_Drg, DrgSerial_DrgPay, DrgSerial_DrgTable, DrgSerial_DrgType, DrgSerial_NysDrgPool, DrgSerial_NysPerdiemPool, DrgSerial_PerDiemPay
 	FROM Referrals.Referral</ViewQuery>
</Class>


<Class name="Referrals.ReferralVisit">
<Description>
This table provides a link between Referrals and the linked VM/ADT-HPA Visits.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67417,73102.50946</TimeChanged>
<TimeCreated>63729,46521</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_VISIT</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralVisit</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>Visits</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Cnt">
<Description>
This column represents the count of HPA charges against this referral.</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Count"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Grp">
<Type>Dict.GroupProfile</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="Grp">
<Properties>Grp</Properties>
<ReferencedClass>Dict.GroupProfile</ReferencedClass>
</ForeignKey>

<Property name="Vid">
<Description>
INTERNAL VISIT NUMBER</Description>
<Type>%Numeric</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Grp,Vid</Properties>
<Unique>1</Unique>
</Index>

<ForeignKey name="Visit">
<Properties>Grp,Vid</Properties>
<ReferencedClass>VM.Visit</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralVisit"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(IVTBL)<10 D ^UDDIV   ;Get extended syntax for IV_A_TBL
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(IVTBL)<10 D ^UDDIV   ;Get extended syntax for IV_A_TBL
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%KillExtent">
<Description>
%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be
used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent
is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed.
%KillExtent will be called on any subextents and on any child extents (the extent of the type class of a
relationship whose cardinality = children is a 'child' extent) of this extent.

This method is not meant for production applications. It is meant to be a development utility to quickly clear
extent physical data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDirect:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,IVTBL</PublicList>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(IVTBL)<10 D ^UDDIV   ;Get extended syntax for IV_A_TBL
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 #if +$p($SYSTEM.OBJ.Version()," ",4)>2009 
    #SQLCompile Mode=Deferred
 #endif

 &SQL(DELETE %NOTRIGGER FROM Referrals.ReferralVisit)
 Q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL,IVTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(IVTBL)<10 D ^UDDIV   ;Get extended syntax for IV_A_TBL
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralVisitS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRREG"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRREG"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRREG"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRREG"]HMOREF({L1},{L2},{L3})</DataAccess>
<Expression>"VISIT"</Expression>
</Subscript>
<Subscript name="5">
<AccessType>sub</AccessType>
<DataAccess>^["MHRREG"]HMOREF({L1},{L2},{L3},{L4})</DataAccess>
<Expression>1</Expression>
</Subscript>
<Subscript name="6">
<AccessType>sub</AccessType>
<DataAccess>^["MHRREG"]HMOREF({L1},{L2},{L3},{L4},{L5})</DataAccess>
<Expression>{Grp}</Expression>
</Subscript>
<Subscript name="7">
<AccessType>sub</AccessType>
<DataAccess>^["MHRREG"]HMOREF({L1},{L2},{L3},{L4},{L5},{L6})</DataAccess>
<Expression>{Vid}</Expression>
</Subscript>
<Data name="Cnt">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralWorkingDx">
<Description>
This base table represents the working diagnosis entries in the referral.
The data is a repeating field pointing to Dict. 36. This is used
for DRG grouper and liability estimations.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67331,3931.718899</TimeChanged>
<TimeCreated>63729,46521</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_WORK_DX</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralWorkingDx</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>WorkingDxs</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Dx">
<Description>
This column contains the working diagnosis.</Description>
<Type>Dict.Icd9CmDiagnosis</Type>
</Property>

<ForeignKey name="Dx">
<Properties>Dx</Properties>
<ReferencedClass>Dict.Icd9CmDiagnosis</ReferencedClass>
</ForeignKey>

<Property name="Repet">
<Description>
This column supports looping thru the diagnosis.</Description>
<Type>%Integer</Type>
<SqlColumnNumber>2</SqlColumnNumber>
<ReadOnly>1</ReadOnly>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Repet</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralWorkingDx"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="List">
<Description>
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Hmo:%Integer,Id:%Integer,Rin:%Integer,Field:%String="Name"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()
 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 S Referral=Hmo_"||"_Id_"||"_Rin
 &SQL(SELECT LIST(Dx) INTO :Return
      FROM   Referrals.ReferralWorkingDx
      WHERE  Referral=:Referral)                   
 I ($G(Return)="")||(Field="Id") Q Return
 Q ##class(Dict.Icd9CmDiagnosis).GetValueByIds(Return,Field)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>AI:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET</PublicList>
<Implementation><![CDATA[ D ..DxSetObjectId($G(AI(3400)))
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[AI:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 S AI(3400)=""
 I ..Dx S AI(3400)=..Dx.SummaryValidate("Dx",.Error)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.ReferralWorkingDx</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralWorkingDxS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
<StartValue>100</StartValue>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>Piece</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3}+34)</DataAccess>
<Delimiter>"^"</Delimiter>
<Expression>{Repet}</Expression>
</Subscript>
<Data name="Dx"/>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.ReferralWorkingPx">
<Description>
Working procedures from referrals module</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67331,4009.922469</TimeChanged>
<TimeCreated>63729,46522</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_WORK_PX</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.ReferralWorkingPx</Default>
</Parameter>

<Property name="Referral">
<Type>Referrals.Referral</Type>
<Cardinality>parent</Cardinality>
<Inverse>WorkingPxs</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Px">
<Description>
This column contains the working procedure.</Description>
<Type>Dict.Icd9CmProcedure</Type>
</Property>

<ForeignKey name="Px">
<Properties>Px</Properties>
<ReferencedClass>Dict.Icd9CmProcedure</ReferencedClass>
</ForeignKey>

<Property name="RgNum">
<Type>%String</Type>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>RgNum</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.ReferralWorkingPx"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="LocalToObject">
<FormalSpec>AI:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>UDDREPET</PublicList>
<Implementation><![CDATA[ D ..PxSetObjectId($G(AI(3500)))
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="ObjectToLocal">
<FormalSpec><![CDATA[AI:%String,&RowInfo:%String,Error:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList/>
<Implementation><![CDATA[
 S AI(3500)=""
 I ..Px S AI(3500)=..Px.SummaryValidate("Px",.Error)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML0 

]]></Content>
</UDLText>

<Method name="OpenIdLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Id,Concurrency=0,&Array:%String,&RowInfo:%String]]></FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>Referrals.ReferralWorkingPx</ReturnType>
<Implementation><![CDATA[
 
 s oRef=..%OpenId(Id,Concurrency) I oRef="" Q ""
 D oRef.ObjectToLocal(.Array,.RowInfo)
 Q oRef
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.ReferralWorkingPxS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.Referral.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1})</DataAccess>
<Expression>{Referrals.Referral.Id}</Expression>
<StartValue>100</StartValue>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2})</DataAccess>
<Expression>{Referrals.Referral.Rin}</Expression>
<NextCode>S {L3}={L3}+100 I {L3}]]((^["MHRHMO"]HMOREF({L1},{L2},0)*100)) S {L3}=""</NextCode>
</Subscript>
<Subscript name="4">
<AccessType>Piece</AccessType>
<DataAccess>^["MHRHMO"]HMOREF({L1},{L2},{L3}+35)</DataAccess>
<Delimiter>"^"</Delimiter>
<Expression>{RgNum}</Expression>
</Subscript>
<Data name="Px"/>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.StatusRule">
<Description>
This table contains information about the defined Referral Status Rules</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67310,48114.309114</TimeChanged>
<TimeCreated>63729,46521</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_STATUS_RULE</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.StatusRule</Default>
</Parameter>

<Property name="Conditions">
<Type>Referrals.StatusRuleCondition</Type>
<Cardinality>children</Cardinality>
<Inverse>StatusRule</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Descr">
<Description>
This column contains the description of the rule</Description>
<Type>%String</Type>
<Parameter name="CAPTION" value="Description"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DtFiled">
<Description>
This is the date on which this rule was filed</Description>
<Type>%Date</Type>
<Parameter name="CAPTION" value="Date Filed"/>
</Property>

<Property name="FiledBy">
<Description>
This column contains a reference to the USERNAME that last filed the rule</Description>
<Type>SecurityPlus.Usr</Type>
<Parameter name="CAPTION" value="Filed By"/>
</Property>

<ForeignKey name="FiledBy">
<Properties>FiledBy</Properties>
<ReferencedClass>SecurityPlus.Usr</ReferencedClass>
<ReferencedKey>DBMSKeyIndex</ReferencedKey>
</ForeignKey>

<Property name="Hmo">
<Description>
 </Description>
<Type>Dict.HmoProfile</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<ForeignKey name="Hmo">
<Properties>Hmo</Properties>
<ReferencedClass>Dict.HmoProfile</ReferencedClass>
</ForeignKey>

<Property name="Rule">
<Description>
This column contains the rule number.  When rule numbers change a new collection
of AND conditions exist</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<Property name="Status">
<Description><![CDATA[
When the rule is true this is the new status for the referral
<P>
<P>]]></Description>
<Type>Dict.HmoReferralStatusFlag</Type>
<Required>1</Required>
</Property>

<ForeignKey name="Status">
<Properties>Status</Properties>
<ReferencedClass>Dict.HmoReferralStatusFlag</ReferencedClass>
</ForeignKey>

<Property name="TmFiled">
<Description>
This is the time on which the rule was last filed.</Description>
<Type>%Time</Type>
<Parameter name="CAPTION" value="Time Filed"/>
<Parameter name="FORMAT" value="4"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Hmo,Rule</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.StatusRule"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.StatusRuleS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORSR({L1})</DataAccess>
<Expression>{Rule}</Expression>
<StartValue>1</StartValue>
<Invalidcondition name="1">
<Expression>($P({L2},".",2)'="")||(+{L2}=0)</Expression>
</Invalidcondition>
</Subscript>
<Data name="Descr">
<Delimiter>"^"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="DtFiled">
<Delimiter>"^",","</Delimiter>
<Node>+.4</Node>
<Piece>1,1</Piece>
</Data>
<Data name="FiledBy">
<Delimiter>"^"</Delimiter>
<Node>+.4</Node>
<Piece>2</Piece>
</Data>
<Data name="Status">
<Delimiter>"^"</Delimiter>
<Node>+.2</Node>
<Piece>1</Piece>
</Data>
<Data name="TmFiled">
<Delimiter>"^",","</Delimiter>
<Node>+.4</Node>
<Piece>1,2</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="Referrals.StatusRuleCondition">
<Description>
This table contains information about the defined Referral Status Rules</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<SqlRowIdName>Id</SqlRowIdName>
<StorageStrategy>DBMSStorage</StorageStrategy>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>67331,4455.209819</TimeChanged>
<TimeCreated>63729,46521</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>

<Parameter name="DBMSTable">
<Default>MCA_B_REF_STATUS_RULE_COND</Default>
</Parameter>

<Parameter name="STORAGEDELIMITERCHECK">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>RUNTIME</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>Literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://gehcit.ge.com/cb/Referrals.StatusRuleCondition</Default>
</Parameter>

<Property name="StatusRule">
<Type>Referrals.StatusRule</Type>
<Cardinality>parent</Cardinality>
<Inverse>Conditions</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Op">
<Description><![CDATA[
This column contains the relational operator
<P>]]></Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Operator"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/=/&lt;/&gt;/[/]/&apos;=/&apos;&lt;/&apos;&gt;/&apos;[/&apos;]/IN/NOT IN/"/>
</Property>

<Property name="Repet">
<Description>
This column is used to examine each AND condition</Description>
<Type>%Integer</Type>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<Property name="SysVar">
<Description>
This column contains a reference to the System Variable dictionary</Description>
<Type>Dict.HmoSystemVariable</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="System Variable"/>
</Property>

<ForeignKey name="SysVar">
<Properties>SysVar</Properties>
<ReferencedClass>Dict.HmoSystemVariable</ReferencedClass>
</ForeignKey>

<Property name="Txn">
<Description>
This column contains a collection of And conditions.  When this column changes 
an Or condition exists</Description>
<Type>%Integer</Type>
<Required>1</Required>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="Universal">
<Description><![CDATA[
this column is used to indicate if this rule is a universal rule
<P>
<P>]]></Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value="/1/"/>
</Property>

<Property name="Val">
<Description><![CDATA[
this column contains the logical value of the expression.
The Cache Class <class>MCA.PlanCovExceptionRule</class> contains a method
ValueExternal which can be used to retrieve this information in a usable 
form
<P>]]></Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="CAPTION" value="Value"/>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="DBMSKeyIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Txn,Repet</Properties>
<Unique>1</Unique>
</Index>

<Trigger name="ReadOnlyInsert">
<Code> s %ok=0,%msg="This table does not support Insert"</Code>
<Event>INSERT</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyUpdate">
<Code> s %ok=0,%msg="This table does not support Update"</Code>
<Event>UPDATE</Event>
<Time>BEFORE</Time>
</Trigger>

<Trigger name="ReadOnlyDelete">
<Code> s %ok=0,%msg="This table does not support Delete"</Code>
<Event>DELETE</Event>
<Time>BEFORE</Time>
</Trigger>

<Method name="%OnDetermineClass">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oid:%ObjectIdentity,&class:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set class="Referrals.StatusRuleCondition"
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Generated by: UDDCXML6 

]]></Content>
</UDLText>

<Method name="DelimiterCheck">
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Q 1
]]></Implementation>
</Method>

<Method name="GetDisplayField">
<Description>
Return the value of the entry to be displayed when only supplied an Id</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<PublicList>SECID,SECCAT,HMOTBL</PublicList>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 I $G(SECID)="" N SECID S SECID=$$GetSQLUser^UDDCACHE()

 If $D(HMOTBL)<10 D ^UDDMCA   ;Get extended syntax for MCA_A_TBL
 Q Id
]]></Implementation>
</Method>

<Storage name="DBMSStorage">
<Type>%CacheSQLStorage</Type>
<StreamLocation>^Referrals.StatusRuleConditionS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<SQLMap name="DBMSMaster">
<Type>data</Type>
<Global>HMOTBL</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{Referrals.StatusRule.Hmo}</Expression>
</Subscript>
<Subscript name="2">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORSR({L1})</DataAccess>
<Expression>{Referrals.StatusRule.Rule}</Expression>
<StartValue>1</StartValue>
<Invalidcondition name="1">
<Expression>($P({L2},".",2)'="")||(+{L2}=0)</Expression>
</Invalidcondition>
<Invalidcondition name="2">
<Expression>($P({L2},".",2)'="")||(+{L2}=0)</Expression>
</Invalidcondition>
</Subscript>
<Subscript name="3">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORSR({L1},{L2})</DataAccess>
<Expression>0</Expression>
</Subscript>
<Subscript name="4">
<AccessType>sub</AccessType>
<DataAccess>^["MHRHMO"]HMORSR({L1},{L2},{L3})</DataAccess>
<Expression>{Txn}</Expression>
<Invalidcondition name="2">
<Expression>$P({L4},".",2)'=""</Expression>
</Invalidcondition>
</Subscript>
<Subscript name="5">
<AccessType>Piece</AccessType>
<Delimiter>"^"</Delimiter>
<Expression>{Repet}</Expression>
</Subscript>
<Data name="Op">
<Delimiter>"*"</Delimiter>
<Piece>2</Piece>
</Data>
<Data name="SysVar">
<Delimiter>"*"</Delimiter>
<Piece>1</Piece>
</Data>
<Data name="Universal">
<Delimiter>"*"</Delimiter>
<Piece>4</Piece>
</Data>
<Data name="Val">
<Delimiter>"*"</Delimiter>
<Piece>3</Piece>
</Data>
</SQLMap>
</Storage>
</Class>
</Export>
